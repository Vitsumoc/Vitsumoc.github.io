[{"title":"使用n2n连接不同局域网设备","date":"2023-12-06T06:37:00.000Z","path":"2023/12/06/n2nBeginner.html","text":"前言目的是想在办公室使用家里的服务器 家里有不固定的公网IP，办公室有固定的公网IP，因此打算使用办公室服务器做Server 为什么不用frp？：因为想获得一个完整的网络服务，而frp只能做端口映射，如果开发过程中新增端口，需要修改frp就很麻烦 n2n简介n2n 是一个开源项目，地址在这里： https://github.com/ntop/n2n n2n 是一个二层VPN技术，他能在家里的服务器和办公室的服务器之间创建一个局域网链接 n2n 网络由 supernode 和 edge 组成，可以简单理解为同一 supernode 下的所有 edge 都处在同一个局域网中。 网络环境办公室网络： 网段：192.168.34.0&#x2F;24 网关：192.168.34.1 网关公网地址：88.88.88.88 服务器地址：192.168.34.194 家庭网络 网段：192.168.0.0&#x2F;24 网关：192.168.0.1 网关公网地址：不固定 服务器地址：192.168.0.12 规划n2n网络由于办公室有固定的公网地址，就由办公室服务器充当 supernode，同时家庭服务器和办公室服务器都是此 supernode 下的 edgen2n 会形成一个新的局域网，规划如下： 网段：10.0.34.0&#x2F;24 网关：无 办公室服务器：10.0.34.21 家庭服务器：10.0.34.41 实施下载安装n2n在办公室服务器和家庭服务器都下载并安装 n2n： https://github.com/ntop/n2n/releases 安装完成后，服务器中会自动生成两个服务 supernode 和 edge 配置文件位于 /etc/n2n/ 配置办公室服务器办公室服务器需要承担三个职能：充当 supernode，充当 edge，转发其他办公室设备到家庭服务器的网络包 配置supernode配置 /etc/n2n/community.list 文件，指定community名称 community.list1msj2701 # community名称 复制 supernode.conf.sample 文件，并修改配置内容 shell1cp /etc/n2n/supernode.conf.sample /etc/n2n/supernode.conf shell1vi /etc/n2n/supernode.conf supernode.conf12-p=7777 # 指定supernode服务端口-c=/etc/n2n/community.list # 指定引用的community文件 启动supernode shell12systemctl enable supernodesystemctl start supernode 之后可以看到 supernode 已经启动，并且在7777端口提供服务： 配置edge配置 edge 使办公室服务器成为 n2n 网络的成员 复制 edge.conf.sample 文件，并修改配置内容 shell1cp /etc/n2n/edge.conf.sample /etc/n2n/edge.conf shell1vi /etc/n2n/edge.conf edge.conf123456-d=n2n0 # 指定虚拟网卡名称-c=msj2701 # community名称-k=888888 # 通讯加密密钥-a=10.0.34.21 # 在n2n网络中的地址-l=127.0.0.1:7777 # supernode服务地址-r # 允许通过n2n转发数据包 启动edge shell12systemctl enable edgesystemctl start edge 启动后，可以看到 n2n 已经添加了虚拟网卡： 开启数据包转发功能需要通过办公室服务器转发办公室其他电脑到家庭服务器的流量，因此需要在办公室服务器上开启数据包转发功能 需要将 /etc/sysctl.conf 文件中的 net.ipv4.ip_forward 修改为 1 shell1vi /etc/sysctl.conf sysctl.conf123...net.ipv4.ip_forward=1... 配置办公室网关添加静态路由其他办公室电脑没有到 n2n 网络的路由，因此数据包会发送到办公室网关 此时需要配置办公室网关，添加一条指向 n2n 网络的静态路由，下一条为办公室服务器的办公网地址 配置家庭服务器配置edge，设置自动添加路由家庭服务器的 edge 安装配置过程与办公室服务器的 edge 大致相同，但有两点需要注意： 无需添加-r参数，因为家庭服务器不需要将来自其他设备的包转发到n2n网络 需要添加-n参数，这样edge启动时会自动产生一条通过n2n网络到达办公室网络的路由 edge.conf123456-d=n2n0 # 指定虚拟网卡名称-c=msj2701 # community名称-k=888888 # 通讯加密密钥-a=10.0.34.41 # 在n2n网络中的地址-l=88.88.88.88:17777 # supernode公网地址-n=192.168.34.0/24:10.0.34.21 验证n2n网络验证使用 n2n 网络地址从办公室服务器ping家庭服务器，或从家庭服务器ping办公室服务器，成功 此时数据包的实际流向是 办公室服务器-&gt;办公室网关-&gt;运营商网络-&gt;家庭网关-&gt;家庭服务器 由于 n2n vpn的配置，此时可以认为办公室服务器和家庭服务器处在同一局域网下，tracert也仅一跳可达 办公室电脑到家庭服务器网络验证办公室电脑ping家庭服务器，成功 此时数据包流向是 办公室电脑-&gt;办公室网关-&gt;办公室服务器-&gt;家庭服务器，其中办公室服务器到家庭服务器是 n2n 虚拟链路 tracert三跳可达 家庭服务器到办公室电脑家庭服务器ping办公室电脑，成功 此时数据包流向是 家庭服务器-&gt;办公室服务器-&gt;办公室电脑，其中家庭服务器到办公室服务器是 n2n 虚拟链路 tracert两跳可达","tags":[{"name":"网络编程","slug":"网络编程","permalink":"https://vitsumoc.github.io/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"},{"name":"网络工具","slug":"网络工具","permalink":"https://vitsumoc.github.io/tags/%E7%BD%91%E7%BB%9C%E5%B7%A5%E5%85%B7/"}]},{"title":"工作周报可视化","date":"2023-12-05T03:31:51.000Z","path":"2023/12/05/weekreport2chart.html","text":"起因这个项目是一个纯粹的小玩具，起因是我公司的工作周报都是 .doc 格式存储的，现在到年底了，我又比较想知道我一年都干了哪些工作。显而易见的一个方式就是提取所有周报文字内容做词频分析。 效果完成之后的效果还算不错，源码也放在了github上： https://github.com/vitsumoc/weekreport2chart 提取一段时间的工作周报内容，生成词云和河流图 可以直接过滤低频词汇，或手动操作删除某些虚词、连词等 相关库使用libreoffice将doc转为docx 使用结巴分词分词：https://github.com/fxsjy/jieba 使用wordcloudjs词云：https://wordcloud2-js.timdream.org/#love 使用echarts河流图","tags":[{"name":"python","slug":"python","permalink":"https://vitsumoc.github.io/tags/python/"},{"name":"小玩具","slug":"小玩具","permalink":"https://vitsumoc.github.io/tags/%E5%B0%8F%E7%8E%A9%E5%85%B7/"},{"name":"js","slug":"js","permalink":"https://vitsumoc.github.io/tags/js/"}]},{"title":"在golang中使用lua","date":"2023-12-05T03:25:15.000Z","path":"2023/12/05/golua.html","text":"使用gopher-lua，在golang中使用lua。gopher-lua 项目地址： https://github.com/yuin/gopher-lua 使用示例仓库地址： https://github.com/vitsumoc/my-golua 示例列表： 最基础的用法 基础数据类型 在lua中调用go方法 在go中使用lua协程 示范如何手动开启模块 在lua中使用go模块 在golang中调用lua方法 在lua中使用golang数据 通过context控制停止 在有协程的情况下使用context控制 共享lua文件字节码, 减少开销 通过go协程跑lua的示例 可以把ch带到lua中 和相关限制 在lua中使用ch的例子 lua虚拟机池 在golang中提供钩子, 使lua可以注册脚本, 在脚本中获得并修改用户数据","tags":[{"name":"golang","slug":"golang","permalink":"https://vitsumoc.github.io/tags/golang/"},{"name":"库","slug":"库","permalink":"https://vitsumoc.github.io/tags/%E5%BA%93/"},{"name":"小玩具","slug":"小玩具","permalink":"https://vitsumoc.github.io/tags/%E5%B0%8F%E7%8E%A9%E5%85%B7/"}]},{"title":"使用Systemd管理自启动","date":"2023-12-01T06:19:42.000Z","path":"2023/12/01/linuxBoot.html","text":"常用命令启动服务 shell1systemctl start service-name 停止服务 shell1systemctl stop service-name 查看服务状态 shell1systemctl status service-name 设置开机自启动 shell1systemctl enable service-name 停止开机自启动 shell1systemctl disable service-name 服务注册在 /etc/systemd/system 路径下，创建 service-name.service 文件，格式如下： shell12345678910111213[Unit]# 服务名称Description = xxxx serverAfter = network.target syslog.targetWants = network.target[Service]Type = simple# 启动命令ExecStart = /home/start.sh[Install]WantedBy = multi-user.target","tags":[{"name":"豆知识","slug":"豆知识","permalink":"https://vitsumoc.github.io/tags/%E8%B1%86%E7%9F%A5%E8%AF%86/"},{"name":"环境配置","slug":"环境配置","permalink":"https://vitsumoc.github.io/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"},{"name":"Linux","slug":"Linux","permalink":"https://vitsumoc.github.io/tags/Linux/"}]},{"title":"AI入门笔记（3）——感知器","date":"2023-12-01T01:32:11.000Z","path":"2023/12/01/AiForBeginners-3.html","text":"课程https://github.com/microsoft/AI-For-Beginners/blob/main/lessons/3-NeuralNetworks/03-Perceptron/README.md 这是微软提供的AI-For-Beginners课程第三课，介绍了什么是感知器（Perceptron） 内容感知器Perceptron是一种二元分类模型，总是能根据输入产生一个+1或-1的输出。 感知器进行计算时需要权重weight的参与，权重会导致感知器产生正确或错误的结果，训练的过程既是修改权重不断增加结果的正确率。 感知器只能解决线性分类的问题，如果一个问题无法被线性分类，感知器就不会收敛，例如异或问题。 随堂作业在本课的作业中，需要使用 Jupyter 构建代码+文档的环境，使用 sklearn 创造测试数据，使用 numPy 表示和处理数据，使用 matpoltlib 绘制数据图像，使用 ipywidgets 交互式的查看训练过程。 训练感知器分类数据https://github.com/vitsumoc/exercise-AI-Beginner/blob/main/3-Perceptron/perceptron.py 作业中使用代码实现了训练感知器的过程： 创建数据集合，分类为训练数据和测试数据 将训练数据分类为pos和neg 初始化权重值 设置训练次数并开始训练，每次选择随机的数据进行训练 在每次训练错误时，使用本次选择的数据对权重进行调整 使用测试数据验证训练后的权重值 感知器的局限性https://github.com/vitsumoc/exercise-AI-Beginner/blob/main/3-Perceptron/xor.ipynb 感知器只能解决线性分类问题，对于无法使用一条直线分类的问题，往往就无法很好的收敛。 作业中的异或问题就是一个完全无法收敛的例子。 使用感知器 + MNIST 数据识别手写数字https://github.com/vitsumoc/exercise-AI-Beginner/blob/main/3-Perceptron/mnist.ipynb 在这个作业中使用感知器区分手写数字图像。 使用PCA降低特征的维度，分析感知器训练结果差异的原因。 训练感知器识别任何手写数字这个作业中需要拓展上一个作业的功能，训练10个不同的感知器，用来识别0-9全部的数字。 https://github.com/vitsumoc/exercise-AI-Beginner/blob/main/3-Perceptron/anyNum.ipynb 参考上一个作业的方式，训练了10组weights，来判断一个数字是或不是特定的数字。 每个感知器训练10000次，最终正确率 74.7%。","tags":[{"name":"AI","slug":"AI","permalink":"https://vitsumoc.github.io/tags/AI/"},{"name":"笔记","slug":"笔记","permalink":"https://vitsumoc.github.io/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"Jupyter入门笔记","date":"2023-11-30T06:29:43.000Z","path":"2023/11/30/pythonJupyter.html","text":"前言网站 https://jupyter.org/ jupyter 项目提供了可供计算的记事本，将代码、资源、交互式计算与文档结合。 试用可以通过试用界面 https://jupyter.org/try 直接体验jupyter，建立大致的了解。 打开jupyter lab 在指定路径打开jupyter lab，程序会占用8888端口，可通过http://localhost:8888/访问图形化界面。 文件jupyter会将执行程序的目录作为文件系统的根目录。 jupyter的文件后缀为 .ipynb 其中可以混合代码、文档、输出。 可以直接在 jupyter lab 提供的浏览器界面中新建、编辑、删除文件。 内容编辑以下是一个混合了 文档、代码、输出、图像、组件的文件截图，因为导出的PDF不支持组件，所以组件输出为文本。 github也支持 .ipynb 格式，但同样不支持组件，这是上方图片文件的原始内容： https://github.com/vitsumoc/exercise-AI-Beginner/blob/main/PyBeginner/jupyter.ipynb","tags":[{"name":"豆知识","slug":"豆知识","permalink":"https://vitsumoc.github.io/tags/%E8%B1%86%E7%9F%A5%E8%AF%86/"},{"name":"笔记","slug":"笔记","permalink":"https://vitsumoc.github.io/tags/%E7%AC%94%E8%AE%B0/"},{"name":"python","slug":"python","permalink":"https://vitsumoc.github.io/tags/python/"},{"name":"库","slug":"库","permalink":"https://vitsumoc.github.io/tags/%E5%BA%93/"}]},{"title":"Matplotlib入门笔记","date":"2023-11-29T07:40:57.000Z","path":"2023/11/29/pythonMatplotlib.html","text":"前言网站 https://matplotlib.org/stable/ Matplotlib 是一个用于创建静态、动画和交互式可视化的综合库。 本文是学习 Matplotlib 过程中的笔记，所有内容都来自官方文档：https://matplotlib.org/stable/users/explain/quick_start.html 1. 入门示例python1234567891011121314import matplotlib.pyplot as pltimport numpy as npimport matplotlib as mpldef e1(): x = np.linspace(0, 2 * np.pi, 200) y = np.sin(x) fig, ax = plt.subplots() ax.plot(x, y) plt.show()e1() 2. 窗口、图像和绘制python12345678def e2(): # 创建一个只有一个 axes 的 figure fig, ax = plt.subplots() # 在 axes 上 plot 一些数据 ax.plot([1, 2, 3, 4], [1, 4, 2, 3]) plt.show()e2() 3. figure 的构成部分python123456789101112131415# figure 是一个绘图窗口# axes 是一副数据图像# axis 是坐标轴def e3(): # 一个没有 axes 的 figure fig = plt.figure() # 只有一个 axes 的图像 fig, ax = plt.subplots() # 2 * 2 布局的图像 fig, axs = plt.subplots(2, 2) # 左一右二布局 fig, axs = plt.subplot_mosaic([[&#x27;left&#x27;, &#x27;right_top&#x27;], [&#x27;left&#x27;, &#x27;right_bottom&#x27;]]) plt.show()e3() 4. 输入数据类型python12345678910111213141516171819202122232425def e4(): # plot 接受 np.array np.ma.masked_array np.asarray 三种类型的输入 # 如果不是此类数据，需要先进行处理 b = np.matrix([[1, 2], [3, 4]]) b_asarray = np.asarray(b) # 对于一些已经准备好的对象(字典)数据, 也可以用下面的方式输入 np.random.seed(19680801) # seed the random number generator. # a 是 0-50 的整数 用于每个数据的 x 坐标 # b 是 50个随机数 用于每个数据的 y 坐标 (50个0-1的随机数 * 10 再加 x坐标) # c 随机颜色 50个50以下的整数 # d 是随机尺寸 data = &#123;&#x27;a&#x27;: np.arange(50), &#x27;c&#x27;: np.random.randint(0, 50, 50), &#x27;d&#x27;: np.random.randn(50)&#125; data[&#x27;b&#x27;] = data[&#x27;a&#x27;] + 10 * np.random.randn(50) data[&#x27;d&#x27;] = np.abs(data[&#x27;d&#x27;]) * 100 fig, ax = plt.subplots(figsize=(5, 2.7), layout=&#x27;constrained&#x27;) # 离散数据 使用字典中的内容赋值 ax.scatter(&#x27;a&#x27;, &#x27;b&#x27;, c=&#x27;c&#x27;, s=&#x27;d&#x27;, data=data) ax.set_xlabel(&#x27;entry a&#x27;) ax.set_ylabel(&#x27;entry b&#x27;) plt.show()e4() 5. 接口风格python12345678910111213141516171819202122232425262728293031323334# mplib提供了两种接口风格 一是显示的获取各层对象并调用 二是直接使用plt搞定一切# 显示风格的例子def e5_1(): x = np.linspace(0, 2, 100) # 示意数据 # 获得 figure 和 axes fig, ax = plt.subplots(figsize=(5, 2.7), layout=&#x27;constrained&#x27;) # 一次二次和三次函数 ax.plot(x, x, label=&#x27;linear&#x27;) ax.plot(x, x**2, label=&#x27;quadratic&#x27;) ax.plot(x, x**3, label=&#x27;cubic&#x27;) # 指定xy的label ax.set_xlabel(&#x27;x label&#x27;) ax.set_ylabel(&#x27;y label&#x27;) # axes 的title ax.set_title(&quot;Simple Plot&quot;) # 添加一个图例 用来显示各plot的label ax.legend() plt.show()# 隐式风格的例子 效果和显示风格完全相同def e5_2(): x = np.linspace(0, 2, 100) plt.figure(figsize=(5, 2.7), layout=&#x27;constrained&#x27;) plt.plot(x, x, label=&#x27;linear&#x27;) plt.plot(x, x**2, label=&#x27;quadratic&#x27;) plt.plot(x, x**3, label=&#x27;cubic&#x27;) plt.xlabel(&#x27;x label&#x27;) plt.ylabel(&#x27;y label&#x27;) plt.title(&quot;Simple Plot&quot;) plt.legend() plt.show()e5_1()e5_2() 6. 制作辅助函数python12345678910111213141516# 制作工具函数, 避免代码重复def e6_plotter(ax, data1, data2, param_dict): &quot;&quot;&quot; A helper function to make a graph. &quot;&quot;&quot; out = ax.plot(data1, data2, **param_dict) return outdef e6(): data1, data2, data3, data4 = np.random.randn(4, 100) # make 4 random data sets fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(5, 2.7)) e6_plotter(ax1, data1, data2, &#123;&#x27;marker&#x27;: &#x27;x&#x27;&#125;) e6_plotter(ax2, data3, data4, &#123;&#x27;marker&#x27;: &#x27;o&#x27;&#125;) plt.show()e6() 7. 样式python123456789101112def e7(): data1, data2 = np.random.randn(2, 100) fig, ax = plt.subplots(figsize=(5, 2.7)) x = np.arange(len(data1)) # plot 直接跟样式参数 ax.plot(x, np.cumsum(data1), color=&#x27;blue&#x27;, linewidth=3, linestyle=&#x27;--&#x27;) l, = ax.plot(x, np.cumsum(data2), color=&#x27;orange&#x27;, linewidth=2) # plot 后对返回内容进行样式赋值 l.set_linestyle(&#x27;:&#x27;) plt.show()e7() 8. 标记基础标记python12345678910111213141516171819202122def e8_1(): mu, sigma = 115, 15 # x 是一万个值的列表 randn 会给出一组正态分布的随机数结果 x = mu + sigma * np.random.randn(10000) fig, ax = plt.subplots(figsize=(5, 2.7), layout=&#x27;constrained&#x27;) # the histogram of the data # 直方图参数: x-数据内容 50-柱数量 density-返回概率密度 n, bins, patches = ax.hist(x, 50, density=True, facecolor=&#x27;C0&#x27;, alpha=0.75) # 轴和图的标题 ax.set_xlabel(&#x27;Length [cm]&#x27;) ax.set_ylabel(&#x27;Probability&#x27;) ax.set_title(&#x27;Aardvark lengths\\n (not really)&#x27;) # 文本 (使用了数学符号) ax.text(75, .025, r&#x27;$\\mu=115,\\ \\sigma=15$&#x27;) # 轴定义 ax.axis([55, 175, 0, 0.03]) # 网线 ax.grid(True) plt.show()e8_1() 标记图上的点python1234567891011121314def e8_2(): fig, ax = plt.subplots(figsize=(5, 2.7)) t = np.arange(0.0, 5.0, 0.01) s = np.cos(2 * np.pi * t) line, = ax.plot(t, s, lw=2) # 使用点位、文本位、箭头设置来标记点 ax.annotate(&#x27;local max&#x27;, xy=(2, 1), xytext=(3, 1.5), arrowprops=dict(facecolor=&#x27;black&#x27;, shrink=0.05)) # y轴limit ax.set_ylim(-2, 2) plt.show()e8_2() 添加 Legend用以区分数据python12345678910def e8_3(): data1, data2, data3 = np.random.randn(3, 100) fig, ax = plt.subplots(figsize=(5, 2.7)) ax.plot(np.arange(len(data1)), data1, label=&#x27;data1&#x27;) ax.plot(np.arange(len(data2)), data2, label=&#x27;data2&#x27;) ax.plot(np.arange(len(data3)), data3, &#x27;d&#x27;, label=&#x27;data3&#x27;) ax.legend() plt.show()e8_3() 9. 轴的比例和刻度轴的比例定义python1234567891011121314151617def e9_1(): # 100 个随机数 data1 = np.random.randn(100) # 两个 axes fig, axs = plt.subplots(1, 2, figsize=(5, 2.7), layout=&#x27;constrained&#x27;) # x轴为随机数的数量 xdata = np.arange(len(data1)) # y数据为 10 ** data1 data = 10**data1 # axes 使用折线图 axs[0].plot(xdata, data) # axes 使用对数坐标 图像内容接近 data1 的原始值 axs[1].set_yscale(&#x27;log&#x27;) axs[1].plot(xdata, data) plt.show()e9_1() 手动操作 axis 上的 tickspython12345678910111213141516def e9_2(): data1 = np.random.randn(100) xdata = np.arange(len(data1)) fig, axs = plt.subplots(2, 1, layout=&#x27;constrained&#x27;) axs[0].plot(xdata, data1) axs[0].set_title(&#x27;Automatic ticks&#x27;) axs[1].plot(xdata, data1) # 设置x 轴和显示内容 axs[1].set_xticks(np.arange(0, 100, 30), [&#x27;zero&#x27;, &#x27;30&#x27;, &#x27;sixty&#x27;, &#x27;90&#x27;]) # 设置 y 轴 axs[1].set_yticks([-1.5, 0, 1.5]) axs[1].set_title(&#x27;Manual ticks&#x27;) plt.show()e9_2() 使用时间做轴python123456789101112131415def e9_3(): fig, ax = plt.subplots(figsize=(5, 2.7), layout=&#x27;constrained&#x27;) # 通过时间范围和间隔构建时间戳数组 dates = np.arange(np.datetime64(&#x27;2021-11-15&#x27;), np.datetime64(&#x27;2021-12-25&#x27;), np.timedelta64(1, &#x27;h&#x27;)) # 随机数的数据 data = np.cumsum(np.random.randn(len(dates))) # x 和 y 数据正常放入图像 ax.plot(dates, data) # 设置日期格式化方式并添加到轴 cdf = mpl.dates.ConciseDateFormatter(ax.xaxis.get_major_locator()) ax.xaxis.set_major_formatter(cdf) plt.show()e9_3() 使用字符串做轴python12345678def e9_4(): fig, ax = plt.subplots(figsize=(5, 2.7), layout=&#x27;constrained&#x27;) categories = [&#x27;turnips&#x27;, &#x27;rutabaga&#x27;, &#x27;cucumber&#x27;, &#x27;pumpkins&#x27;] ax.bar(categories, np.random.rand(len(categories))) plt.show()e9_4() 添加更多的轴python12345678910111213141516171819def e9_5(): t = np.arange(0.0, 5.0, 0.01) s = np.cos(2 * np.pi * t) # fig上的图像为 ax1 和 ax3 fig, (ax1, ax3) = plt.subplots(1, 2, figsize=(7, 2.7), layout=&#x27;constrained&#x27;) l1, = ax1.plot(t, s) # ax2 和 ax1 绘制在一起, 共享x轴 ax2 = ax1.twinx() l2, = ax2.plot(t, range(len(t)), &#x27;C1&#x27;) ax2.legend([l1, l2], [&#x27;Sine (left)&#x27;, &#x27;Straight (right)&#x27;]) ax3.plot(t, s) ax3.set_xlabel(&#x27;Angle [rad]&#x27;) # secondary_xaxis 用于创建一个新的x轴 传入了和原x轴的互相转换函数 ax4 = ax3.secondary_xaxis(&#x27;top&#x27;, functions=(np.rad2deg, np.deg2rad)) ax4.set_xlabel(&#x27;Angle [°]&#x27;) plt.show()e9_5() 10. 色块图python12345678910111213141516171819202122232425def e10(): data1, data2, data3 = np.random.randn(3, 100) X, Y = np.meshgrid(np.linspace(-3, 3, 128), np.linspace(-3, 3, 128)) Z = (1 - X/2 + X**5 + Y**3) * np.exp(-X**2 - Y**2) fig, axs = plt.subplots(2, 2, layout=&#x27;constrained&#x27;) pc = axs[0, 0].pcolormesh(X, Y, Z, vmin=-1, vmax=1, cmap=&#x27;RdBu_r&#x27;) fig.colorbar(pc, ax=axs[0, 0]) axs[0, 0].set_title(&#x27;pcolormesh()&#x27;) co = axs[0, 1].contourf(X, Y, Z, levels=np.linspace(-1.25, 1.25, 11)) fig.colorbar(co, ax=axs[0, 1]) axs[0, 1].set_title(&#x27;contourf()&#x27;) pc = axs[1, 0].imshow(Z**2 * 100, cmap=&#x27;plasma&#x27;, norm=mpl.colors.LogNorm(vmin=0.01, vmax=100)) fig.colorbar(pc, ax=axs[1, 0], extend=&#x27;both&#x27;) axs[1, 0].set_title(&#x27;imshow() with LogNorm()&#x27;) pc = axs[1, 1].scatter(data1, data2, c=data3, cmap=&#x27;RdBu_r&#x27;) fig.colorbar(pc, ax=axs[1, 1], extend=&#x27;both&#x27;) axs[1, 1].set_title(&#x27;scatter()&#x27;) plt.show()e10() 11. 多 axes 使用 dict 操作python12345678def e11(): fig, axd = plt.subplot_mosaic([[&#x27;upleft&#x27;, &#x27;right&#x27;], [&#x27;lowleft&#x27;, &#x27;right&#x27;]], layout=&#x27;constrained&#x27;) axd[&#x27;upleft&#x27;].set_title(&#x27;upleft&#x27;) axd[&#x27;lowleft&#x27;].set_title(&#x27;lowleft&#x27;) axd[&#x27;right&#x27;].set_title(&#x27;right&#x27;)e11()","tags":[{"name":"豆知识","slug":"豆知识","permalink":"https://vitsumoc.github.io/tags/%E8%B1%86%E7%9F%A5%E8%AF%86/"},{"name":"笔记","slug":"笔记","permalink":"https://vitsumoc.github.io/tags/%E7%AC%94%E8%AE%B0/"},{"name":"python","slug":"python","permalink":"https://vitsumoc.github.io/tags/python/"},{"name":"库","slug":"库","permalink":"https://vitsumoc.github.io/tags/%E5%BA%93/"}]},{"title":"Numpy入门笔记","date":"2023-11-28T01:13:53.000Z","path":"2023/11/28/pythonNumpy.html","text":"前言网站 https://numpy.org/ NumPy（Numerical Python）是Python中数字处理的事实标准，也是学习其他数据知识的必备工具。 本文是学习Numpy过程中的笔记，所有内容都来自官方文档：https://numpy.org/doc/stable/user/absolute_beginners.html 1. 普通数组和np数组的区别python12345678import numpy as np# 普通数组a = [0, 1, 2, 3]print(a)# np数组b = np.array(a)print(b) 2. 创建np数组的方法python12345678np.zeros(2) # 全0填充np.ones(2) # 全1填充np.empty(2) # 空数组np.arange(4) # [0, 1, 2, 3]np.arange(2, 9, 2) # [2, 4, 6, 8]np.linspace(0, 10, num=5) # [0, 2.5, 5, 7.5, 10]# 可以自己决定数据类型np.ones(2, dtype=np.int64) # [1, 1] 3. 排序和拼接python12345678arr = np.array([2, 1, 5, 3, 7, 4, 6, 8])np.sort(arr) # 排序a = np.array([1, 2, 3, 4])b = np.array([5, 6, 7, 8])np.concatenate((a, b)) # 拼接x = np.array([[1, 2], [3, 4]])y = np.array([[5, 6]])np.concatenate((x, y), axis=0) # 拼接 4. 形状和大小python12345678array_example = np.array([ [[0, 1, 2, 3], [4, 5, 6, 7]], [[0, 1, 2, 3], [4, 5, 6, 7]], [[0 ,1 ,2, 3], [4, 5, 6, 7]]])array_example.ndim # 维度 3array_example.size # 大小 24array_example.shape # 形状 (3, 2, 4) 5. 改变数组的形状python123456a = np.arange(6)b = a.reshape(3, 2)# [[0 1]# [2 3]# [4 5]]np.reshape(a, newshape=(1, 6), order=&#x27;C&#x27;) # 更多参数 6. 添加维度python1234567891011a = np.array([1, 2, 3, 4, 5, 6])a.shape # 一维 (6, )a2 = a[np.newaxis, :]a2.shape # 二维 (1, 6)col_vector = a[:, np.newaxis] # 插入列向量col_vector.shape # 二维 (6, 1)# 在指定维度插入b = np.expand_dims(a, axis=1)b.shape # (6, 1)c = np.expand_dims(a, axis=0)c.shape # (1, 6) 7. 索引和切片python12345678910111213141516171819202122232425data = np.array([1, 2, 3])data[1] # 正常索引方式 2data[0:2] # 正常切片 array([1, 2])data[1:] # 正向到底 array([2, 3])data[-2:] # 反向到底 array([2, 3])# 条件过滤a = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])a[a &lt; 8] # 符合条件的内容 [1 2 3 4 5 6 7]five_up = (a &gt;= 5) # 条件表达式作为参数a[five_up] # [5 6 7 8 9 10 11 12]c = a[(a &gt; 2) &amp; (a &lt; 11)] # 可以使用与&amp;或| [3 4 5 6 7 8 9 10]five_up = (a &gt; 5) | (a == 5) # 条件本身会被计算成一个bool数组, 和原数组结构相同five_up# [[False False False False]# [ True True True True]# [ True True True True]]a = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])b = np.nonzero(a &lt; 6) # 根据查询条件, 返回符合条件的元素的索引# 返回的数组数是a的维数, 返回值是索引值, 返回长度是符合条件的个数# print(b) # (array([0, 0, 0, 0, 1], dtype=int64), array([0, 1, 2, 3, 0], dtype=int64))# 将上述内容压缩成坐标列表list_of_coordinates= list(zip(b[0], b[1])) # [[0, 0], [0, 1], [0, 2], [0, 3], [1, 0]]a[b] # 也可以用索引直接获得元素 [1 2 3 4 5]# 结果为空not_there = np.nonzero(a == 42) # (array([], dtype=int64), array([], dtype=int64)) 8. 现有数据转数组python1234567891011121314151617181920212223242526272829a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])arr1 = a[3:8] # 通过切片创建新数组 array([4, 5, 6, 7, 8])a1 = np.array([[1, 1], [2, 2]])a2 = np.array([[3, 3], [4, 4]])np.vstack((a1, a2)) # 垂直堆叠 [[1, 1], [2, 2], [3, 3], [4, 4]]np.hstack((a1, a2)) # 水平堆叠 [[1, 1], [3, 3], [2, 2], [4, 4]]x = np.arange(1, 25).reshape(2, 12) # 素材# array([[ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],# [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]])np.hsplit(x, 3) # 拆成三个# [array([[ 1, 2, 3, 4],# [13, 14, 15, 16]]), array([[ 5, 6, 7, 8],# [17, 18, 19, 20]]), array([[ 9, 10, 11, 12],# [21, 22, 23, 24]])]np.hsplit(x, (3, 4)) # 按指定列号拆分# [array([[ 1, 2, 3],# [13, 14, 15]]), array([[ 4],# [16]]), array([[ 5, 6, 7, 8, 9, 10, 11, 12],# [17, 18, 19, 20, 21, 22, 23, 24]])]# 视图是引用, 修改视图也会修改原数据a = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])b1 = a[0, :] # array([1, 2, 3, 4])b1[0] = 99a# array([[99, 2, 3, 4],# [ 5, 6, 7, 8],# [ 9, 10, 11, 12]])# copy是复制, 修改copy对原数据没影响b2 = a.copy() 9. 基础数组操作python123456789101112131415161718192021# 加减乘除data = np.array([1, 2]) # [1 2]ones = np.ones(2, dtype=int) # [1 1]data + ones # [2 3]# 求和a = np.array([1, 2, 3, 4])a.sum() # 10# 在所选维度求和b = np.array([[1, 1], [2, 2]])b.sum(axis=0) # [3, 3]b.sum(axis=1) # [2, 4]# 和常量的运算data = np.array([1.0, 2.0])data * 1.6 # [1.6 3.2]# 素材a = np.array([[0.45053314, 0.17296777, 0.34376245, 0.5510652], [0.54627315, 0.05093587, 0.40067661, 0.55645993], [0.12697628, 0.82485143, 0.26590556, 0.56917101]])a.sum() # 求和 4.8595784a.min() # 极小值 0.05093587a.min(axis=0) # 维度极小值 [0.12697628, 0.05093587, 0.26590556, 0.5510652 ] 10. 矩阵python12345678910111213141516171819202122232425data = np.array([[1, 2], [3, 4], [5, 6]])# array([[1, 2],# [3, 4],# [5, 6]])data[0, 1] # 正常索引 2data[1:3] # 正常切片 array([[3, 4], [5, 6]])data[0:2, 0] # 0:2是切片, 0是索引, 切片和索引混用 array([1, 3])data.max() # 6data.min() # 1data.sum() # 21# 也可以指定维度data = np.array([[1, 2], [5, 3], [4, 6]])data.max(axis=0) # array([5, 6])data.max(axis=1) # array([2, 5, 6])# 矩阵之间的运算（需要矩阵尺寸相同）data = np.array([[1, 2], [3, 4]])ones = np.array([[1, 1], [1, 1]])data + ones # array([[2, 3], [4, 5]])# 如果某个矩阵只有一行或者一列, 也可使用广播规则运算data = np.array([[1, 2], [3, 4], [5, 6]])ones_row = np.array([[1, 1]])data + ones_row# array([[2, 3],# [4, 5],# [6, 7]]) 11. 生成随机数python123rng = np.random.default_rng()rng.integers(5, size=(2, 4)) # 两行四列, 随机整数, 小于5rng.random((3, 2)) # 三行两列 0-1之间 float 12. 去重和计数python1234567891011121314a = np.array([11, 11, 12, 13, 14, 15, 16, 17, 12, 13, 11, 14, 18, 19, 20])unique_values = np.unique(a) # 去重 [11 12 13 14 15 16 17 18 19 20]unique_values, indices_list = np.unique(a, return_index=True) # 序号 [ 0 2 3 4 5 6 7 12 13 14]unique_values, occurrence_count = np.unique(a, return_counts=True) # 数量 [3 2 2 2 1 1 1 1 1 1]# 对多维数组也可用a_2d = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [1, 2, 3, 4]])unique_values = np.unique(a_2d) # 去重 [ 1 2 3 4 5 6 7 8 9 10 11 12]unique_rows = np.unique(a_2d, axis=0) # 获得去重的行# [[ 1 2 3 4]# [ 5 6 7 8]# [ 9 10 11 12]]unique_rows, indices, occurrence_count = np.unique(a_2d, axis=0, return_counts=True, return_index=True)indices # 所得行的序号 [0 1 2]occurrence_count # 所得行的数量 [2 1 1] 13. 矩阵转置和变形python12345678910111213141516171819202122data = np.array([1, 2, 3, 4, 5, 6])# 变形data.reshape(2, 3)# array([[1, 2, 3],# [4, 5, 6]])data.reshape(3, 2)# array([[1, 2],# [3, 4],# [5, 6]])# 转置data = data.reshape(2, 3) # 先准备一个 23 矩阵# array([[1, 2, 3],# [4, 5, 6]])data.transpose() # 转置# [[1 4]# [2 5]# [3 6]]# 也可以直接用Tdata.T# [[1 4]# [2 5]# [3 6]] 14. 数组逆序python123456789101112131415161718arr = np.array([1, 2, 3, 4, 5, 6, 7, 8])reversed_arr = np.flip(arr) # [8 7 6 5 4 3 2 1]# 二维数组逆序arr_2d = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])reversed_arr = np.flip(arr_2d)# [[12 11 10 9]# [ 8 7 6 5]# [ 4 3 2 1]]# 针对的维度逆序reversed_arr_rows = np.flip(arr_2d, axis=0)# [[ 9 10 11 12]# [ 5 6 7 8]# [ 1 2 3 4]]# 对切片逆序并赋值arr_2d[:,1] = np.flip(arr_2d[:,1])# [[ 1 10 3 4]# [ 8 7 6 5]# [ 9 2 11 12]] 15. 多维数组展开python123x = np.array([[1 , 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])x.flatten() # 拷贝展开 array([ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])a2 = x.ravel() # 引用展开 array([ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) 16. 内置文档python1234# help(max) 输出说明# max? 同名所有函数说明a = np.array([1, 2, 3, 4, 5, 6])# a? 变量说明 17. 实现数学公式python1234predictions = np.array([1, 2, 3])labels = np.array([1, 1, 1])# 例如均方误差公式error = (1 / 3) * np.sum(np.square(predictions - labels)) 18. np对象导入导出python123456a = np.array([1, 2, 3, 4, 5, 6])# np.save(&#x27;filename&#x27;, a) 存成文件# b = np.load(&#x27;filename.npy&#x27;) 从文件读取# 使用csv格式# np.savetxt(&#x27;new_file.csv&#x27;, a)# np.loadtxt(&#x27;new_file.csv&#x27;) 19. 使用 Pandas 库进行csv导入导出操作python1234567891011121314151617import pandas as pd# # If all of your columns are the same type:# x = pd.read_csv(&#x27;music.csv&#x27;, header=0).values# print(x)# [[&#x27;Billie Holiday&#x27; &#x27;Jazz&#x27; 1300000 27000000]# [&#x27;Jimmie Hendrix&#x27; &#x27;Rock&#x27; 2700000 70000000]# [&#x27;Miles Davis&#x27; &#x27;Jazz&#x27; 1500000 48000000]# [&#x27;SIA&#x27; &#x27;Pop&#x27; 2000000 74000000]]# # You can also simply select the columns you need:# x = pd.read_csv(&#x27;music.csv&#x27;, usecols=[&#x27;Artist&#x27;, &#x27;Plays&#x27;]).values# print(x)# [[&#x27;Billie Holiday&#x27; 27000000]# [&#x27;Jimmie Hendrix&#x27; 70000000]# [&#x27;Miles Davis&#x27; 48000000]# [&#x27;SIA&#x27; 74000000]] 20. 使用 Matplotlib 绘制数据图像python12345678910111213141516171819202122import matplotlib.pyplot as plt# 显示数组a = np.array([2, 1, 5, 7, 4, 6, 8, 14, 10, 9, 18, 20, 22])plt.plot(a)plt.show()# 两种数据x = np.linspace(0, 5, 20)y = np.linspace(0, 10, 20)plt.plot(x, y, &#x27;purple&#x27;) # lineplt.plot(x, y, &#x27;o&#x27;) # dotsplt.show()# 高级使用fig = plt.figure()ax = fig.add_subplot(projection=&#x27;3d&#x27;)X = np.arange(-5, 5, 0.15)Y = np.arange(-5, 5, 0.15)X, Y = np.meshgrid(X, Y)R = np.sqrt(X**2 + Y**2)Z = np.sin(R)ax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap=&#x27;viridis&#x27;)plt.show()","tags":[{"name":"豆知识","slug":"豆知识","permalink":"https://vitsumoc.github.io/tags/%E8%B1%86%E7%9F%A5%E8%AF%86/"},{"name":"笔记","slug":"笔记","permalink":"https://vitsumoc.github.io/tags/%E7%AC%94%E8%AE%B0/"},{"name":"python","slug":"python","permalink":"https://vitsumoc.github.io/tags/python/"},{"name":"库","slug":"库","permalink":"https://vitsumoc.github.io/tags/%E5%BA%93/"}]},{"title":"AI入门笔记（2）——知识表示与专家系统","date":"2023-11-24T07:33:38.000Z","path":"2023/11/24/AiForBeginners-2.html","text":"课程https://github.com/microsoft/AI-For-Beginners/blob/main/lessons/2-Symbolic/README.md 这是微软提供的AI-For-Beginners课程第二课，介绍了过去常见的自顶向下的AI设计方法。 内容通过DIKW金字塔，探讨了 数据、信息、知识、智慧 的含义，传统的人工智能实现方式就是一类尝试将数据组织成知识的方法。 探讨了使用计算机表达知识的几种方式。 专家系统介绍了早期symbolic AI的一种成功实践：专家系统。 将专家系统的实现区分为两种类型：向后推理与向前推理。 后向推理实现专家系统的代码实践：https://github.com/vitsumoc/exercise-AI-Beginner/blob/main/2-Symbolic/animal_Inference.py 本体论和语义网ontology 本体指的是某个概念实体，Semantic Web 语义网指的是对本体的各种规范性描述的集合，简单的有对本体属性的描述，复杂的有对各种逻辑关系的描述。 本体和语义网也是对人类思考方式的归纳和模仿，是一种组织复杂数据形成知识的方式，WikiData 就是这样的一个知识库。 使用语义网实现家谱查询系统的代码实践：https://github.com/vitsumoc/exercise-AI-Beginner/blob/main/2-Symbolic/family_ontology.py 总结学习了Symbolic AI的概念，历史，还通过几个简单例子进行了最简单的了解。 可以感受到曾经计算机行业的先驱者们为了赋予计算机智能，付出了多少辛劳和汗水，也取得了巨大的成果。 However, the important characteristics of knowledge-based systems is that you can always explain exactly how any of the decisions were made.","tags":[{"name":"AI","slug":"AI","permalink":"https://vitsumoc.github.io/tags/AI/"},{"name":"笔记","slug":"笔记","permalink":"https://vitsumoc.github.io/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"AI入门笔记（1）——简介与历史","date":"2023-11-24T01:42:38.000Z","path":"2023/11/24/AiForBeginners-1.html","text":"课程https://github.com/microsoft/AI-For-Beginners/blob/main/lessons/1-Intro/README.md 这是微软提供的AI-For-Beginners课程第一课，对AI的基础概念、定义、发展历史等内容进行了简单的介绍。 内容什么是Weak AI，什么是Strong AI 什么是图灵测试，如何定义Intelligence AI的不同实现路径，过去主要是Symbolic Reasoning，而现在主要使用Neural Networks AI发展的简要历史 近年来AI技术取得的重大进展：图片识别、自然语言识别、翻译等等","tags":[{"name":"AI","slug":"AI","permalink":"https://vitsumoc.github.io/tags/AI/"},{"name":"笔记","slug":"笔记","permalink":"https://vitsumoc.github.io/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"使用SSH包装Socks5代理","date":"2023-11-22T09:38:25.000Z","path":"2023/11/22/SSHInSubSocks.html","text":"subSocks简介subSocks是Luyu Huang制作的纯golang网络代理软件。 这里是作者本人对此项目的介绍文档。 为什么要做SSH包装因为之前使用v2ray总是被封端口，但是VPS上的22端口始终建在，考虑到SSH协议比较复杂，包括了Shell，SFTP等多种应用。我认为使用SSH协议包装流量可以起到一定的伪装作用，减少端口被封的可能性。 subSocks项目的代码结构非常漂亮，添加SSH包装非常便捷。 实现过程首先需要了解subSocks的代码结构，Luyu Huang的文档中描述的非常详细，我只需要实现SSHWarpper和SSHStripper。 golang已经提供了SSH的官方实现，参考文档。并且提供了使用SSH进行远程Shell的示例。 之后需要对SSH的通讯过程，Session Channel Request等等各种概念有基础的了解。 使用ssh包中的代码，在服务端使用TCP链接，创建SSH服务器，等待客户端链接后获取Channel，将Channel包装为Stripper。 客户端与服务端相似，需要使用TCP链接，向服务端完成握手过程，之后可获得Session，将Session包装成Wrapper。 使用服务端必须配置密钥，可使用自己生成的密钥： toml1234567[server] # server configurationprotocol = &quot;ssh&quot;listen = &quot;0.0.0.0:22&quot;ssh.cert = &quot;./id_rsa.pub&quot;ssh.key = &quot;./id_rsa&quot; 客户端只需将协议设置为ssh，其他与subsocks相同: toml123456[client] # client configurationlisten = &quot;127.0.0.1:1080&quot;server.protocol = &quot;ssh&quot;server.address = &quot;serverIP:22&quot; 通过抓包验证，握手过程正常，通讯过程与SSH相同，多条链接使用正常，所有数据均经过加密： 通过观看视频网站验证，视频加载流畅，体验很好。","tags":[{"name":"网络编程","slug":"网络编程","permalink":"https://vitsumoc.github.io/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"},{"name":"SSH","slug":"SSH","permalink":"https://vitsumoc.github.io/tags/SSH/"}]},{"title":"golang与串口设备在项目中的运用","date":"2023-11-22T03:06:28.000Z","path":"2023/11/22/golangSerial.html","text":"需求简述硬件设备使用485Modbus通讯，需使用golang编写采集程序，将数据采集至平台。 方案简述使用串口服务器将485Modbus通讯转为TCPModbus，并将串口服务器设置为TCPserver。 使用golang编写采集器，定期向串口服务器建立TCP链接，采集数据。 技术点与实现点表通过struct实现点位表 这里使用Raw表示原始点表数据，和通讯协议一一对应 后续可将Raw结构封装至更高层的业务结构，用来实现业务数据的表示、嵌套能其他功能 golang1234567type StructMcuRaw struct &#123; Ver [4]uint8 `json:&quot;ver&quot;` // 软件版本[4]char Id uint16 `json:&quot;id&quot;` // 通信箱id TargetAngle uint16 `json:&quot;targetAngle&quot; IEC104:&quot;yc&quot; IEC104Name:&quot;子阵目标角度&quot; IEC104Unit:&quot;°&quot; IEC104Factor:&quot;0.1&quot;` // 对整个子阵设置目标角度 InitSnowDepth uint16 `json:&quot;initSnowDepth&quot; IEC104:&quot;yx&quot; IEC104Name:&quot;标定初始雪深标志&quot;` // 标定初始雪深标志 PrecipitationType uint16 `json:&quot;precipitationType&quot;` // 降水类型&#125; 读取二进制数据通过binary包，可以实现从buffer中读取数据向struct赋值 golang1234567891011121314func (p *StructMcuRaw) MCUFromByte(res *bytes.Buffer) &#123; // 软件版本[4]char for x := 0; x &lt; 4; x++ &#123; binary.Read(res, binary.BigEndian, p.Ver[x]) &#125; // 通信箱id binary.Read(res, binary.BigEndian, &amp;p.Id) // 对整个子阵设置目标角度 binary.Read(res, binary.BigEndian, &amp;p.TargetAngle) // 标定初始雪深标志 binary.Read(res, binary.BigEndian, &amp;p.InitSnowDepth) // 降水类型 binary.Read(res, binary.BigEndian, &amp;p.PrecipitationType)&#125; 封装为query在本项目中，query指对单个设备的采集方法 将数据读取封装成query方法，包括TCP采集过程、日志记录、包格式处理等 golang123456789101112131415161718192021222324252627282930313233343536373839404142434445464748func MCUQuery(conn *net.Conn, reader *bufio.Reader, buffer *[]byte, cb *rs.StructCommBox, mcu *rs.StructMcu) error &#123; // 查询地址 addInt, err := strconv.Atoi(mcu.Addr) if err != nil &#123; return err &#125; // 包编号 tcpSeq := TcpSeq() var query = []byte&#123; uint8(tcpSeq / 0x100), uint8(tcpSeq % 0x100), // 编号 0x00, 0x00, 0x00, 0x06, // 长度 byte(addInt), 0x03, 0x00, 0xa0, 0x00, 0x29&#125; // 指令 (*conn).SetWriteDeadline(time.Now().Add(rs.QUERY_DEFAULT_TIMEOUT)) _, err = (*conn).Write(query) if err != nil &#123; log.Log(true, cb.IpAddr, cb.Port, []byte&#123;&#125;) return err &#125; // 日志 log.Log(true, cb.IpAddr, cb.Port, query) // 接收 (*conn).SetReadDeadline(time.Now().Add(rs.QUERY_DEFAULT_TIMEOUT)) n, err := (*reader).Read(*buffer) if err != nil &#123; log.Log(false, cb.IpAddr, cb.Port, []byte&#123;&#125;) return err &#125; // 日志 log.Log(false, cb.IpAddr, cb.Port, (*buffer)[:n]) // 解析 res := bytes.NewBuffer(*buffer) // TCP头 var tcpHeader rs.StructTCPHeader tcpHeader.TCPHeaderFromByte(res) if tcpHeader.Seq != tcpSeq &#123; return errors.New(&quot;TCP异常&quot;) &#125; if tcpHeader.Len != 85 &#123; return errors.New(&quot;TCP长度异常&quot;) &#125; // modbus头 var mbHeader rs.StructMudbusHeader mbHeader.MudbusHeaderFromByte(res) // mcu内容 mcu.Raw.MCUFromByte(res) mcu.VUpdate = true // 标记更新 return nil&#125; 封装为采集过程最后需要将所有的采集query放置在统一的采集过程中 在一次采集过程中，创建一条TCP链接，完成所有采集动作，最后断开链接 golang1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950func Collect(cb *rs.StructCommBox) &#123; // 记录网络占用 NetCh &lt;- true defer func() &#123; &lt;-NetCh &#125;() // 初始化采集标识 eraseFlag(cb) // 采集结束后更新时标 defer func() &#123; updateTs(cb) &#125;() // 建链 conn, err := net.DialTimeout(&quot;tcp&quot;, cb.IpAddr+&quot;:&quot;+cb.Port, rs.QUERY_DEFAULT_TIMEOUT) if err != nil &#123; log.Log(true, cb.IpAddr, cb.Port, []byte&#123;&#125;) return &#125; cb.VUpdate = true defer conn.Close() // 读写缓存 readBuf := bufio.NewReader(conn) buffer := make([]byte, 256) // 按mcu查询 for x := 0; x &lt; len(cb.Mcus); x++ &#123; // 切换MCU预留时间, 提高成功率 time.Sleep(rs.QUERY_MCU_INTERVAL) // 查mcu信息 mcu := cb.Mcus[x] err = cmd.MCUQuery(&amp;conn, readBuf, &amp;buffer, cb, mcu) if err != nil &#123; return &#125; // 分次查跟踪器信息 for y := 0; y &lt; mcu.TracerNum; &#123; // 切换Tracer预留时间, 提高成功率 time.Sleep(rs.QUERY_TRACER_INTERVAL) // 查询长度 tracerLen := rs.QUERY_TRACER_COUNT if mcu.TracerNum-y &lt; rs.QUERY_TRACER_COUNT &#123; tracerLen = mcu.TracerNum - y &#125; err = cmd.TracerQuery(&amp;conn, readBuf, &amp;buffer, cb, mcu, y, tracerLen) if err != nil &#123; return &#125; y += tracerLen &#125; &#125;&#125; 总结使用golang+串口服务器进行串口通讯，非常的简单、直观，易于开发维护。 在本次项目实践中，由于golang提供了方便的并发编程与控制机制，高负载环境下的性能也得到了充分保障。","tags":[{"name":"网络编程","slug":"网络编程","permalink":"https://vitsumoc.github.io/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"},{"name":"项目实践","slug":"项目实践","permalink":"https://vitsumoc.github.io/tags/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5/"},{"name":"golang","slug":"golang","permalink":"https://vitsumoc.github.io/tags/golang/"},{"name":"串口通讯","slug":"串口通讯","permalink":"https://vitsumoc.github.io/tags/%E4%B8%B2%E5%8F%A3%E9%80%9A%E8%AE%AF/"}]},{"title":"SSH握手过程","date":"2023-11-20T01:20:06.000Z","path":"2023/11/20/SSH.html","text":"RFChttps://datatracker.ietf.org/doc/html/rfc4253 SSH简介安全外壳协议（Secure Shell Protocol，简称SSH）是一种加密的网络传输协议，可在不安全的网络中为网络服务提供安全的传输环境。SSH通过在网络中建立安全隧道来实现SSH客户端与服务器之间的连接。SSH最常见的用途是远程登录系统，人们通常利用SSH来传输命令行界面和远程执行命令。 SSH数据包基本格式SSH的数据包加密后分块传输，每次传输的实际包长度都应为密码块大小的整数倍或8 每个加密后的数据包都由如下结构构成 C12345uint32 packet_length;byte padding_length;byte[n1] payload; // n1 = packet_length - padding_length - 1byte[n2] random_padding; // n2 = padding_lengthbyte[m] mac(Message_Authentication_Code - MAC); // m = mac_length packet_length：数据载荷的长度，不包括mac部分和packet_length本身。在进行加密协商完成后，传输的packet_length也会被加密 padding_length：random_padding块的大小 payload：数据载荷，根绝协商决定被加密或被压缩的方法 random padding： 0-255位随机填充 mac：信息认证码，用作信息完整性校验 SSH过程以下采用一个SSH抓包结果为例，描述SSH链接建立过程： |&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;| |&nbsp;&nbsp;&nbsp;客户端&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;服务端&nbsp;&nbsp;&nbsp;&nbsp;| |&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;| |&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;链接建立&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;| |1. 三次握手1|—————————————————————————————–&gt; &lt;—————————————————————————————-|2. 三次握手2| |3. 三次握手3|—————————————————————————————–&gt; |&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;协议协商&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;| &lt;—————————————————————————————-|4. 服务端协议| |5. 客户端协议|—————————————————————————————–&gt; |&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;算法协商&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;| &lt;————————————————————————————-|6. 服务端算法表| |7. 客户端算法表|————————————————————————————&gt; |&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;密钥交换&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;| |8. Diffie-Hellman Init|——————————————————————————&gt; &lt;————————————————|9. Diffie-Hellman Reply，New Keys，加密包| |10. New Keys|—————————————————————————————-&gt; |&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;加密通讯&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;| 链接建立（1）（2）（3）三次握手报文 TCP三次握手 协议协商（4）服务端协议报文 Hex内容 0x 53 53 48 2d 32 2e 30 2d 4f 70 65 6e 53 53 48 5f 38 2e 30 0d 0a 报文内容 SSH-2.0-OpenSSH_8.0&lt;CR&gt;&lt;LF&gt; 包括SSH、协议版本（2.0）、软件版本（OpenSSH_8.0） （5）客户端协议报文 Hex内容 0x 53 53 48 2d 32 2e 30 2d 6e 73 73 73 68 32 5f 37 2e 30 2e 30 30 33 33 20 4e 65 74 53 61 72 61 6e 67 20 43 6f 6d 70 75 74 65 72 2c 20 49 6e 63 2e 0d 0a 报文内容 SSH-2.0-nsssh2_7.0.0033 NetSarang Computer, Inc.&lt;CR&gt;&lt;LF&gt; 算法协商在算法协商的过程中，双方会各自发送自己支持的算法列表，最终对以下几个算法达成共识： kex_algorithms：密钥交换算法 server_host_key_algorithms：公钥算法 encryption_algorithms：加密算法 mac_algorithms：数据完整性算法 compression_algorithms：压缩算法 languages：语言标签（可选） first_kex_packet_follows：表示是否有猜测数据包 在达成共识的过程中，基本以客户端中的算法排序优先匹配 （6）服务端算法表报文 packet_length：0x00 00 04 14（1044） padding_length：0x05（5） SSH_MSG_SERVICE_ACCEPT：0x14（SSH_MSG_KEXINIT） Cookie：0xd7 86 29 66…(16Byte) kex_algorithms length：下方算法表长度 kex_algorithms list：算法表（字符串表示，逗号分隔） server_host_key_algorithms length：下方算法表长度 server_host_key_algorithms list：算法表（字符串表示，逗号分隔） encryption_algorithms_client_to_server length：下方算法表长度 encryption_algorithms_client_to_server list：算法表（字符串表示，逗号分隔） encryption_algorithms_server_to_client length：下方算法表长度 encryption_algorithms_server_to_client list：算法表（字符串表示，逗号分隔） mac_algorithms_client_to_server length：下方算法表长度 mac_algorithms_client_to_server list：算法表（字符串表示，逗号分隔） mac_algorithms_server_to_client length：下方算法表长度 mac_algorithms_server_to_client list：算法表（字符串表示，逗号分隔） compression_algorithms_client_to_server length：下方算法表长度 compression_algorithms_client_to_server list：算法表（字符串表示，逗号分隔） compression_algorithms_server_to_client length：下方算法表长度 compression_algorithms_server_to_client list：算法表（字符串表示，逗号分隔） languages_client_to_server length：下方算法表长度 languages_client_to_server list：算法表（字符串表示，逗号分隔） languages_server_to_client length：下方算法表长度 languages_server_to_client list：算法表（字符串表示，逗号分隔） first_kex_packet_follows：0x00 Reserved：0x00 00 00 00 Padding：0x00 00 00 00 00（padding_length长度） （7）客户端算法表报文 与服务端算法表格式相同 密钥交换通过双方协商，决定采用Elliptic Curve Diffie-Hellman方式进行密钥交换 （8）客户端Diffie-Hellman Init packet_length：0x00 00 00 2c padding_length：0x06 MSG：0x1e（Elliptic Curve Diffie-Hellman Key Exchange Init） 客户端公钥长度：0x00 00 00 20（32） 客户端公钥：0xd1 d9 b8 6c 84 67 55 0f ca 84 6e 8b 0e 67 25 27 6b 50 ae ed a4 6d dc 0b 73 4c 15 ad e9 f5 51 66 Padding：0x91 f0 e8 0c f4 9b （9）服务端Diffie-Hellman Reply，New Keys，加密包 服务端的回复包含三部分内容，Key Exchange Reply、New Keys、 加密包 其中，Key Exchange Reply包括了密钥交换的结果 packet_length：0x00 00 03 5c padding_length：0x08 MSG：0x1f（Elliptic Curve Diffie-Hellman Key Exchange Reply） Host Key Length：0x00 00 01 97 Host Key Type Length：0x00 00 00 07 Host Key Type：0x73 73 68 2d 72 73 21（ssh-rsa） Multi Precision Integer Length：0x00 00 00 03 RSA public exponent (e)：0x01 00 01 Multi Precision Integer Length：0x00 00 01 81 RSA Modulus (N)：0x00 be 1b 4b 73 9d f8 37 0e 33… ECDH server’s ephemeral public key length：0x00 00 00 20 ECDH server’s ephemeral public key (Q_S)：0x3a 2e 62 f6 ee… KEX H signature length：0x00 00 01 8f KEX H signature ：0x00 00 00 07 73 73 68 2d 72 73 61 00 00 01 80 a0… Padding：0x00 00 00 00 00 00 00 00 New Keys表示密钥交换完成，此后的内容都需要使用新密钥处理 packet_length：0x00 00 00 0c padding_length：0x0a MSG：0x15（SSH_MSG_NEWKEYS） Padding：0x00 00 00 00 00 00 00 00 00 00 后续的数据已经被加密，无法查看内容，推测是与客户端进行登录认证的协商 （10）客户端New Keys 客户端的New Keys包与服务端相同，后续客户端发送数据也都被加密处理","tags":[{"name":"网络编程","slug":"网络编程","permalink":"https://vitsumoc.github.io/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"},{"name":"SSH","slug":"SSH","permalink":"https://vitsumoc.github.io/tags/SSH/"}]},{"title":"在Windows中使用Linux——WSL","date":"2023-11-17T08:36:34.000Z","path":"2023/11/17/WSL.html","text":"https://learn.microsoft.com/zh-cn/windows/wsl/","tags":[{"name":"豆知识","slug":"豆知识","permalink":"https://vitsumoc.github.io/tags/%E8%B1%86%E7%9F%A5%E8%AF%86/"},{"name":"环境配置","slug":"环境配置","permalink":"https://vitsumoc.github.io/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"},{"name":"Linux","slug":"Linux","permalink":"https://vitsumoc.github.io/tags/Linux/"}]}]