<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>[翻译]通过三个步骤简单理解epoll</title>
    <link href="/2023/12/20/translate-epoll-in-3-steps.html"/>
    <url>/2023/12/20/translate-epoll-in-3-steps.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>原文 <a href="https://suchprogramming.com/epoll-in-3-easy-steps/">epoll() Tutorial – epoll() In 3 Easy Steps!</a></p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>就在不久前，能够让一台服务器<a href="http://www.kegel.com/c10k.html">支持10000个并发连接</a>还是一个很了不起的事情。有很多因素让这个行为成为可能，例如 <a href="https://www.nginx.com/">nginx</a>，他可以比他的前辈们更高效的处理更多连接。不过其中最大的因素应该还是大部分操作系统引入了恒定时间的轮询机制<a href="https://robbell.io/2009/06/a-beginners-guide-to-big-o-notation">O1</a>，用来监视系统中的文件描述符。</p><p>在 <a href="https://nostarch.com/">No Starch Press</a> 的书<a href="https://nostarch.com/tlpi">《Linux 编程接口》</a>中，第 63.4.5 节提供了一个表格，描述了通过一些最常见的轮询方法检查不同数量的文件描述符所需的时间。</p><p><img src="/2023/12/20/translate-epoll-in-3-steps/poll-times.png"></p><p>如图所示，在10个文件描述符时，epoll 已经体现出了他的性能优势。随着描述符数量的增加，相比于 <a href="https://man7.org/linux/man-pages/man2/poll.2.html">poll()</a> 或 <a href="https://man7.org/linux/man-pages/man2/select.2.html">select()</a>，这种性能优势体现的越来越大。</p><p>本教程将介绍在 Linux 2.6.27+ 上使用 epoll() 的一些基础知识。</p><h2 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h2><p>本教程假设您熟悉并熟悉 Linux、C 语法以及类 UNIX 系统中文件描述符的使用。</p><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><p>创建一个新文件夹来开始我们的教程， Makefile 如下：</p><figure><div class="code-wrapper"><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token target symbol">all</span><span class="token punctuation">:</span> epoll_example<span class="token target symbol">epoll_example</span><span class="token punctuation">:</span> epoll_example.cgcc -Wall -Werror -o <span class="token variable">$@</span> epoll_example.c<span class="token target symbol">clean</span><span class="token punctuation">:</span><span class="token operator">@</span>rm -v epoll_example<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>在这篇文章中，需要使用这些库：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>epoll_example.c</span></div><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span>     <span class="token comment">// for fprintf()</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span>    <span class="token comment">// for close(), read()</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/epoll.h></span> <span class="token comment">// for epoll_create1(), epoll_ctl(), struct epoll_event</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span>    <span class="token comment">// for strncmp</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="第一步：创建-epoll-文件描述符"><a href="#第一步：创建-epoll-文件描述符" class="headerlink" title="第一步：创建 epoll 文件描述符"></a>第一步：创建 epoll 文件描述符</h1><p>从最基础开始，先尝试创建和关闭 epoll 实例。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>epoll_example.c</span></div><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span>     <span class="token comment">// for fprintf()</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span>    <span class="token comment">// for close()</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/epoll.h></span> <span class="token comment">// for epoll_create1()</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> epoll_fd <span class="token operator">=</span> <span class="token function">epoll_create1</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>epoll_fd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Failed to create epoll file descriptor\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">close</span><span class="token punctuation">(</span>epoll_fd<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Failed to close epoll file descriptor\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>运行这段代码，正常来说应该直接返回并且不产生任何输出，如果你看到了错误消息，那么也许你可能正在运行一个非常旧的 Linux 内核。</p><p>第一个例子是使用 <a href="https://linux.die.net/man/2/epoll_create1">epoll_create1()</a> 创建 <code>epoll</code> 实例，并且获得他的文件描述符。虽然我们没有用这个文件描述符做任何事情，我们仍然要记得在关闭程序之前清理他。就像和其他的 <code>Linux</code> 文件描述符一样，使用 <code>close()</code>。</p><h2 id="电平触发（Level-triggered）和边沿触发（edge-triggered）"><a href="#电平触发（Level-triggered）和边沿触发（edge-triggered）" class="headerlink" title="电平触发（Level triggered）和边沿触发（edge triggered）"></a>电平触发（Level triggered）和边沿触发（edge triggered）</h2><p><a href="https://www.quora.com/What-are-the-key-differences-between-edge-triggered-and-level-triggered-interrupts">电平触发和边沿触发</a> 是从电子工程师那边借来的术语，但当我们使用 <code>epoll</code> 时，我们需要注意这两者的差别。在边沿触发模式下，我们只会在被监控文件描述符的状态变化时接收到事件；而在电平触发模式下，我们会持续接收事件，直到被监控的文件描述符不再处于 ready 状态。一般来说电平触发时默认状态，而且更加容易上手，我们的教程也会使用电平触发。但是我们也需要直到有边沿触发这回事。</p><h1 id="第二步：添加被-epoll-监控的文件描述符"><a href="#第二步：添加被-epoll-监控的文件描述符" class="headerlink" title="第二步：添加被 epoll 监控的文件描述符"></a>第二步：添加被 epoll 监控的文件描述符</h1><p>接下来要做的事情就是，告诉 epoll 需要监控哪些文件描述符，以及需要监控哪种类型的事件。在这个例子里，我会使用Linux中我最爱的文件描述符，亲爱的 <code>file descriptor 0</code>（就是标准输入）。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>epoll_example.c</span></div><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span>     <span class="token comment">// for fprintf()</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span>    <span class="token comment">// for close()</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/epoll.h></span> <span class="token comment">// for epoll_create1(), epoll_ctl(), struct epoll_event</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">struct</span> <span class="token class-name">epoll_event</span> event<span class="token punctuation">;</span><span class="token keyword">int</span> epoll_fd <span class="token operator">=</span> <span class="token function">epoll_create1</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>epoll_fd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Failed to create epoll file descriptor\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>event<span class="token punctuation">.</span>events <span class="token operator">=</span> EPOLLIN<span class="token punctuation">;</span>event<span class="token punctuation">.</span>data<span class="token punctuation">.</span>fd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">epoll_ctl</span><span class="token punctuation">(</span>epoll_fd<span class="token punctuation">,</span> EPOLL_CTL_ADD<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Failed to add file descriptor to epoll\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">close</span><span class="token punctuation">(</span>epoll_fd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">close</span><span class="token punctuation">(</span>epoll_fd<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Failed to close epoll file descriptor\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>这里我们创建了 <code>epoll_event</code> 的实例 <code>event</code>，并使用 <a href="https://linux.die.net/man/2/epoll_ctl">epoll_ctl()</a> 将 <code>fd0</code> 添加到 epoll 的实例 <code>epoll_fd</code> 中。最后一个参数 <code>event</code> 是为了让 epoll 知道我们只想关注输入事件（<code>EPOLLIN</code>），而且还能为事件提供一些我们自定义的数据（本例中 <code>event.data.fd = 0</code>）。</p><h1 id="第三步：完整例子"><a href="#第三步：完整例子" class="headerlink" title="第三步：完整例子"></a>第三步：完整例子</h1><p>现在，让 epoll 发挥他的魔力吧</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>epoll_example.c</span></div><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_EVENTS</span> <span class="token expression"><span class="token number">5</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">READ_SIZE</span> <span class="token expression"><span class="token number">10</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span>     <span class="token comment">// for fprintf()</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span>    <span class="token comment">// for close(), read()</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/epoll.h></span> <span class="token comment">// for epoll_create1(), epoll_ctl(), struct epoll_event</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span>    <span class="token comment">// for strncmp</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 是否运行中、当前并发事件数、计数器</span><span class="token keyword">int</span> running <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> event_count<span class="token punctuation">,</span> i<span class="token punctuation">;</span>  <span class="token comment">// 接收数据长度</span><span class="token class-name">size_t</span> bytes_read<span class="token punctuation">;</span>  <span class="token comment">// 接收输入 buffer</span><span class="token keyword">char</span> read_buffer<span class="token punctuation">[</span>READ_SIZE <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// event 是一个事件结构 events 是事件数组, 最多5个</span><span class="token keyword">struct</span> <span class="token class-name">epoll_event</span> event<span class="token punctuation">,</span> events<span class="token punctuation">[</span>MAX_EVENTS<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// epoll 实例</span><span class="token keyword">int</span> epoll_fd <span class="token operator">=</span> <span class="token function">epoll_create1</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>epoll_fd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Failed to create epoll file descriptor\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  <span class="token comment">// 监听 EPOLLIN</span>event<span class="token punctuation">.</span>events <span class="token operator">=</span> EPOLLIN<span class="token punctuation">;</span><span class="token comment">// 用户数据 fd = 0</span>  event<span class="token punctuation">.</span>data<span class="token punctuation">.</span>fd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// 使用 epoll_ctl 添加监听</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">epoll_ctl</span><span class="token punctuation">(</span>epoll_fd<span class="token punctuation">,</span> EPOLL_CTL_ADD<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Failed to add file descriptor to epoll\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">close</span><span class="token punctuation">(</span>epoll_fd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>running<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 等待输入</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nPolling for input...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// epoll_wait 等待事件发生</span>    <span class="token comment">// 返回值：接收并发事件数</span>    <span class="token comment">// 参数：epoll实例, 事件容器, 并发数, 超时时间</span>event_count <span class="token operator">=</span> <span class="token function">epoll_wait</span><span class="token punctuation">(</span>epoll_fd<span class="token punctuation">,</span> events<span class="token punctuation">,</span> MAX_EVENTS<span class="token punctuation">,</span> <span class="token number">30</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d ready events\n"</span><span class="token punctuation">,</span> event_count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> event_count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Reading file descriptor '%d' -- "</span><span class="token punctuation">,</span> events<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>bytes_read <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>events<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>fd<span class="token punctuation">,</span> read_buffer<span class="token punctuation">,</span> READ_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%zd bytes read.\n"</span><span class="token punctuation">,</span> bytes_read<span class="token punctuation">)</span><span class="token punctuation">;</span>read_buffer<span class="token punctuation">[</span>bytes_read<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Read '%s'"</span><span class="token punctuation">,</span> read_buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 输入为 stop 时结束</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strncmp</span><span class="token punctuation">(</span>read_buffer<span class="token punctuation">,</span> <span class="token string">"stop\n"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>running <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">close</span><span class="token punctuation">(</span>epoll_fd<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Failed to close epoll file descriptor\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>我们添加了一些变量，用来支撑这个例子，同时使用了一个循环，持续读取标准输入直到读取内容为 <code>stop</code>。我们使用 <a href="">epoll_wait()</a> 来等待事件的发生，每个发生的事件都会被存储在 <code>events</code> 中，最大支持 <code>MAX_EVENTS</code> 个事件，并将超时事件设置为30秒。<code>epoll_wait()</code> 返回了本次触发了多少事件，然后我们只是在一个循环中打印这些事件而已。</p><h1 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h1><p>接下来是一些使用示例：</p><figure><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><div class="caption"><span>example</span></div><code class="language-text">:~/epoll_example$ ./epoll_examplePolling for input...hello1 ready eventsReading file descriptor '0' -- 6 bytes read.Read 'hello'Polling for input...to looooooooooooong1 ready eventsReading file descriptor '0' -- 10 bytes read.Read 'to loooooo'Polling for input...1 ready eventsReading file descriptor '0' -- 10 bytes read.Read 'ooooooong'Polling for input...stop1 ready eventsReading file descriptor '0' -- 5 bytes read.Read 'stop'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>可以看到，第一次我们输入 <code>hello</code>，程序正确输出而且继续循环。</p><p>第二次当我们输入一个超过长度限制的输入 <code>to looooooooooooong</code> 时，电平触发机制帮助了我们。因为输入缓冲区一直有值，所以我们的事件就一直触发，直到读取完毕。在这种情况下，如果我们使用的是边沿触发，那么我们就只能收到一次通知，直到下次再有内容写入输入缓冲区时才会执行下一次事件了。</p><p>希望这篇文档能够帮助你使用 <code>epoll()</code>！</p>]]></content>
    
    
    <categories>
      
      <category>网络编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络编程</tag>
      
      <tag>翻译</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[翻译]Sol - 从零开始的MQTT broker - 第二部分：网络</title>
    <link href="/2023/12/19/translate-sol-2.html"/>
    <url>/2023/12/19/translate-sol-2.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>原文 <a href="https://codepr.github.io/posts/sol-mqtt-broker-p2/">Sol - An MQTT broker from scratch. Part 2 - Networking</a></p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>让我们继续之前的工作，在第一部分中我们实现了 MQTT v3.1.1 的数据结构和解码函数，接下来我们需要做一些组包和编码函数，让我们可以发送网络包。</p><span id="more"></span><p>顺带说明一下，我们并没有打算去编写完美的或者内存效率很高的代码，而且，过早的优化是万恶之源，以后我们有的是时间来提高我们的代码质量。</p><h1 id="组包实现"><a href="#组包实现" class="headerlink" title="组包实现"></a>组包实现</h1><p>暂时我们只需要做 <code>CONNACK</code> <code>SUBACK</code> <code>PUBLISH</code> 包的组包工作，其他的各种 <code>ACK</code> 的结构都是一样的，之前我们已经用 <strong>typedef</strong> 让这些 <code>ACK</code> 引用了同一个函数。</p><ul><li><p><code>union mqtt_header *mqtt_packet_header(unsigned char)</code> 函数用来处理 Fixed Header，以及以下这些只有 Fixed Header 的包：</p><ul><li>PINGREQ</li><li>PINGRESP</li><li>DISCONNECT</li></ul></li><li><p><code>struct mqtt_ack *mqtt_packet_ack(unsigned char, unsigned short)</code> 用来处理以下这些 <code>类ACK</code> 的包：</p><ul><li>PUBACK</li><li>PUBREC</li><li>PUBREL</li><li>PUBCOMP</li><li>UNSUBACK</li></ul></li></ul><p>其余的包都需要专门的函数来组包。再说一次，虽然可能有很多更优雅的代码或者更优化的方法，但是现在我们只要写能用的代码就行了，以后迟早会优化的。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>mqtt.c</span></div><code class="language-c"><span class="token comment">/* * mqtt组包 */</span><span class="token comment">// 头部1byte的组包实现</span><span class="token keyword">union</span> mqtt_header <span class="token operator">*</span><span class="token function">mqtt_packet_header</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> byte<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">union</span> mqtt_header header<span class="token punctuation">;</span>    header<span class="token punctuation">.</span>byte <span class="token operator">=</span> byte<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>header<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 各种ACK的组包实现</span><span class="token keyword">struct</span> <span class="token class-name">mqtt_ack</span> <span class="token operator">*</span><span class="token function">mqtt_packet_ack</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> byte<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> pkt_id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">mqtt_ack</span> ack<span class="token punctuation">;</span>    ack<span class="token punctuation">.</span>header<span class="token punctuation">.</span>byte <span class="token operator">=</span> byte<span class="token punctuation">;</span>    ack<span class="token punctuation">.</span>pkt_id <span class="token operator">=</span> pkt_id<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>ack<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// CONNACK 组包实现</span><span class="token keyword">struct</span> <span class="token class-name">mqtt_connack</span> <span class="token operator">*</span><span class="token function">mqtt_packet_connack</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> byte<span class="token punctuation">,</span>                                         <span class="token keyword">unsigned</span> <span class="token keyword">char</span> cflags<span class="token punctuation">,</span>                                         <span class="token keyword">unsigned</span> <span class="token keyword">char</span> rc<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">mqtt_connack</span> connack<span class="token punctuation">;</span>    connack<span class="token punctuation">.</span>header<span class="token punctuation">.</span>byte <span class="token operator">=</span> byte<span class="token punctuation">;</span>    connack<span class="token punctuation">.</span>byte <span class="token operator">=</span> cflags<span class="token punctuation">;</span>    connack<span class="token punctuation">.</span>rc <span class="token operator">=</span> rc<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>connack<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// SUBACK 组包实现</span><span class="token keyword">struct</span> <span class="token class-name">mqtt_suback</span> <span class="token operator">*</span><span class="token function">mqtt_packet_suback</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> byte<span class="token punctuation">,</span>                                       <span class="token keyword">unsigned</span> <span class="token keyword">short</span> pkt_id<span class="token punctuation">,</span>                                       <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>rcs<span class="token punctuation">,</span>                                       <span class="token keyword">unsigned</span> <span class="token keyword">short</span> rcslen<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">mqtt_suback</span> <span class="token operator">*</span>suback <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>suback<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    suback<span class="token operator">-></span>header<span class="token punctuation">.</span>byte <span class="token operator">=</span> byte<span class="token punctuation">;</span>    suback<span class="token operator">-></span>pkt_id <span class="token operator">=</span> pkt_id<span class="token punctuation">;</span>    suback<span class="token operator">-></span>rcslen <span class="token operator">=</span> rcslen<span class="token punctuation">;</span>    suback<span class="token operator">-></span>rcs <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>rcslen<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>suback<span class="token operator">-></span>rcs<span class="token punctuation">,</span> rcs<span class="token punctuation">,</span> rcslen<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> suback<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// PUBLISH 组包实现</span><span class="token keyword">struct</span> <span class="token class-name">mqtt_publish</span> <span class="token operator">*</span><span class="token function">mqtt_packet_publish</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> byte<span class="token punctuation">,</span>                                         <span class="token keyword">unsigned</span> <span class="token keyword">short</span> pkt_id<span class="token punctuation">,</span>                                         <span class="token class-name">size_t</span> topiclen<span class="token punctuation">,</span>                                         <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>topic<span class="token punctuation">,</span>                                         <span class="token class-name">size_t</span> payloadlen<span class="token punctuation">,</span>                                         <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>payload<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">mqtt_publish</span> <span class="token operator">*</span>publish <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>publish<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    publish<span class="token operator">-></span>header<span class="token punctuation">.</span>byte <span class="token operator">=</span> byte<span class="token punctuation">;</span>    publish<span class="token operator">-></span>pkt_id <span class="token operator">=</span> pkt_id<span class="token punctuation">;</span>    publish<span class="token operator">-></span>topiclen <span class="token operator">=</span> topiclen<span class="token punctuation">;</span>    publish<span class="token operator">-></span>topic <span class="token operator">=</span> topic<span class="token punctuation">;</span>    publish<span class="token operator">-></span>payloadlen <span class="token operator">=</span> payloadlen<span class="token punctuation">;</span>    publish<span class="token operator">-></span>payload <span class="token operator">=</span> payload<span class="token punctuation">;</span>    <span class="token keyword">return</span> publish<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 释放包资源</span><span class="token keyword">void</span> <span class="token function">mqtt_packet_release</span><span class="token punctuation">(</span><span class="token keyword">union</span> mqtt_packet <span class="token operator">*</span>pkt<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> CONNECT<span class="token operator">:</span>            <span class="token function">free</span><span class="token punctuation">(</span>pkt<span class="token operator">-></span>connect<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>client_id<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>pkt<span class="token operator">-></span>connect<span class="token punctuation">.</span>bits<span class="token punctuation">.</span>username <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token function">free</span><span class="token punctuation">(</span>pkt<span class="token operator">-></span>connect<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>pkt<span class="token operator">-></span>connect<span class="token punctuation">.</span>bits<span class="token punctuation">.</span>password <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token function">free</span><span class="token punctuation">(</span>pkt<span class="token operator">-></span>connect<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>pkt<span class="token operator">-></span>connect<span class="token punctuation">.</span>bits<span class="token punctuation">.</span>will <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">free</span><span class="token punctuation">(</span>pkt<span class="token operator">-></span>connect<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>will_message<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">free</span><span class="token punctuation">(</span>pkt<span class="token operator">-></span>connect<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>will_topic<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> SUBSCRIBE<span class="token operator">:</span>        <span class="token keyword">case</span> UNSUBSCRIBE<span class="token operator">:</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pkt<span class="token operator">-></span>subscribe<span class="token punctuation">.</span>tuples_len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token function">free</span><span class="token punctuation">(</span>pkt<span class="token operator">-></span>subscribe<span class="token punctuation">.</span>tuples<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>topic<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">free</span><span class="token punctuation">(</span>pkt<span class="token operator">-></span>subscribe<span class="token punctuation">.</span>tuples<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> SUBACK<span class="token operator">:</span>            <span class="token function">free</span><span class="token punctuation">(</span>pkt<span class="token operator">-></span>suback<span class="token punctuation">.</span>rcs<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> PUBLISH<span class="token operator">:</span>            <span class="token function">free</span><span class="token punctuation">(</span>pkt<span class="token operator">-></span>publish<span class="token punctuation">.</span>topic<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">free</span><span class="token punctuation">(</span>pkt<span class="token operator">-></span>publish<span class="token punctuation">.</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="编码实现"><a href="#编码实现" class="headerlink" title="编码实现"></a>编码实现</h1><p>我们接下来处理编码函数，编码函数其实就是解码函数的反方向操作：我们使用内存对象创造一个字节流，之后可以通过socket发出去。</p><p>现在我们有一些函数返回指向 <code>static struct</code> 的指针（例如上方代码中的 <code>mqtt_packet_header</code> ），在单线程的情况下这是没什么问题的。 <strong>在多线程环境下，一定会出问题</strong>，每次这种函数的返回都会指向同一片内存区域，可能导致各种冲突。因此为了将来的改进，需要重构这些部分，使用 <code>malloc</code> 来为每次返回分配地址。</p><p>我们采用和之前解码函数一样的方式来映射编码函数。做一个静态数组，其中的序号恰好等于包类型。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>src/mqtt.c</span></div><code class="language-c"><span class="token comment">// MQTT 编码函数接口</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">mqtt_pack_handler</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">union</span> mqtt_packet <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 编码函数数组, 其中索引和包类型id对应</span><span class="token keyword">static</span> mqtt_pack_handler <span class="token operator">*</span>pack_handlers<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token constant">NULL</span><span class="token punctuation">,</span>    <span class="token constant">NULL</span><span class="token punctuation">,</span>    pack_mqtt_connack<span class="token punctuation">,</span>    pack_mqtt_publish<span class="token punctuation">,</span>    pack_mqtt_ack<span class="token punctuation">,</span>    pack_mqtt_ack<span class="token punctuation">,</span>    pack_mqtt_ack<span class="token punctuation">,</span>    pack_mqtt_ack<span class="token punctuation">,</span>    <span class="token constant">NULL</span><span class="token punctuation">,</span>    pack_mqtt_suback<span class="token punctuation">,</span>    <span class="token constant">NULL</span><span class="token punctuation">,</span>    pack_mqtt_ack<span class="token punctuation">,</span>    <span class="token constant">NULL</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// header 的编码实现</span><span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">pack_mqtt_header</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">union</span> mqtt_header <span class="token operator">*</span>hdr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>packed <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>MQTT_HEADER_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>ptr <span class="token operator">=</span> packed<span class="token punctuation">;</span>    <span class="token function">pack_u8</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ptr<span class="token punctuation">,</span> hdr<span class="token operator">-></span>byte<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Remaining Length 1byte 值为0</span>    <span class="token function">mqtt_encode_length</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> packed<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// ACK 的编码实现</span><span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">pack_mqtt_ack</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">union</span> mqtt_packet <span class="token operator">*</span>pkt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>packed <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>MQTT_ACK_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4byte</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>ptr <span class="token operator">=</span> packed<span class="token punctuation">;</span>    <span class="token function">pack_u8</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ptr<span class="token punctuation">,</span> pkt<span class="token operator">-></span>ack<span class="token punctuation">.</span>header<span class="token punctuation">.</span>byte<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mqtt_encode_length</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> MQTT_HEADER_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这里指还有2byte 内容是 pkt_id</span>    ptr<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 因为 mqtt_encode_length 不会移动指针, 只会返回 Remaining Length 的长度, 而这里长度显然为1</span>    <span class="token function">pack_u16</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ptr<span class="token punctuation">,</span> pkt<span class="token operator">-></span>ack<span class="token punctuation">.</span>pkt_id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> packed<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// CONNACK 的编码实现</span><span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">pack_mqtt_connack</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">union</span> mqtt_packet <span class="token operator">*</span>pkt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>packed <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>MQTT_ACK_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>ptr <span class="token operator">=</span> packed<span class="token punctuation">;</span>    <span class="token function">pack_u8</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ptr<span class="token punctuation">,</span> pkt<span class="token operator">-></span>connack<span class="token punctuation">.</span>header<span class="token punctuation">.</span>byte<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mqtt_encode_length</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> MQTT_HEADER_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>    ptr<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token function">pack_u8</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ptr<span class="token punctuation">,</span> pkt<span class="token operator">-></span>connack<span class="token punctuation">.</span>byte<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pack_u8</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ptr<span class="token punctuation">,</span> pkt<span class="token operator">-></span>connack<span class="token punctuation">.</span>rc<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> packed<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// SUBACK 的编码实现</span><span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">pack_mqtt_suback</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">union</span> mqtt_packet <span class="token operator">*</span>pkt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 计算总长度</span>    <span class="token class-name">size_t</span> pktlen <span class="token operator">=</span> MQTT_HEADER_LEN <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span><span class="token punctuation">)</span> <span class="token operator">+</span> pkt<span class="token operator">-></span>suback<span class="token punctuation">.</span>rcslen<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>packed <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>pktlen <span class="token operator">+</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>ptr <span class="token operator">=</span> packed<span class="token punctuation">;</span>    <span class="token comment">// 编码固定头</span>    <span class="token function">pack_u8</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ptr<span class="token punctuation">,</span> pkt<span class="token operator">-></span>suback<span class="token punctuation">.</span>header<span class="token punctuation">.</span>byte<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 剩余部分的长度</span>    <span class="token class-name">size_t</span> len <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span><span class="token punctuation">)</span> <span class="token operator">+</span> pkt<span class="token operator">-></span>suback<span class="token punctuation">.</span>rcslen<span class="token punctuation">;</span>    <span class="token comment">// 变长表示剩余部分长度</span>    <span class="token keyword">int</span> step <span class="token operator">=</span> <span class="token function">mqtt_encode_length</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 指针后移</span>    ptr <span class="token operator">+=</span> step<span class="token punctuation">;</span>    <span class="token comment">// 剩余部分编码</span>    <span class="token function">pack_u16</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ptr<span class="token punctuation">,</span> pkt<span class="token operator">-></span>suback<span class="token punctuation">.</span>pkt_id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pkt<span class="token operator">-></span>suback<span class="token punctuation">.</span>rcslen<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">pack_u8</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ptr<span class="token punctuation">,</span> pkt<span class="token operator">-></span>suback<span class="token punctuation">.</span>rcs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> packed<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// PUBLISH 的编码实现</span><span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">pack_mqtt_publish</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">union</span> mqtt_packet <span class="token operator">*</span>pkt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// pktlen 至少有这么多: 头部至少2byte(1byte头 + 至少1byte的Remaining Length)</span>    <span class="token comment">// sizeof(uint16_t) 表示 topiclen 的长度, 因为 payloadlen 是不被编码到字节流中的</span>    <span class="token comment">// topiclen 和 payloadlen 的内容</span>    <span class="token class-name">size_t</span> pktlen <span class="token operator">=</span> MQTT_HEADER_LEN <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span><span class="token punctuation">)</span> <span class="token operator">+</span>        pkt<span class="token operator">-></span>publish<span class="token punctuation">.</span>topiclen <span class="token operator">+</span> pkt<span class="token operator">-></span>publish<span class="token punctuation">.</span>payloadlen<span class="token punctuation">;</span>    <span class="token comment">// 这里是去除 fixed header 之外的内容长度</span>    <span class="token class-name">size_t</span> len <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span>    <span class="token comment">// qos > 0, 说明有pkt_id, 需要 +2byte</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pkt<span class="token operator">-></span>header<span class="token punctuation">.</span>bits<span class="token punctuation">.</span>qos <span class="token operator">></span> AT_MOST_ONCE<span class="token punctuation">)</span>        pktlen <span class="token operator">+=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 这里是通过剩余长度计算变长部分还需要的长度, 前面已经预留了1byte</span>    <span class="token keyword">int</span> remaininglen_offset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>pktlen <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0x200000</span><span class="token punctuation">)</span>        remaininglen_offset <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>pktlen <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0x4000</span><span class="token punctuation">)</span>        remaininglen_offset <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>pktlen <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0x80</span><span class="token punctuation">)</span>        remaininglen_offset <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">// 这里是总包长</span>    pktlen <span class="token operator">+=</span> remaininglen_offset<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>packed <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>pktlen<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>ptr <span class="token operator">=</span> packed<span class="token punctuation">;</span>    <span class="token function">pack_u8</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ptr<span class="token punctuation">,</span> pkt<span class="token operator">-></span>publish<span class="token punctuation">.</span>header<span class="token punctuation">.</span>byte<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 除去 fixed header 之外剩余部分的长度</span>    len <span class="token operator">+=</span> <span class="token punctuation">(</span>pktlen <span class="token operator">-</span> MQTT_HEADER_LEN <span class="token operator">-</span> remaininglen_offset<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 编码 Remaining Length</span>    <span class="token keyword">int</span> step <span class="token operator">=</span> <span class="token function">mqtt_encode_length</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>    ptr <span class="token operator">+=</span> step<span class="token punctuation">;</span>    <span class="token comment">// 编码 topiclen 和后续的 topic 内容</span>    <span class="token function">pack_u16</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ptr<span class="token punctuation">,</span> pkt<span class="token operator">-></span>publish<span class="token punctuation">.</span>topiclen<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pack_bytes</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ptr<span class="token punctuation">,</span> pkt<span class="token operator">-></span>publish<span class="token punctuation">.</span>topic<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 当 QoS > 0 时, 编码 pkt_id</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pkt<span class="token operator">-></span>header<span class="token punctuation">.</span>bits<span class="token punctuation">.</span>qos <span class="token operator">></span> AT_MOST_ONCE<span class="token punctuation">)</span>        <span class="token function">pack_u16</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ptr<span class="token punctuation">,</span> pkt<span class="token operator">-></span>publish<span class="token punctuation">.</span>pkt_id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 编码 payload 的内容</span>    <span class="token function">pack_bytes</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ptr<span class="token punctuation">,</span> pkt<span class="token operator">-></span>publish<span class="token punctuation">.</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> packed<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 编码函数入口</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">pack_mqtt_packet</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">union</span> mqtt_packet <span class="token operator">*</span>pkt<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> PINGREQ <span class="token operator">||</span> type <span class="token operator">==</span> PINGRESP<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">pack_mqtt_header</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pkt<span class="token operator">-></span>header<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> pack_handlers<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">(</span>pkt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="socket-封装"><a href="#socket-封装" class="headerlink" title="socket 封装"></a>socket 封装</h1><p>我们计划创建一个单线程 TCP 服务器，使用 <strong>epoll</strong> 接口实现多路 I&#x2F;O。Epoll 是继 <strong>select</strong> 和 <strong>poll</strong> 之后内核 2.5.44 添加的最新的多路复用机制，也是性能最高、连接数最多的多路复用机制，它在 BSD 和 BSD-like (Mac OSX) 系统中的对应机制是 <strong>kqueue</strong>。</p><p>我们需要定义一些函数来管理我们的socket descriptor。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>src/network.h</span></div><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"util.h"</span></span><span class="token comment">// 地址族</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">UNIX</span>    <span class="token expression"><span class="token number">0</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INET</span>    <span class="token expression"><span class="token number">1</span></span></span><span class="token comment">// 设置为 non-blocking 模式</span><span class="token keyword">int</span> <span class="token function">set_nonblocking</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 将 TCP_NODELAY 设置为 true, 用来关闭 Nagle's algorithm, 关闭收包时的缓冲等待</span><span class="token keyword">int</span> <span class="token function">set_tcp_nodelay</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建 socket 服务的辅助函数</span><span class="token keyword">int</span> <span class="token function">create_and_bind</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建一个 non-blocking socket 并监听指定的地址和端口</span><span class="token keyword">int</span> <span class="token function">make_listen</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 接收链接并进行后续处理, 将链接分配到 epollfd</span><span class="token keyword">int</span> <span class="token function">accept_connection</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>我们定义了一些简单的辅助函数，用来创建和绑定 <code>socket</code> 端口，处理新链接并把 <code>socket</code> 设置为 <code>non-blocking</code> 模式（这样才能发挥 <strong>epoll</strong> 的复用能力）。</p><p>我不喜欢必须处理每个进出服务器的字节，在我写的涉及到TCP通信的程序中，我都会定义这两个函数：</p><ul><li><code>ssize_t send_bytes(int, const unsigned char *, size_t)</code> 用于在while循环中持续发送数据，直到把数据全部发送完。正确捕获 <code>EAGAIN</code> 或 <code>EWOUDLBLOCK</code> 异常。</li><li><code>ssize_t recv_bytes(int, unsigned char *, size_t)</code> 在while循环中获得任意长度的数据。正确捕获 <code>EAGAIN</code> 或 <code>EWOUDLBLOCK</code> 异常。</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>src/network.h</span></div><code class="language-c"><span class="token comment">// I/O 管理函数</span><span class="token comment">// 在循环中发出所有数据, 避免内核buffer可用性造成的中断(EAGAIN EWOUDLBLOCK)</span><span class="token class-name">ssize_t</span> <span class="token function">send_bytes</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token class-name">size_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 从 fd 中读取指定长度的数据进入 buffer</span><span class="token class-name">ssize_t</span> <span class="token function">recv_bytes</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token class-name">size_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="socket-封装实现"><a href="#socket-封装实现" class="headerlink" title="socket 封装实现"></a>socket 封装实现</h2><p>接下来是 <code>network.c</code> 的实现。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>src/network.c</span></div><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_DEFAULT_SOURCE</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;errno.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;netdb.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/un.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/epoll.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/timerfd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;netinet/in.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;netinet/tcp.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/eventfd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"network.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"config.h"</span></span><span class="token comment">// 设置 non-blocking socket</span><span class="token keyword">int</span> <span class="token function">set_nonblocking</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> flags<span class="token punctuation">,</span> result<span class="token punctuation">;</span>    flags <span class="token operator">=</span> <span class="token function">fcntl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> F_GETFL<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>flags <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">goto</span> err<span class="token punctuation">;</span>    result <span class="token operator">=</span> <span class="token function">fcntl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> F_SETFL<span class="token punctuation">,</span> flags <span class="token operator">|</span> O_NONBLOCK<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">goto</span> err<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>err<span class="token operator">:</span>    <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"set_nonblocking"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 设置 TCP_NODELAY 用以关闭 Nagle's algorithm</span><span class="token keyword">int</span> <span class="token function">set_tcp_nodelay</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">setsockopt</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> IPPROTO_TCP<span class="token punctuation">,</span> TCP_NODELAY<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// UNIX socket 的绑定方法</span><span class="token comment">// return fd</span><span class="token comment">// sockpath 文件路径</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">create_and_bind_unix</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>sockpath<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_un</span> addr<span class="token punctuation">;</span>    <span class="token keyword">int</span> fd<span class="token punctuation">;</span>    <span class="token comment">// 创建 socket</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_UNIX<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"socket error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// addr初始值全0</span>    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>addr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 赋值</span>    addr<span class="token punctuation">.</span>sun_family <span class="token operator">=</span> AF_UNIX<span class="token punctuation">;</span>    <span class="token function">strncpy</span><span class="token punctuation">(</span>addr<span class="token punctuation">.</span>sun_path<span class="token punctuation">,</span> sockpath<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>addr<span class="token punctuation">.</span>sun_path<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 译者没有明白为何 unlink 会出现在此处</span>    <span class="token function">unlink</span><span class="token punctuation">(</span>sockpath<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 绑定 socket</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">bind</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>addr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"bind error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> fd<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// TCP socket 的绑定方法</span><span class="token comment">// return fd</span><span class="token comment">// host TCP 地址</span><span class="token comment">// port TCP 端口</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">create_and_bind_tcp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>host<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>port<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">addrinfo</span> hints <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">.</span>ai_family <span class="token operator">=</span> AF_UNSPEC<span class="token punctuation">,</span>       <span class="token comment">// 不指定协议族, 系统自定可以是IP4 或 IP6</span>        <span class="token punctuation">.</span>ai_socktype <span class="token operator">=</span> SOCK_STREAM<span class="token punctuation">,</span>   <span class="token comment">// 面向流, 就是TCP</span>        <span class="token punctuation">.</span>ai_flags <span class="token operator">=</span> AI_PASSIVE        <span class="token comment">// 被动模式, 可以监听任意地址端口</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// result 是 getaddrinfo 提供的 addrinfo, rp 指如果绑定不成功, 可以变成下一个 addrinfo</span>    <span class="token keyword">struct</span> <span class="token class-name">addrinfo</span> <span class="token operator">*</span>result<span class="token punctuation">,</span> <span class="token operator">*</span>rp<span class="token punctuation">;</span>    <span class="token keyword">int</span> sfd<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getaddrinfo</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">,</span> <span class="token operator">&amp;</span>hints<span class="token punctuation">,</span> <span class="token operator">&amp;</span>result<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"getaddrinfo error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>rp <span class="token operator">=</span> result<span class="token punctuation">;</span> rp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> rp <span class="token operator">=</span> rp<span class="token operator">-></span>ai_next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 先使用 rp 生成 socket</span>        sfd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>rp<span class="token operator">-></span>ai_family<span class="token punctuation">,</span> rp<span class="token operator">-></span>ai_socktype<span class="token punctuation">,</span> rp<span class="token operator">-></span>ai_protocol<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 如果失败就下一个 rp</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sfd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token comment">// 设置 SO_REUSEADDR 这样关闭进程后可以重用端口</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">setsockopt</span><span class="token punctuation">(</span>sfd<span class="token punctuation">,</span> SOL_SOCKET<span class="token punctuation">,</span> SO_REUSEADDR<span class="token punctuation">,</span>                       <span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"SO_REUSEADDR"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">bind</span><span class="token punctuation">(</span>sfd<span class="token punctuation">,</span> rp<span class="token operator">-></span>ai_addr<span class="token punctuation">,</span> rp<span class="token operator">-></span>ai_addrlen<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// bind 成功</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 绑定失败记得关闭 socket</span>        <span class="token function">close</span><span class="token punctuation">(</span>sfd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>rp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"Could not bind"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">freeaddrinfo</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> sfd<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 绑定入口</span><span class="token keyword">int</span> <span class="token function">create_and_bind</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>host<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>port<span class="token punctuation">,</span> <span class="token keyword">int</span> socket_family<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> fd<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>socket_family <span class="token operator">==</span> UNIX<span class="token punctuation">)</span>        fd <span class="token operator">=</span> <span class="token function">create_and_bind_unix</span><span class="token punctuation">(</span>host<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        fd <span class="token operator">=</span> <span class="token function">create_and_bind_tcp</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> fd<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 创建一个 non-blocking socket, 监听指定的地址端口</span><span class="token comment">// return server file descriptor</span><span class="token comment">// host 地址或UNIX path</span><span class="token comment">// port 端口</span><span class="token comment">// socket_family 地址族 AF_UNIX 或 AF_INET</span><span class="token keyword">int</span> <span class="token function">make_listen</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>host<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>port<span class="token punctuation">,</span> <span class="token keyword">int</span> socket_family<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> sfd<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sfd <span class="token operator">=</span> <span class="token function">create_and_bind</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">,</span> socket_family<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">set_nonblocking</span><span class="token punctuation">(</span>sfd<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 仅当 TCP链接时设置 TCP_NODELAY</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>socket_family <span class="token operator">==</span> INET<span class="token punctuation">)</span>        <span class="token function">set_tcp_nodelay</span><span class="token punctuation">(</span>sfd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// conf是本程序的配置文件</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">listen</span><span class="token punctuation">(</span>sfd<span class="token punctuation">,</span> conf<span class="token operator">-></span>tcp_backlog<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"listen"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> sfd<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 接收链接后的处理</span><span class="token comment">// return 客户端 fd</span><span class="token comment">// serversock 服务端fd</span><span class="token keyword">int</span> <span class="token function">accept_connection</span><span class="token punctuation">(</span><span class="token keyword">int</span> serversock<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> clientsock<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> addr<span class="token punctuation">;</span>    <span class="token class-name">socklen_t</span> addrlen <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>clientsock <span class="token operator">=</span> <span class="token function">accept</span><span class="token punctuation">(</span>serversock<span class="token punctuation">,</span>                             <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>addr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>addrlen<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">set_nonblocking</span><span class="token punctuation">(</span>clientsock<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 仅当 TCP链接时设置 TCP_NODELAY</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>conf<span class="token operator">-></span>socket_family <span class="token operator">==</span> INET<span class="token punctuation">)</span>        <span class="token function">set_tcp_nodelay</span><span class="token punctuation">(</span>clientsock<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> ip_buff<span class="token punctuation">[</span>INET_ADDRSTRLEN <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 将ip地址转为文本, 这里用作检查客户端地址</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">inet_ntop</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> <span class="token operator">&amp;</span>addr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">,</span>                  ip_buff<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ip_buff<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">close</span><span class="token punctuation">(</span>clientsock<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> clientsock<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 向 fd 发送指定长度的数据</span><span class="token comment">// return 成功发送的数据长度</span><span class="token comment">// fd 发送数据的目的</span><span class="token comment">// buf 发送数据内容地址</span><span class="token comment">// len 需要发送的数据长度</span><span class="token class-name">ssize_t</span> <span class="token function">send_bytes</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 发送数据的总长度</span>    <span class="token class-name">size_t</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 剩余需要发送数据的长度</span>    <span class="token class-name">size_t</span> bytesleft <span class="token operator">=</span> len<span class="token punctuation">;</span>    <span class="token comment">// 单次发送数据长度</span>    <span class="token class-name">ssize_t</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>total <span class="token operator">&lt;</span> len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 发送 bytesleft 长度的数据</span>        n <span class="token operator">=</span> <span class="token function">send</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buf <span class="token operator">+</span> total<span class="token punctuation">,</span> bytesleft<span class="token punctuation">,</span> MSG_NOSIGNAL<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 当 fd 被阻塞时, 直接返回已经发送的长度</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">==</span> EAGAIN <span class="token operator">||</span> errno <span class="token operator">==</span> EWOULDBLOCK<span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                <span class="token keyword">goto</span> err<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        total <span class="token operator">+=</span> n<span class="token punctuation">;</span>        bytesleft <span class="token operator">-=</span> n<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> total<span class="token punctuation">;</span>err<span class="token operator">:</span>    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"send(2) - error sending data: %s"</span><span class="token punctuation">,</span> <span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 从 fd 中获得指定长度的数据</span><span class="token comment">// retrun 成功读取的长度 -1 表示异常</span><span class="token comment">// fd 数据源</span><span class="token comment">// buf 存放结果的指针</span><span class="token comment">// bufsize 期望读取的数据长度</span><span class="token class-name">ssize_t</span> <span class="token function">recv_bytes</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> bufsize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 单次获取的数据长度</span>    <span class="token class-name">ssize_t</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 获取的总数据长度</span>    <span class="token class-name">ssize_t</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>total <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token class-name">ssize_t</span><span class="token punctuation">)</span> bufsize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 使用 recv 函数获得最大 bufsize - total 的数据</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token function">recv</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> bufsize <span class="token operator">-</span> total<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// fd被阻塞了, 此时total的返回也许是小于 bufsize 的值, 调用者可以选择重试</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">==</span> EAGAIN <span class="token operator">||</span> errno <span class="token operator">==</span> EWOULDBLOCK<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span>                <span class="token comment">// 对于其他的异常则报错</span>                <span class="token keyword">goto</span> err<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        buf <span class="token operator">+=</span> n<span class="token punctuation">;</span>        total <span class="token operator">+=</span> n<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> total<span class="token punctuation">;</span>err<span class="token operator">:</span>    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"recv(2) - error reading data: %s"</span><span class="token punctuation">,</span> <span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="epoll-封装"><a href="#epoll-封装" class="headerlink" title="epoll 封装"></a>epoll 封装</h1><p>为了让 <strong>epoll</strong> API能够更加简单易用。我对 epoll 进行了一些的封装，让我们就可以通过注册回调函数的方式来响应事件。</p><p>网络上有很多使用 epoll 的示例，大部分都是描述基本用法：注册一个 socket 并启动一个循环来监听事件，每当 socket 需要被读写时，调用一个函数来使用它们。这些例子当然简单好用，但是并没有告诉我们如何通过回调的方式使用 epoll。经过思考后，我发现可以使用 <code>epoll_event</code> 自带的 <code>epoll_data</code> 来解决这个问题：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">union</span> epoll_data <span class="token punctuation">&#123;</span>   <span class="token keyword">void</span>        <span class="token operator">*</span>ptr<span class="token punctuation">;</span>   <span class="token keyword">int</span>          fd<span class="token punctuation">;</span>   <span class="token class-name">uint32_t</span>     u32<span class="token punctuation">;</span>   <span class="token class-name">uint64_t</span>     u64<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token class-name">epoll_data_t</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>正如你看到的，<code>epoll_data</code> 中有一个 <code>void *</code>，一个常常用来保存fd的 <code>int</code>，还有两个大小不同的 <code>uint</code>。我计划做一个自定义事件结构体，其中包括了fd、一些自定义数据和最关键的回调函数指针。然后我们可以把自定义事件结构体绑定到 <code>epoll_data</code> 的 <code>void *</code> 中，如此一来，每当事件发生时，我们都可以通过 <code>epoll_data</code> 获得所有我们需要的东西。</p><p>我想要定义两种类型的回调，一种是事件触发的回调，另一种是间隔触发的周期性回调。我们需要把 epoll 封装到一个自定义结构里，来实现这两种回调。对于这两种回调的处理，我们则会采用完全相同的方式：获得 <code>epoll_data</code>，在其中获得所有我们所需的数据和需要执行的回调函数。</p><p><strong>接收数据包并使用 epoll_wait 处理的顺序图</strong><br><img src="/2023/12/19/translate-sol-2/epoll-sequential.png" alt="Epoll sequential diagram"></p><p>我们需要定义两种结构体和一种函数指针</p><ul><li><strong>struct evloop</strong> 封装 epoll 实例的结构体，添加了各种参数用来实现我们的业务设计</li><li><strong>struct closure</strong> 上文中提到的自定义事件结构体，封装了各种事件参数和回调函数的指针</li><li>**void callback(struct evloop <em>, void <em>)</em></em> 回调函数的接口，在 <strong>closure</strong> 里真正被执行的函数的接口</li></ul><p>另外，我们需要在 .c 文件中实现一些对 <code>evloop</code> 的创建、删除和管理功能。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>src/network.h</span></div><code class="language-c"><span class="token comment">// epoll 的业务包装，包括 epoll 实例本身和其他参数</span><span class="token comment">// 使用 EPOLLONESHOT 处理事件，并且每次都需要手动重置，这样可以保证未来适应多线程架构</span><span class="token keyword">struct</span> <span class="token class-name">evloop</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> epollfd<span class="token punctuation">;</span>                <span class="token comment">// epoll 实例fd</span>    <span class="token keyword">int</span> max_events<span class="token punctuation">;</span>             <span class="token comment">// 单次处理事件最大数量</span>    <span class="token keyword">int</span> timeout<span class="token punctuation">;</span>                <span class="token comment">// 事件等待超时事件</span>    <span class="token keyword">int</span> status<span class="token punctuation">;</span>                 <span class="token comment">// 运行状态(是否运行中)</span>    <span class="token keyword">struct</span> <span class="token class-name">epoll_event</span> <span class="token operator">*</span>events<span class="token punctuation">;</span> <span class="token comment">// 事件数组, 用来接收 epoll_wait 获得的一组并发事件</span>    <span class="token comment">// 周期性任务控制相关</span>    <span class="token keyword">int</span> periodic_maxsize<span class="token punctuation">;</span>       <span class="token comment">// 周期性任务数组初始大小</span>    <span class="token keyword">int</span> periodic_nr<span class="token punctuation">;</span>            <span class="token comment">// 当前周期性任务数量</span>    <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> timerfd<span class="token punctuation">;</span>        <span class="token keyword">struct</span> <span class="token class-name">closure</span> <span class="token operator">*</span>closure<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token operator">*</span><span class="token operator">*</span>periodic_tasks<span class="token punctuation">;</span>         <span class="token comment">// 周期性任务列表 timerfd &lt;-> closure</span><span class="token punctuation">&#125;</span> evloop<span class="token punctuation">;</span><span class="token comment">// 回调函数接口</span><span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">evloop</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* * Callback object, represents a callback function with an associated * descriptor if needed, args is a void pointer which can be a structure * pointing to callback parameters and closure_id is a UUID for the closure * itself. * The last two fields are payload, a serialized version of the result of * a callback, ready to be sent through wire and a function pointer to the * callback function to execute. */</span><span class="token comment">// 自定义事件结构体</span><span class="token keyword">struct</span> <span class="token class-name">closure</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> fd<span class="token punctuation">;</span>                     <span class="token comment">// 监听的 fd</span>    <span class="token keyword">void</span> <span class="token operator">*</span>obj<span class="token punctuation">;</span>                  <span class="token comment">// 存放一些需要的自定义数据</span>    <span class="token keyword">void</span> <span class="token operator">*</span>args<span class="token punctuation">;</span>                 <span class="token comment">// 可以被callback使用的参数, 指向用户自定义结构, 实际调用时就是 call 的第二个参数</span>    <span class="token keyword">char</span> closure_id<span class="token punctuation">[</span>UUID_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// closure 的 UUID</span>    <span class="token keyword">struct</span> <span class="token class-name">bytestring</span> <span class="token operator">*</span>payload<span class="token punctuation">;</span> <span class="token comment">// callback 的结果, 可以被网络发送的数据流</span>    callback <span class="token operator">*</span>call<span class="token punctuation">;</span>             <span class="token comment">// 会被执行的回调函数</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// evloop 的创建、初始化、销毁函数</span><span class="token keyword">struct</span> <span class="token class-name">evloop</span> <span class="token operator">*</span><span class="token function">evloop_create</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">evloop_init</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">evloop</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">evloop_free</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">evloop</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 一个阻塞的循环, 监听各种触发并执行对应的回调</span><span class="token keyword">int</span> <span class="token function">evloop_wait</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">evloop</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 添加一个 closure, 其中包含一个回调函数</span><span class="token comment">// 回调函数是单次触发的(边沿触发), 但是每次触发后都会被重置, 这样下次依然可以触发</span><span class="token keyword">void</span> <span class="token function">evloop_add_callback</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">evloop</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">closure</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 添加一个周期性的 closure, 间隔指定事件触发</span><span class="token keyword">void</span> <span class="token function">evloop_add_periodic_task</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">evloop</span> <span class="token operator">*</span><span class="token punctuation">,</span>                              <span class="token keyword">int</span><span class="token punctuation">,</span>                              <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">,</span>                              <span class="token keyword">struct</span> <span class="token class-name">closure</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 注销一个 closure, 删除对其 fd 的监听</span><span class="token keyword">int</span> <span class="token function">evloop_del_callback</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">evloop</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">closure</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 重置该 closure 对 read 事件的监听</span><span class="token keyword">int</span> <span class="token function">evloop_rearm_callback_read</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">evloop</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">closure</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 重置该 closure 对 write 事件的监听</span><span class="token keyword">int</span> <span class="token function">evloop_rearm_callback_write</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">evloop</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">closure</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 以下三个函数是对 epoll 原始API的封装, 供上方的函数调用</span><span class="token comment">// EPOLL_CTL_ADD 的封装, 向 epoll 添加监听</span><span class="token keyword">int</span> <span class="token function">epoll_add</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// EPOLL_CTL_MOD 的封装, 可以重置 EPOLLONESHOT, 让 closure 下次仍被触发</span><span class="token keyword">int</span> <span class="token function">epoll_mod</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// EPOLL_CTL_DEL 的封装, 删除对某个 fd 的监听</span><span class="token keyword">int</span> <span class="token function">epoll_del</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="epoll-封装实现"><a href="#epoll-封装实现" class="headerlink" title="epoll 封装实现"></a>epoll 封装实现</h2><p>在头文件中定义了我们网络所需的各种工具函数后，接下来我们开始进行函数实现。</p><p>让我们先从最简单的开始，<code>evloop</code> 实例的创建、初始化和删除。他包括了这些内容：</p><ul><li><code>epoll</code> 的 <code>fd</code> 即 <code>epollfd</code></li><li>单次处理的最大事件数量</li><li>一个毫秒单位的超时时间</li><li>loop是否正在运行的状态标识</li><li>动态大小的周期性任务数组</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>src/network.c</span></div><code class="language-c"><span class="token comment">/****************************** *         EPOLL APIS         * ******************************/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">EVLOOP_INITIAL_SIZE</span> <span class="token expression"><span class="token number">4</span> </span><span class="token comment">// 默认周期任务数组大小</span></span><span class="token comment">// 创建并初始化 evloop</span><span class="token keyword">struct</span> <span class="token class-name">evloop</span> <span class="token operator">*</span><span class="token function">evloop_create</span><span class="token punctuation">(</span><span class="token keyword">int</span> max_events<span class="token punctuation">,</span> <span class="token keyword">int</span> timeout<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">evloop</span> <span class="token operator">*</span>loop <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>loop<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">evloop_init</span><span class="token punctuation">(</span>loop<span class="token punctuation">,</span> max_events<span class="token punctuation">,</span> timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> loop<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">evloop_init</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">evloop</span> <span class="token operator">*</span>loop<span class="token punctuation">,</span> <span class="token keyword">int</span> max_events<span class="token punctuation">,</span> <span class="token keyword">int</span> timeout<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    loop<span class="token operator">-></span>max_events <span class="token operator">=</span> max_events<span class="token punctuation">;</span>    loop<span class="token operator">-></span>events <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">epoll_event</span><span class="token punctuation">)</span> <span class="token operator">*</span> max_events<span class="token punctuation">)</span><span class="token punctuation">;</span>    loop<span class="token operator">-></span>epollfd <span class="token operator">=</span> <span class="token function">epoll_create1</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 这里创建 epoll 实例</span>    loop<span class="token operator">-></span>timeout <span class="token operator">=</span> timeout<span class="token punctuation">;</span>    loop<span class="token operator">-></span>periodic_maxsize <span class="token operator">=</span> EVLOOP_INITIAL_SIZE<span class="token punctuation">;</span>    loop<span class="token operator">-></span>periodic_nr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    loop<span class="token operator">-></span>periodic_tasks <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>EVLOOP_INITIAL_SIZE <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>loop<span class="token operator">-></span>periodic_tasks<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    loop<span class="token operator">-></span>status <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 释放 evloop</span><span class="token keyword">void</span> <span class="token function">evloop_free</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">evloop</span> <span class="token operator">*</span>loop<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">free</span><span class="token punctuation">(</span>loop<span class="token operator">-></span>events<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> loop<span class="token operator">-></span>periodic_nr<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">free</span><span class="token punctuation">(</span>loop<span class="token operator">-></span>periodic_tasks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>loop<span class="token operator">-></span>periodic_tasks<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>loop<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>接着，我们需要实现三个包装 <code>epoll</code> API的函数，用来创建、修改和删除 <code>epoll</code> 对 <code>fd</code> 的监听。我们封装函数的目的是为所有的 <code>epoll</code> 监听都添加 <code>EPOLLET</code> 和 <code>EPOLLONESHOT</code> 标识。<code>EPOLLET</code> 标识可以让 <code>epoll</code> 工作在<code>边沿触发</code>模式，<code>EPOLLONESHOT</code> 标识则可以确保 <code>epoll</code> 对某个事件触发仅产生一次（然后我们通过手动重置的方式让其可以继续响应）。</p><p>这样的设置可以避免未来我们在使用多线程架构时，一次事件的传入会唤醒所有等待中的线程，这被称为<code>惊群效应</code>(thundering herd problem)，不过这些都是后话，暂时可以不用深究。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>src/network.c</span></div><code class="language-c"><span class="token comment">// 添加监听</span><span class="token comment">// return 添加结果</span><span class="token comment">// efd file descriptor</span><span class="token comment">// fd 被监听的 fd</span><span class="token comment">// evs 被监听的事件(可以是一个或一组)</span><span class="token comment">// data 传入自定义结构体</span><span class="token keyword">int</span> <span class="token function">epoll_add</span><span class="token punctuation">(</span><span class="token keyword">int</span> efd<span class="token punctuation">,</span> <span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">int</span> evs<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">epoll_event</span> ev<span class="token punctuation">;</span>    <span class="token comment">// 在 epoll_data 中设置 fd</span>    ev<span class="token punctuation">.</span>data<span class="token punctuation">.</span>fd <span class="token operator">=</span> fd<span class="token punctuation">;</span>    <span class="token comment">// 注意 epoll_data 是 union, 如果有data并在此处设置, 那么上一行的 ev.data.fd 就不能再使用(是随机数)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span>        ev<span class="token punctuation">.</span>data<span class="token punctuation">.</span>ptr <span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token comment">// 将所有事件都设置为 边沿触发(EPOLLET) 和 触发后取消监听(EPOLLONESHOT)</span>    ev<span class="token punctuation">.</span>events <span class="token operator">=</span> evs <span class="token operator">|</span> EPOLLET <span class="token operator">|</span> EPOLLONESHOT<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">epoll_ctl</span><span class="token punctuation">(</span>efd<span class="token punctuation">,</span> EPOLL_CTL_ADD<span class="token punctuation">,</span> fd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ev<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 修改监听 主要目的是让触发过的事件可以再次被触发</span><span class="token keyword">int</span> <span class="token function">epoll_mod</span><span class="token punctuation">(</span><span class="token keyword">int</span> efd<span class="token punctuation">,</span> <span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">int</span> evs<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">epoll_event</span> ev<span class="token punctuation">;</span>    ev<span class="token punctuation">.</span>data<span class="token punctuation">.</span>fd <span class="token operator">=</span> fd<span class="token punctuation">;</span>    <span class="token comment">// Being ev.data a union, in case of data != NULL, fd will be set to random</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span>        ev<span class="token punctuation">.</span>data<span class="token punctuation">.</span>ptr <span class="token operator">=</span> data<span class="token punctuation">;</span>    ev<span class="token punctuation">.</span>events <span class="token operator">=</span> evs <span class="token operator">|</span> EPOLLET <span class="token operator">|</span> EPOLLONESHOT<span class="token punctuation">;</span>    <span class="token comment">// 通过 EPOLL_CTL_MOD 可以让事件再次能被触发</span>    <span class="token keyword">return</span> <span class="token function">epoll_ctl</span><span class="token punctuation">(</span>efd<span class="token punctuation">,</span> EPOLL_CTL_MOD<span class="token punctuation">,</span> fd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ev<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 删除监听</span><span class="token keyword">int</span> <span class="token function">epoll_del</span><span class="token punctuation">(</span><span class="token keyword">int</span> efd<span class="token punctuation">,</span> <span class="token keyword">int</span> fd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">epoll_ctl</span><span class="token punctuation">(</span>efd<span class="token punctuation">,</span> EPOLL_CTL_DEL<span class="token punctuation">,</span> fd<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>这里有两件事需要注意：</p><ul><li><p>第一，如前所述，<code>epoll_event</code> 中包括了一个 <code>union epoll_data</code>，其中可以保存一个 <code>fd</code> <strong>或</strong> 一个 <code>void *</code>。我们选择了使用后者，传入了我们的 <code>closure</code>，这其中包含了更多有用的信息，也包括 <code>fd</code> 在内。</p></li><li><p>第二，刚才我们定义的添加和修改函数的第三个参数，可以接收一组事件，一般而言是 <code>EPOLLIN</code> 或 <code>EPOLLOUT</code>。同时我们添加了 <code>EPOLLONESHOT</code> 标识，这意味着当事件触发一次后就不会再次触发，除非我们手动重置该事件。这样做是为了保持对低级事件触发的某种程度的控制，并为将来的多线程实现留出空间。这篇<a href="https://idea.popcount.org/2017-02-20-epoll-is-fundamentally-broken-12/">文档</a>精彩地阐述了 <code>epoll</code> 这种设计的好处，以及为什么最好使用 <code>EPOLLONESHOT</code> 标志。</p></li></ul><h2 id="epoll-循环实现"><a href="#epoll-循环实现" class="headerlink" title="epoll 循环实现"></a>epoll 循环实现</h2><p>我们继续实现我们的封装，接下来是一些回调函数的注册、周期回调的注册以及主循环。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>src/network.c</span></div><code class="language-c"><span class="token comment">// 添加回调</span><span class="token comment">// loop loop封装实例</span><span class="token comment">// cb 自定义事件封装 closure</span><span class="token keyword">void</span> <span class="token function">evloop_add_callback</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">evloop</span> <span class="token operator">*</span>loop<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">closure</span> <span class="token operator">*</span>cb<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">epoll_add</span><span class="token punctuation">(</span>loop<span class="token operator">-></span>epollfd<span class="token punctuation">,</span> cb<span class="token operator">-></span>fd<span class="token punctuation">,</span> EPOLLIN<span class="token punctuation">,</span> cb<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"Epoll register callback: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 添加周期事件</span><span class="token comment">// loop loop封装实例</span><span class="token comment">// seconds 以秒为单位的到期时间或触发周期</span><span class="token comment">// ns 以纳秒为单位的到期时间或触发周期</span><span class="token comment">// cb 自定义事件封装</span><span class="token keyword">void</span> <span class="token function">evloop_add_periodic_task</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">evloop</span> <span class="token operator">*</span>loop<span class="token punctuation">,</span>                              <span class="token keyword">int</span> seconds<span class="token punctuation">,</span>                              <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ns<span class="token punctuation">,</span>                              <span class="token keyword">struct</span> <span class="token class-name">closure</span> <span class="token operator">*</span>cb<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 表示时间间隔或时间点的结构</span>    <span class="token keyword">struct</span> <span class="token class-name">itimerspec</span> timervalue<span class="token punctuation">;</span>    <span class="token keyword">int</span> timerfd <span class="token operator">=</span> <span class="token function">timerfd_create</span><span class="token punctuation">(</span>CLOCK_MONOTONIC<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>timervalue<span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>timervalue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设置初始的到期时间 (多久后执行</span>    timervalue<span class="token punctuation">.</span>it_value<span class="token punctuation">.</span>tv_sec <span class="token operator">=</span> seconds<span class="token punctuation">;</span>    timervalue<span class="token punctuation">.</span>it_value<span class="token punctuation">.</span>tv_nsec <span class="token operator">=</span> ns<span class="token punctuation">;</span>    <span class="token comment">// 设置初始的触发周期 (间隔多久执行</span>    timervalue<span class="token punctuation">.</span>it_interval<span class="token punctuation">.</span>tv_sec <span class="token operator">=</span> seconds<span class="token punctuation">;</span>    timervalue<span class="token punctuation">.</span>it_interval<span class="token punctuation">.</span>tv_nsec <span class="token operator">=</span> ns<span class="token punctuation">;</span>    <span class="token comment">// 设置好 timer</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">timerfd_settime</span><span class="token punctuation">(</span>timerfd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>timervalue<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"timerfd_settime"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 将 timer 添加到 epoll, 让其能够触发</span>    <span class="token keyword">struct</span> <span class="token class-name">epoll_event</span> ev<span class="token punctuation">;</span>    ev<span class="token punctuation">.</span>data<span class="token punctuation">.</span>fd <span class="token operator">=</span> timerfd<span class="token punctuation">;</span>    ev<span class="token punctuation">.</span>events <span class="token operator">=</span> EPOLLIN<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">epoll_ctl</span><span class="token punctuation">(</span>loop<span class="token operator">-></span>epollfd<span class="token punctuation">,</span> EPOLL_CTL_ADD<span class="token punctuation">,</span> timerfd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ev<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"epoll_ctl(2): EPOLLIN"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 将周期性任务的信息绑定到 loop</span>    <span class="token comment">// 如果周期性任务的数量大于periodic_maxsize, 动态扩容</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>loop<span class="token operator">-></span>periodic_nr <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">></span> loop<span class="token operator">-></span>periodic_maxsize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        loop<span class="token operator">-></span>periodic_maxsize <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">;</span>        loop<span class="token operator">-></span>periodic_tasks <span class="token operator">=</span>            <span class="token function">realloc</span><span class="token punctuation">(</span>loop<span class="token operator">-></span>periodic_tasks<span class="token punctuation">,</span>                    loop<span class="token operator">-></span>periodic_maxsize <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>loop<span class="token operator">-></span>periodic_tasks<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 存储周期性任务的内容 timerfd 和 自定义事件</span>    loop<span class="token operator">-></span>periodic_tasks<span class="token punctuation">[</span>loop<span class="token operator">-></span>periodic_nr<span class="token punctuation">]</span> <span class="token operator">=</span>        <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>loop<span class="token operator">-></span>periodic_tasks<span class="token punctuation">[</span>loop<span class="token operator">-></span>periodic_nr<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    loop<span class="token operator">-></span>periodic_tasks<span class="token punctuation">[</span>loop<span class="token operator">-></span>periodic_nr<span class="token punctuation">]</span><span class="token operator">-></span>closure <span class="token operator">=</span> cb<span class="token punctuation">;</span>    loop<span class="token operator">-></span>periodic_tasks<span class="token punctuation">[</span>loop<span class="token operator">-></span>periodic_nr<span class="token punctuation">]</span><span class="token operator">-></span>timerfd <span class="token operator">=</span> timerfd<span class="token punctuation">;</span>    <span class="token comment">// 记录当前绑定了多少周期性任务</span>    loop<span class="token operator">-></span>periodic_nr<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// epoll 主循环</span><span class="token keyword">int</span> <span class="token function">evloop_wait</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">evloop</span> <span class="token operator">*</span>el<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> rc <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>             <span class="token comment">// 返回值</span>    <span class="token keyword">int</span> events <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>         <span class="token comment">// 单次触发事件数</span>    <span class="token keyword">long</span> <span class="token keyword">int</span> timer <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span>    <span class="token comment">// 拿到我们周期性事件的 timerfd</span>    <span class="token keyword">int</span> periodic_done <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// 标记是否是周期性事件并且已经执行</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 等待事件发生</span>        events <span class="token operator">=</span> <span class="token function">epoll_wait</span><span class="token punctuation">(</span>el<span class="token operator">-></span>epollfd<span class="token punctuation">,</span> el<span class="token operator">-></span>events<span class="token punctuation">,</span>                            el<span class="token operator">-></span>max_events<span class="token punctuation">,</span> el<span class="token operator">-></span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 有异常</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>events <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 系统中断, 暂时不管</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">==</span> EINTR<span class="token punctuation">)</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token comment">// 确实出了问题, 结束循环</span>            rc <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            el<span class="token operator">-></span>status <span class="token operator">=</span> errno<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 循环处理每个事件</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> events<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 错误校验 检查是否是错误事件 检查是否不是输入输出事件</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>el<span class="token operator">-></span>events<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>events <span class="token operator">&amp;</span> EPOLLERR<span class="token punctuation">)</span> <span class="token operator">||</span>                <span class="token punctuation">(</span>el<span class="token operator">-></span>events<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>events <span class="token operator">&amp;</span> EPOLLHUP<span class="token punctuation">)</span> <span class="token operator">||</span>                <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>el<span class="token operator">-></span>events<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>events <span class="token operator">&amp;</span> EPOLLIN<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                 <span class="token operator">!</span><span class="token punctuation">(</span>el<span class="token operator">-></span>events<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>events <span class="token operator">&amp;</span> EPOLLOUT<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 总之这个 fd 上出现了一些异常, 我们把链接关了</span>                <span class="token function">perror</span> <span class="token punctuation">(</span><span class="token string">"epoll_wait(2)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">shutdown</span><span class="token punctuation">(</span>el<span class="token operator">-></span>events<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>fd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">close</span><span class="token punctuation">(</span>el<span class="token operator">-></span>events<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>                el<span class="token operator">-></span>status <span class="token operator">=</span> errno<span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 拿到我们的 closure</span>            <span class="token keyword">struct</span> <span class="token class-name">closure</span> <span class="token operator">*</span>closure <span class="token operator">=</span> el<span class="token operator">-></span>events<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>ptr<span class="token punctuation">;</span>            <span class="token comment">// 标记没有完成周期事件</span>            periodic_done <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token comment">// 当没有被标识完成时, 循环查找我们存储的周期事件</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> el<span class="token operator">-></span>periodic_nr <span class="token operator">&amp;&amp;</span> periodic_done <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 找到了</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token operator">-></span>events<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>fd <span class="token operator">==</span> el<span class="token operator">-></span>periodic_tasks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>timerfd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// 拿到 closure</span>                    <span class="token keyword">struct</span> <span class="token class-name">closure</span> <span class="token operator">*</span>c <span class="token operator">=</span> el<span class="token operator">-></span>periodic_tasks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>closure<span class="token punctuation">;</span>                    <span class="token comment">// 读 timerfd</span>                    <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token function">read</span><span class="token punctuation">(</span>el<span class="token operator">-></span>events<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>fd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>timer<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 执行回调</span>                    c<span class="token operator">-></span><span class="token function">call</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> c<span class="token operator">-></span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 标记完成</span>                    periodic_done <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>periodic_done <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token comment">// 并不是完成了某个周期性事件 那就是触发事件了 这里执行回调</span>            closure<span class="token operator">-></span><span class="token function">call</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> closure<span class="token operator">-></span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> rc<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 重置该 closure 对 read 事件的监听</span><span class="token keyword">int</span> <span class="token function">evloop_rearm_callback_read</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">evloop</span> <span class="token operator">*</span>el<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">closure</span> <span class="token operator">*</span>cb<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">epoll_mod</span><span class="token punctuation">(</span>el<span class="token operator">-></span>epollfd<span class="token punctuation">,</span> cb<span class="token operator">-></span>fd<span class="token punctuation">,</span> EPOLLIN<span class="token punctuation">,</span> cb<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 重置该 closure 对 write 事件的监听</span><span class="token keyword">int</span> <span class="token function">evloop_rearm_callback_write</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">evloop</span> <span class="token operator">*</span>el<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">closure</span> <span class="token operator">*</span>cb<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">epoll_mod</span><span class="token punctuation">(</span>el<span class="token operator">-></span>epollfd<span class="token punctuation">,</span> cb<span class="token operator">-></span>fd<span class="token punctuation">,</span> EPOLLOUT<span class="token punctuation">,</span> cb<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 删除回调函数</span><span class="token keyword">int</span> <span class="token function">evloop_del_callback</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">evloop</span> <span class="token operator">*</span>el<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">closure</span> <span class="token operator">*</span>cb<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">epoll_del</span><span class="token punctuation">(</span>el<span class="token operator">-></span>epollfd<span class="token punctuation">,</span> cb<span class="token operator">-></span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>在我们之前的所有代码中，<code>evloop_wait</code> 是最有意思的，他启动一个循环不停监视 <code>epoll_wait</code>，执行错误检查，区分本次触发是周期性的自动触发或是读写触发，然后执行我们设置的回调函数。</p><h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>我们的代码越写越多，这次我们又添加了一个模块。</p><p>此时我们的文件结构是这样的：</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">sol&#x2F; ├── src&#x2F; │    ├── mqtt.h |    ├── mqtt.c │    ├── network.h │    ├── network.c │    ├── pack.h │    └── pack.c ├── CHANGELOG ├── CMakeLists.txt ├── COPYING └── README.md<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>网络编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络编程</tag>
      
      <tag>翻译</tag>
      
      <tag>物联网</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[问题]Windows环境下nssm注册的mysql服务无法启动</title>
    <link href="/2023/12/15/question-mysqld-service.html"/>
    <url>/2023/12/15/question-mysqld-service.html</url>
    
    <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>手上有个项目上一直使用的一键安装包，包括了上位机、后端、前端、数据库、时序库、nginx等一系列东西。一直都是通过 <code>nssm</code> 将这些软件注册成自启动服务的。注册的方式大概是这样：</p><span id="more"></span><figure><div class="code-wrapper"><pre class="line-numbers language-bat" data-language="bat"><div class="caption"><span>install.bat</span></div><code class="language-bat">:: 注册mysqlnssm-2.24\win64\nssm install xxx-scada-mysql %cd%\mysql-8.0.27-winx64\bin\mysqld.exenssm-2.24\win64\nssm set xxx-scada-mysql AppDirectory %cd%\mysql-8.0.27-winx64\bin:: 启动mysqlnssm-2.24\win64\nssm start xxx-scada-mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>前两天我们需要在公司的一台测试服务器上安装这套项目软件，先检查了公司的服务器环境，发现已经有了 <code>mysql</code> 和 <code>nginx</code> 服务，于是手动停止这两个服务，之后使用一键安装包部署项目。</p><blockquote><p>此时，系统中有一个之前已经安装的 <code>mysql</code>，称为 <code>数据库A</code>。<code>数据库A</code> 通过 <code>mysqld install</code> 命令安装了服务，称为 <code>服务A</code>， <code>服务A</code> 已经被手动停止运行。<br>一键安装包中又拷贝了一份 <code>mysql</code> 进去，称为 <code>数据库B</code>。通过 <code>nssm</code> 安装的 <code>数据库B</code> 服务称为 <code>服务B</code>。</p></blockquote><h1 id="问题过程"><a href="#问题过程" class="headerlink" title="问题过程"></a>问题过程</h1><ol><li>发现通过 <code>nssm</code> 注册的 <code>服务B</code> 无法启动，所以关闭 <code>服务B</code>。</li><li>手动运行 <code>数据库B</code> 中的 <code>mysqld</code> 程序，发现程序闪退，没有报错信息，也没有错误日志。</li><li>怀疑是依赖问题，尝试了更新 <code>MSVC</code> ，没有效果。</li><li>尝试使用 <code>数据库B</code> 中的 <code>mysqld --log-error=my.err</code> ，发现 <code>mysqld</code> 不再闪退，但是此时依然不能正常提供数据库服务，并且没有异常的错误日志。</li><li>同事启动了 <code>服务A</code> ，发现可以正常使用。</li><li>受同事启发，尝试删除 <code>服务A</code>，此时脑袋混乱，居然是使用 <code>数据库B</code> 执行的 <code>mysqld --remove</code>，没想到依然能删除 <code>服务A</code>。</li><li>发现删除 <code>服务A</code> 后，<code>数据库B</code> 中的 <code>mysqld</code> 可以正常使用了，再次尝试 <code>服务B</code> ，发现也可以正常使用。</li></ol><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>本次问题的出现，主要原因还是我对 <code>Windows</code> 系统不熟悉，对于 <code>Windows</code> 系统中服务注册原理完全不懂。</p><p>长期使用 <code>nssm</code> 进行服务管理，让我们可以一直忽略 <code>Windows</code> 的服务管理细节，不断地向前走下去。同时也让我们失去了探索 <code>Windows</code> 服务管理的动力。其实，假如世界上没有 <code>nssm</code> ，也许需要一周，也许需要一两个月，我们总是能学会注册服务的方法。</p><p>因为工具过于方便导致失去了底层能力，这次的问题只是这个道理的再一次体现而已。</p>]]></content>
    
    
    <categories>
      
      <category>问题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目实践</tag>
      
      <tag>问题</tag>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[翻译]Sol - 从零开始的MQTT broker - 第一部分：协议</title>
    <link href="/2023/12/08/translate-sol-1.html"/>
    <url>/2023/12/08/translate-sol-1.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>原文 <a href="https://codepr.github.io/posts/sol-mqtt-broker/">Sol - An MQTT broker from scratch. Part 1 - The protocol</a></p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我已经在物联网领域工作有一段时间了，这段时间里我一直在处理物联网架构相关的工作，探索物联网系统开发的最佳模式，研究相关的协议和标准，例如MQTT。</p><span id="more"></span><p>因为我一直在渴望着提升我编程能力的机会，我觉得在物联网方向深入研究会很有趣也很有好处。因此，我再一次 <code>git init</code> 了一个项目，并且要通过写下这些博客来挑战我自己，强迫自己进步。</p><p><strong>Sol</strong> 是一个C语言项目，一个超级简单的Linux平台的MQTT broker，支持MQTT 3.3.1，不兼容旧的版本，非常类似于轻量级的 <code>Mosquitto</code> （虽然这玩意已经是个轻量级软件了）。由于现在有很多种类的MQTT客户端，所以测试起来会比较简单。最终的成品可能会成为一个更简洁，功能更丰富的软件，我们要创造这个功能的最小化实现。顺便提一下，<strong>Sol</strong> 这个名字的来源有一半的原因是我对短名称的偏好，另一半的原因则是火星日 (The Martian docet)。或者说，<strong>Sol</strong> 可能代表<strong>S</strong>crappy <strong>O</strong>l’ <strong>L</strong>oser。emmmm</p><p><strong>注意</strong>：这个项目一直到最后才会编译，你需要跟写所有的代码步骤。如果你想要在中途进行测试，我建议你自己建一个主函数来做这些测试或者修改。</p><p>一步一步来，我一般会创建一个这样的文件结构来初始化我的C项目：</p><figure><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">sol/ ├── src/ ├── CHANGELOG ├── CMakeLists.txt ├── COPYING └── README.md<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>这里是Github上的<a href="https://github.com/codepr/sol/tree/tutorial">仓库</a>。</p><p>我会尝试着一步一步描述 <strong>Sol</strong> 的开发过程，但我也不会贴上所有的代码，只会解释关键的地方。你想要学习的最好方式依然是亲自编写、编译、修改代码。</p><p>这将是一系列文章，每篇文章都将讨论并主要实施项目的一个概念&#x2F;模块：</p><ul><li><a href="https://codepr.github.io/posts/sol-mqtt-broker/">第一部分 ： 协议</a> MQTT协议数据包处理的基础</li><li><a href="https://codepr.github.io/posts/sol-mqtt-broker-p2/">第二部分 ： 网络</a> 解决网络通讯的功能模块</li><li><a href="https://codepr.github.io/posts/sol-mqtt-broker-p3/">第三部分 ： 服务</a> 程序入口</li><li><a href="https://codepr.github.io/posts/sol-mqtt-broker-p4/">第四部分 ： 数据结构</a> 实用和实验性的模块</li><li><a href="https://codepr.github.io/posts/sol-mqtt-broker-p5/">第五部分 ： Topic abstraction</a> broker的主要功能</li><li><a href="https://codepr.github.io/posts/sol-mqtt-broker-p6/">第六部分 ： Handlers</a> 完成服务，对每个数据包都有处理</li><li><a href="https://codepr.github.io/posts/sol-mqtt-broker-bonus/">特别篇 ： 多线程</a> 多线程模型的改进、错误修复和集成</li></ul><p>我想说，虽然 sol 会是一个完全功能的 broker，但仍有很大改进和优化空间，以及可能的一些隐藏功能（俗称BUG）。</p><h1 id="架构设计"><a href="#架构设计" class="headerlink" title="架构设计"></a>架构设计</h1><p><code>broker</code> 的本质是一个中间件，它接受来自多个客户端（生产者）的输入，并使用抽象方法将其转发给一组目标客户端（消费者），这种抽象方法用于定义和管理这些客户端组，形式为 <strong>channel</strong> 或 <strong>topic</strong>（根据协议标准）。与 IRC 频道或通用聊天中的等效概念非常相似，每个消费者客户端都可以订阅 <code>topic</code>，以便接收其他客户端发布到这些 <code>topic</code> 的所有消息。</p><p>第一个想到的是建立在某种数据结构之上的服务器，这种数据结构可以轻松管理这些 <code>topic</code> 和连接的客户端（无论是生产者还是消费者）。客户端收到的每个消息都必须转发给所有订阅了该消息指定 <code>topic</code> 的其他已连接客户端。</p><p>让我们试试这种方法，使用一个 TCP 服务器和一个用于处理数据流的模块。实现服务器的方法有很多，包括线程、fork 进程和多路 I&#x2F;O，这次我将尝试用多路 I&#x2F;O 的方式。</p><p>我们先使用单线程多路 I&#x2F;O 服务器，未来有可能进行多线程拓展。实际上，用于多路复用的 <strong>epoll</strong> 接口是线程安全的。</p><h1 id="MQTT结构"><a href="#MQTT结构" class="headerlink" title="MQTT结构"></a>MQTT结构</h1><p>首先，我们需要基于<a href="http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/errata01/os/mqtt-v3.1.1-errata01-os-complete.html">官方文档</a>，制作一些描述 MQTT 协议数据包的结构体。</p><p>从 opcode 表和 MQTT 头开始，基于文档，每个数据包都包含以下三部分：</p><ul><li>fixed header（必选）</li><li>variable header（可选）</li><li>payload（可选）</li></ul><h2 id="Fixed-Header"><a href="#Fixed-Header" class="headerlink" title="Fixed Header"></a>Fixed Header</h2><p>Fixed Header的第一个字节包括了 <code>MQTT type</code> 和 <code>Flags</code>，第二到第五个字节使用可变编码的方式，存储剩余数据包的长度。</p><figure><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><div class="caption"><span>Fixed Header</span></div><code class="language-text">| Bit    | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 ||--------|---------------|---------------|| Byte 1 | MQTT type     |  Flags        ||--------|-------------------------------|| Byte 2 |                               ||  .     |      Remaining Length         ||  .     |                               || Byte 5 |                               |<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>Flags并不是强制填写的，只是一些控制类数据，内容如下：</p><ul><li>Dup flag： 当消息被发送超过一次时使用</li><li>QoS level： 有以下三种取值 <code>AT_MOST_ONCE</code>&#x3D;0， <code>AT_LEAST_ONCE</code>&#x3D;1 and <code>EXACTLY_ONCE</code>&#x3D;2</li><li>Retain flag： 保留标志，有保留标志的消息被发布到主题时，消息会被保留，之后连接进来的客户端也可以收到该消息。保留消息可以被另一条保留消息覆盖。</li></ul><p>所以，打开 Vim （或者其他任何你喜欢的IDE），创建名为 <code>mqtt.h</code> 的头文件，开始写关于 Fixed Header 的数据结构吧：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>src/mqtt.h</span></div><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MQTT_HEADER_LEN</span> <span class="token expression"><span class="token number">2</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MQTT_ACK_LEN</span>    <span class="token expression"><span class="token number">4</span></span></span><span class="token comment">/* * 回复信息枚举，用于 Fixed Header 中的第一个字节 * 准确的说是只负责设置高位的4bit */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CONNACK_BYTE</span>  <span class="token expression"><span class="token number">0x20</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PUBLISH_BYTE</span>  <span class="token expression"><span class="token number">0x30</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PUBACK_BYTE</span>   <span class="token expression"><span class="token number">0x40</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PUBREC_BYTE</span>   <span class="token expression"><span class="token number">0x50</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PUBREL_BYTE</span>   <span class="token expression"><span class="token number">0x60</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PUBCOMP_BYTE</span>  <span class="token expression"><span class="token number">0x70</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SUBACK_BYTE</span>   <span class="token expression"><span class="token number">0x90</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">UNSUBACK_BYTE</span> <span class="token expression"><span class="token number">0xB0</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PINGRESP_BYTE</span> <span class="token expression"><span class="token number">0xD0</span></span></span><span class="token comment">/* 信息类型 */</span><span class="token keyword">enum</span> <span class="token class-name">packet_type</span> <span class="token punctuation">&#123;</span>    CONNECT     <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>    CONNACK     <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>    PUBLISH     <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span>    PUBACK      <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span>    PUBREC      <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span>    PUBREL      <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">,</span>    PUBCOMP     <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">,</span>    SUBSCRIBE   <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">,</span>    SUBACK      <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">,</span>    UNSUBSCRIBE <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span>    UNSUBACK    <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">,</span>    PINGREQ     <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">,</span>    PINGRESP    <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">,</span>    DISCONNECT  <span class="token operator">=</span> <span class="token number">14</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">enum</span> <span class="token class-name">qos_level</span> <span class="token punctuation">&#123;</span> AT_MOST_ONCE<span class="token punctuation">,</span> AT_LEAST_ONCE<span class="token punctuation">,</span> EXACTLY_ONCE <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">union</span> mqtt_header <span class="token punctuation">&#123;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> byte<span class="token punctuation">;</span>         <span class="token comment">// 将 header 视为一个byte操作</span>    <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// 将 header 视为内部结构分开操作</span>        <span class="token keyword">unsigned</span> retain <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">// 保留标识</span>        <span class="token keyword">unsigned</span> qos <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">;</span>       <span class="token comment">// qos标识</span>        <span class="token keyword">unsigned</span> dup <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>       <span class="token comment">// 重复标识</span>        <span class="token keyword">unsigned</span> type <span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">;</span>      <span class="token comment">// 4bit Flags</span>    <span class="token punctuation">&#125;</span> bits<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>最上方的两个 <code>#define</code> 定义了 MQTT Fixed Header 和 MQTT ACK 的长度。</p><p>正如你在代码中看到的，我们利用了 <strong>union</strong>——一种可以在内存中的同一位置存储多种表示形式的结构——来表示一个字节。换句话说，与普通的 <code>struct</code> 不同，<code>union</code> 中只能有一个字段具有值（在此例中是byte或bits）。它们的内存位置是共享的，因此，通过使用<strong>位字段</strong>，我们可以有效地操作单个比特或字节的一部分。</p><h2 id="CONNECT"><a href="#CONNECT" class="headerlink" title="CONNECT"></a>CONNECT</h2><p>我们要定义的第一个控制数据包是 CONNECT。 这是当客户端建立新连接时必须发送的第一个数据包，CONNECT 包必须是有且仅有一个，否则视为与协议不符，服务端需要断开连接。</p><p>对于每个 CONNECT，服务端需要在响应中回复 CONNACK。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>src/mqtt.h</span></div><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">mqtt_connect</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">union</span> mqtt_header header<span class="token punctuation">;</span>               <span class="token comment">// 第一个byte是通用头</span>    <span class="token keyword">union</span> <span class="token punctuation">&#123;</span>                                 <span class="token comment">// 第二个byte表示一些控制信息</span>        <span class="token keyword">unsigned</span> <span class="token keyword">char</span> byte<span class="token punctuation">;</span>        <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> reserved <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">unsigned</span> clean_session <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>     <span class="token comment">// 为1时表示新session，否则表示已有session</span>            <span class="token keyword">unsigned</span> will <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>              <span class="token comment">// 表示是否有遗嘱</span>            <span class="token keyword">unsigned</span> will_qos <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">;</span>          <span class="token comment">// 表示遗嘱的QOS</span>            <span class="token keyword">unsigned</span> will_retain <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>       <span class="token comment">// 表示遗嘱发布时是否保留</span>            <span class="token keyword">unsigned</span> password <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token comment">// 表示是否有密码</span>            <span class="token keyword">unsigned</span> username <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token comment">// 表示是否有用户名</span>        <span class="token punctuation">&#125;</span> bits<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>                                <span class="token comment">// 载荷</span>        <span class="token keyword">unsigned</span> <span class="token keyword">short</span> keepalive<span class="token punctuation">;</span>           <span class="token comment">// 会话保活时间，单位秒</span>        <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>client_id<span class="token punctuation">;</span>        <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>username<span class="token punctuation">;</span>        <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>password<span class="token punctuation">;</span>        <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>will_topic<span class="token punctuation">;</span>        <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>will_message<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> payload<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">mqtt_connack</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">union</span> mqtt_header header<span class="token punctuation">;</span>    <span class="token keyword">union</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">unsigned</span> <span class="token keyword">char</span> byte<span class="token punctuation">;</span>        <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">unsigned</span> session_present <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">unsigned</span> reserved <span class="token operator">:</span> <span class="token number">7</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> bits<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> rc<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>按照这个模式，结合 MQTT v3.1.1 的文档，其他数据包的定义也比较简单了。</p><h2 id="SUBSCRIBE-UNSUBSCRIBE-PUBLISH-ACK等"><a href="#SUBSCRIBE-UNSUBSCRIBE-PUBLISH-ACK等" class="headerlink" title="SUBSCRIBE UNSUBSCRIBE PUBLISH ACK等"></a>SUBSCRIBE UNSUBSCRIBE PUBLISH ACK等</h2><p>接下来我们处理 SUBSCRIBE，UNSUBSCRIBE 和 PUBLISH。SUBSCRIBE 必须要使用 SUBACK 来响应，其他的都可以使用通用 ACK，并设置 <strong>typedef</strong> 字段的值来响应。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>src/mqtt.h</span></div><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">mqtt_subscribe</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">union</span> mqtt_header header<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> pkt_id<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> tuples_len<span class="token punctuation">;</span>      <span class="token comment">// 接下来数据元组的长度</span>    <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">unsigned</span> <span class="token keyword">short</span> topic_len<span class="token punctuation">;</span>   <span class="token comment">// 接下来 topic 字符串的长度</span>        <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>topic<span class="token punctuation">;</span>        <span class="token keyword">unsigned</span> qos<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token operator">*</span>tuples<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">mqtt_unsubscribe</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">union</span> mqtt_header header<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> pkt_id<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> tuples_len<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">unsigned</span> <span class="token keyword">short</span> topic_len<span class="token punctuation">;</span>        <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>topic<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token operator">*</span>tuples<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">mqtt_suback</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 针对 SUB 动作的响应</span>    <span class="token keyword">union</span> mqtt_header header<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> pkt_id<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> rcslen<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>rcs<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">mqtt_publish</span> <span class="token punctuation">&#123;</span>               <span class="token comment">// 发布消息</span>    <span class="token keyword">union</span> mqtt_header header<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> pkt_id<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> topiclen<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>topic<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> payloadlen<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>payload<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">mqtt_ack</span> <span class="token punctuation">&#123;</span>                   <span class="token comment">// 通用响应</span>    <span class="token keyword">union</span> mqtt_header header<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> pkt_id<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>剩余的这一类ACK包：</p><ul><li>PUBACK</li><li>PUBREC</li><li>PUBREL</li><li>PUBCOMP</li><li>UNSUBACK</li><li>PINGREQ</li><li>PINGRESP</li><li>DISCONNECT</li></ul><p>因为有相同的结构，所以都可以通过 typedef 来定义，只是语义有所不同。最后一个 DISCONNECT，虽然严格来说不是一个 ACK，但是也有相同的结构。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>src/mqtt.h</span></div><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">mqtt_ack</span> mqtt_puback<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">mqtt_ack</span> mqtt_pubrec<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">mqtt_ack</span> mqtt_pubrel<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">mqtt_ack</span> mqtt_pubcomp<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">mqtt_ack</span> mqtt_unsuback<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">union</span> mqtt_header mqtt_pingreq<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">union</span> mqtt_header mqtt_pingresp<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">union</span> mqtt_header mqtt_disconnect<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="MQTT"><a href="#MQTT" class="headerlink" title="MQTT"></a>MQTT</h2><p>最终我们可以定义一个通用 MQTT 包，包括上面的一切，后续我们所有的 MQTT 数据包都可以用这个结构来表示。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>src/mqtt.h</span></div><code class="language-c"><span class="token keyword">union</span> mqtt_packet <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">mqtt_ack</span> ack<span class="token punctuation">;</span>                    <span class="token comment">// 通用ACK</span>    <span class="token keyword">union</span> mqtt_header header<span class="token punctuation">;</span>               <span class="token comment">// 通用头</span>    <span class="token keyword">struct</span> <span class="token class-name">mqtt_connect</span> connect<span class="token punctuation">;</span>            <span class="token comment">// CONNECT包 (这种包里会包括一个通用头)</span>    <span class="token keyword">struct</span> <span class="token class-name">mqtt_connack</span> connack<span class="token punctuation">;</span>            <span class="token comment">// CONNACK包</span>    <span class="token keyword">struct</span> <span class="token class-name">mqtt_suback</span> suback<span class="token punctuation">;</span>              <span class="token comment">// SUBBACK包</span>    <span class="token keyword">struct</span> <span class="token class-name">mqtt_publish</span> publish<span class="token punctuation">;</span>            <span class="token comment">// PUBLISH包</span>    <span class="token keyword">struct</span> <span class="token class-name">mqtt_subscribe</span> subscribe<span class="token punctuation">;</span>        <span class="token comment">// SUB包</span>    <span class="token keyword">struct</span> <span class="token class-name">mqtt_unsubscribe</span> unsubscribe<span class="token punctuation">;</span>    <span class="token comment">// UNSUB包</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="MQTT函数"><a href="#MQTT函数" class="headerlink" title="MQTT函数"></a>MQTT函数</h1><h2 id="编码解码"><a href="#编码解码" class="headerlink" title="编码解码"></a>编码解码</h2><p>现在我们继续定义一些公共函数。在 <code>src/mqtt.h</code> 中，我们需要考虑其他模块使用 MQTT 协议时会用到哪些函数。</p><p>为了使用 MQTT 协议处理通信，我们基本上需要 4 个函数，其中客户端向服务端有 2 个，服务端向客户端也是 2 个：</p><ul><li>一个编码函数（总之就是把内存里的数据做成二进制流，这里不讨论术语）</li><li>一个解码函数（就是从二进制流恢复成内存结构）</li></ul><p>我们还需要 2 个函数来处理 fixed head 部分中变长的 Remaining Length 字段。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>src/mqtt.h</span></div><code class="language-c"><span class="token comment">// 编码时生成 Remaining Length</span><span class="token keyword">int</span> <span class="token function">mqtt_encode_length</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token class-name">size_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// size_t 指uint32 或 uint64</span><span class="token comment">// 解码时解析 Remaining Length</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">mqtt_decode_length</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 将char * 解码为 mqtt_packet *</span><span class="token keyword">int</span> <span class="token function">unpack_mqtt_packet</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">union</span> mqtt_packet <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 将 mqtt_packet * 编码为 char *</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">pack_mqtt_packet</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">union</span> mqtt_packet <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// unsigned指 unsigned int</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="内存操作"><a href="#内存操作" class="headerlink" title="内存操作"></a>内存操作</h2><p>我们还需要一些工具函数，用来进行基于数据包的内存分配、释放，这里没啥特别的。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>src/mqtt.h</span></div><code class="language-c"><span class="token comment">// 申请内存，制作各种MQTT包</span><span class="token keyword">union</span> mqtt_header <span class="token operator">*</span><span class="token function">mqtt_packet_header</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">mqtt_ack</span> <span class="token operator">*</span><span class="token function">mqtt_packet_ack</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">mqtt_connack</span> <span class="token operator">*</span><span class="token function">mqtt_packet_connack</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token punctuation">,</span>                                         <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token punctuation">,</span>                                         <span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">mqtt_suback</span> <span class="token operator">*</span><span class="token function">mqtt_packet_suback</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span><span class="token punctuation">,</span>                                       <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">mqtt_publish</span> <span class="token operator">*</span><span class="token function">mqtt_packet_publish</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span><span class="token punctuation">,</span> <span class="token class-name">size_t</span><span class="token punctuation">,</span>                                         <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">,</span>                                         <span class="token class-name">size_t</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 释放MQTT包</span><span class="token keyword">void</span> <span class="token function">mqtt_packet_release</span><span class="token punctuation">(</span><span class="token keyword">union</span> mqtt_packet <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="函数实现"><a href="#函数实现" class="headerlink" title="函数实现"></a>函数实现</h1><h2 id="MQTT包编解码接口"><a href="#MQTT包编解码接口" class="headerlink" title="MQTT包编解码接口"></a>MQTT包编解码接口</h2><p>好了，我们现在有一个不错的头文件了，定义了我们通讯协议中的所有内容，现在我们需要实现这些函数了。为了能够实现这些功能，首先我们要定义几个<strong>私有</strong>的帮助函数，用来进行编码和解码的动作。这些函数会被<strong>公有</strong>函数<code>unpack_mqtt_packet</code> 和 <code>pack_mqtt_packet</code> 调用。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>src/mqtt.c</span></div><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"mqtt.h"</span></span><span class="token comment">// 一系列对于具体类型包的 pack unpack 函数</span><span class="token keyword">static</span> <span class="token class-name">size_t</span> <span class="token function">unpack_mqtt_connect</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">,</span>                                  <span class="token keyword">union</span> mqtt_header <span class="token operator">*</span><span class="token punctuation">,</span>                                  <span class="token keyword">union</span> mqtt_packet <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token class-name">size_t</span> <span class="token function">unpack_mqtt_publish</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">,</span>                                  <span class="token keyword">union</span> mqtt_header <span class="token operator">*</span><span class="token punctuation">,</span>                                  <span class="token keyword">union</span> mqtt_packet <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token class-name">size_t</span> <span class="token function">unpack_mqtt_subscribe</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">,</span>                                    <span class="token keyword">union</span> mqtt_header <span class="token operator">*</span><span class="token punctuation">,</span>                                    <span class="token keyword">union</span> mqtt_packet <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token class-name">size_t</span> <span class="token function">unpack_mqtt_unsubscribe</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">,</span>                                      <span class="token keyword">union</span> mqtt_header <span class="token operator">*</span><span class="token punctuation">,</span>                                      <span class="token keyword">union</span> mqtt_packet <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token class-name">size_t</span> <span class="token function">unpack_mqtt_ack</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">,</span>                              <span class="token keyword">union</span> mqtt_header <span class="token operator">*</span><span class="token punctuation">,</span>                              <span class="token keyword">union</span> mqtt_packet <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">pack_mqtt_header</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">union</span> mqtt_header <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">pack_mqtt_ack</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">union</span> mqtt_packet <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">pack_mqtt_connack</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">union</span> mqtt_packet <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">pack_mqtt_suback</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">union</span> mqtt_packet <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">pack_mqtt_publish</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">union</span> mqtt_packet <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="二进制流编解码实现"><a href="#二进制流编解码实现" class="headerlink" title="二进制流编解码实现"></a>二进制流编解码实现</h2><p>在继续实现 <code>src/mqtt.h</code> 上所有定义的函数之前，我们需要实现一些辅助函数，以简化每个接收到的数据包的编码解码过程。</p><p>让我们快速搞定这部分，这一块只是简单的序列化和反序列化操作而已（记得用Big-endian就行）。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>src/pack.h</span></div><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h></span></span><span class="token comment">/* 从数据流中获得数据的方法 */</span><span class="token comment">// bytes -> uint8_t</span><span class="token class-name">uint8_t</span> <span class="token function">unpack_u8</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// bytes -> uint16_t</span><span class="token class-name">uint16_t</span> <span class="token function">unpack_u16</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// bytes -> uint32_t</span><span class="token class-name">uint32_t</span> <span class="token function">unpack_u32</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 读取定义的 len 个字节（用来读取字符串）</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token function">unpack_bytes</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token class-name">size_t</span><span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 读取字符串前面的 ushort 长度，并申请 dest内存块存字符串</span><span class="token class-name">uint16_t</span> <span class="token function">unpack_string16</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token operator">*</span>dest<span class="token punctuation">)</span><span class="token comment">/* 将数据写入数据流的方法 */</span><span class="token comment">// append a uint8_t -> bytes into the bytestring</span><span class="token keyword">void</span> <span class="token function">pack_u8</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token class-name">uint8_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// append a uint16_t -> bytes into the bytestring</span><span class="token keyword">void</span> <span class="token function">pack_u16</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token class-name">uint16_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// append a uint32_t -> bytes into the bytestring</span><span class="token keyword">void</span> <span class="token function">pack_u32</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token class-name">uint32_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 将 len 个字节追加到bytes中</span><span class="token keyword">void</span> <span class="token function">pack_bytes</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>以及相应的实现</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>src/pack.c</span></div><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"pack.h"</span></span><span class="token comment">// Reading data</span><span class="token class-name">uint8_t</span> <span class="token function">unpack_u8</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token operator">*</span>buf<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">uint8_t</span> val <span class="token operator">=</span> <span class="token operator">*</span><span class="token operator">*</span>buf<span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token operator">*</span>buf<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> val<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">uint16_t</span> <span class="token function">unpack_u16</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token operator">*</span>buf<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">uint16_t</span> val<span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>val<span class="token punctuation">,</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token operator">*</span>buf<span class="token punctuation">)</span> <span class="token operator">+=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">ntohs</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">uint32_t</span> <span class="token function">unpack_u32</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token operator">*</span>buf<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">uint32_t</span> val<span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>val<span class="token punctuation">,</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token operator">*</span>buf<span class="token punctuation">)</span> <span class="token operator">+=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">ntohl</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token function">unpack_bytes</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> len<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>str<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>    str<span class="token punctuation">[</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token operator">*</span>buf<span class="token punctuation">)</span> <span class="token operator">+=</span> len<span class="token punctuation">;</span>    <span class="token keyword">return</span> str<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">uint16_t</span> <span class="token function">unpack_string16</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token operator">*</span>dest<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">uint16_t</span> len <span class="token operator">=</span> <span class="token function">unpack_u16</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>dest <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>dest <span class="token operator">=</span> <span class="token function">unpack_bytes</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> len<span class="token punctuation">,</span> <span class="token operator">*</span>dest<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> len<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// Write data</span><span class="token keyword">void</span> <span class="token function">pack_u8</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token operator">*</span><span class="token operator">*</span>buf <span class="token operator">=</span> val<span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token operator">*</span>buf<span class="token punctuation">)</span> <span class="token operator">+=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">pack_u16</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">uint16_t</span> htonsval <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token operator">&amp;</span>htonsval<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token operator">*</span>buf<span class="token punctuation">)</span> <span class="token operator">+=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">pack_u32</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">uint32_t</span> htonlval <span class="token operator">=</span> <span class="token function">htonl</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token operator">&amp;</span>htonlval<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token operator">*</span>buf<span class="token punctuation">)</span> <span class="token operator">+=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">pack_bytes</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>str<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">size_t</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token operator">*</span>buf<span class="token punctuation">,</span> str<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token operator">*</span>buf<span class="token punctuation">)</span> <span class="token operator">+=</span> len<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>这样我们就完成了字节流和数据类型的双向转换工作。</p><h2 id="Remaining-Length编解码实现"><a href="#Remaining-Length编解码实现" class="headerlink" title="Remaining Length编解码实现"></a>Remaining Length编解码实现</h2><p>完成了 <code>pack</code> 部分后，我们需要把他们运用在我们的MQTT包里，首先当然是：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>src/mqtt.c</span></div><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"pack.h"</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>第一步我们可以实现对 Fixed Header 中的 Remaining Length 字段的操作。MQTT文档中提供了这一段实现的伪代码，我们可以仿写一下。</p><p>让我们来看看 Remaining Length 如何用1-4个变长的Byte来表示剩余包的长度。</p><blockquote><p>Remaining Length 表示的是数据包剩余部分的长度，包括 variable header 和 payload。Remaining Length 中表示的长度不包括 Remaining Length 字段本身所占用的长度。</p><p>Remaining Length 的编码使用了一种可变长度编码方案，该方案对 127 以下的值使用单个字节。较大的值则按以下方式处理：每个字节的低 7 位编码数据，高位用于指示是否存在后续字节。因此，每个字节编码 128 个值和一个 “延续位”。Remaining Length 字段的最大字节数为 4。</p></blockquote><p>MQTT的文档已经描述的非常清晰，我们只需要实现。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>src/mqtt.c</span></div><code class="language-c"><span class="token comment">/* * 基于 MQTT v3.1.1，Fixed Header 中的 Remaining Length 最大为4byte */</span><span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">int</span> MAX_LEN_BYTES <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token comment">/* * 根据数据包长度制作变长的 Remaining Length * return Remaining Length 的字节长度 * buf Remaining Length 的数据流 * len Remaining Length 应该表示的值（可变头+载荷总长度） */</span><span class="token keyword">int</span> <span class="token function">mqtt_encode_length</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 字节长度</span>    <span class="token keyword">int</span> bytes <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bytes <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">></span> MAX_LEN_BYTES<span class="token punctuation">)</span>            <span class="token keyword">return</span> bytes<span class="token punctuation">;</span>        <span class="token keyword">short</span> d <span class="token operator">=</span> len <span class="token operator">%</span> <span class="token number">128</span><span class="token punctuation">;</span>        len <span class="token operator">/=</span> <span class="token number">128</span><span class="token punctuation">;</span>        <span class="token comment">// len > 0 表示还有后续位</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            d <span class="token operator">|=</span> <span class="token number">128</span><span class="token punctuation">;</span> <span class="token comment">// 标记最高位</span>        buf<span class="token punctuation">[</span>bytes<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>len <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> bytes<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* * 解析数据流中的 Remaing Length 并将指针移动到下一个位置 * return Remaining Length 的值 * buf Remaining Length 的数据流 * * TODO Handle case where multiplier > 128 * 128 * 128 */</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">mqtt_decode_length</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>buf<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> c<span class="token punctuation">;</span>    <span class="token comment">// 乘数</span>    <span class="token keyword">int</span> multiplier <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">// 值</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> value <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>        c <span class="token operator">=</span> <span class="token operator">*</span><span class="token operator">*</span>buf<span class="token punctuation">;</span>        value <span class="token operator">+=</span> <span class="token punctuation">(</span>c <span class="token operator">&amp;</span> <span class="token number">127</span><span class="token punctuation">)</span> <span class="token operator">*</span> multiplier<span class="token punctuation">;</span>        multiplier <span class="token operator">*=</span> <span class="token number">128</span><span class="token punctuation">;</span>        <span class="token comment">// 后移一位</span>        <span class="token punctuation">(</span><span class="token operator">*</span>buf<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token comment">// 当没有后续位标识时结束</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">&amp;</span> <span class="token number">128</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> value<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="CONNECT-解码实现"><a href="#CONNECT-解码实现" class="headerlink" title="CONNECT 解码实现"></a>CONNECT 解码实现</h2><p>好了，现在我们可以完整的解析 Fixed Header 了，接下来我们试着解码 CONNECT 包。</p><p>CONNECT 是一个有很多flags的包，而且长度仅次于 PUBLISH 包。</p><p>CONNECT 包的内容包括：</p><ul><li>Fixed Header 中的 MQTT type + Flags，高4位（MQTT type）（称为<strong>MSB</strong>）的值是<code>1</code>，表示<code>Connect type</code>，低4位（Flags）（<strong>LSB</strong>）保留</li><li>Fixed Header 中的变长 Remaining Length，表示剩余部分的长度</li><li>Variable Header，由四个字段组成：<ul><li>Protocol Name</li><li>Protocol Level</li><li>Connect Flags</li><li>Keep Alive</li></ul></li><li>可能存在或者不存在的 payload（基于 Connect Flags 的设置）</li></ul><blockquote><p>Protocol Name 是 UTF-8 编码的大写字符串 “MQTT”，这个字段的长度和内容在未来版本的MQTT协议中都不会再改变。</p></blockquote><p>所以 3.1.1 版本的 Protocol Name 就是 “MQTT”，我们也不用去管旧版本的名字是什么了。</p><p>Connect flags 为一个byte，包含了一些关于客户端行为以及是否有 payload 段存在的标识：</p><table><thead><tr><th align="center">Connect flags 中的字段</th><th align="center">大小</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">Username flag</td><td align="center">1bit</td><td align="center">表示用户名存在与否</td></tr><tr><td align="center">Password flag</td><td align="center">1bit</td><td align="center">表示密码存在与否</td></tr><tr><td align="center">Will retain</td><td align="center">1bit</td><td align="center">表示遗嘱是否保留</td></tr><tr><td align="center">Will QoS</td><td align="center">2bit</td><td align="center">表示遗嘱的QOS等级</td></tr><tr><td align="center">Will flag</td><td align="center">1bit</td><td align="center">表示遗嘱存在与否</td></tr><tr><td align="center">Clean Session</td><td align="center">1bit</td><td align="center">表示是否为新链接</td></tr></tbody></table><p>Connect flags的最高位保留，其他所有位都被当作bool值初始化（除了Will QoS），这些bool值在 payload 部分也有相应的字段。比如当 Username 和 Password 的值为1，那么在 payload 中会有 2byte 的 username length，紧随其后的就是 username 字符串，Password也是相同的道理。</p><p>为了说明这件事，假设我们收到了这样一个 CONNECT 包：</p><ul><li>Connect flags 中的 username 和 password 都置为1</li><li>username &#x3D; “hello”</li><li>password &#x3D; “nacho”</li><li>client ID &#x3D; “danzan”</li></ul><p>那么这个数据包应该长这样：</p><table><thead><tr><th>字段</th><th align="center">大小</th><th align="center">偏移量</th><th>描述</th></tr></thead><tbody><tr><td>Packet type + Falgs</td><td align="center">1</td><td align="center">0</td><td>类型为<code>Connect type</code> <code>0x01</code>，Flags为空</td></tr><tr><td>Length</td><td align="center">1</td><td align="center">1</td><td>后续总长度32Byte，小于127，所以可以用1Byte表示</td></tr><tr><td>Protocol name length</td><td align="center">2</td><td align="center">2</td><td>协议名长度，值固定为 <code>0x04</code></td></tr><tr><td>Protocol name</td><td align="center">4</td><td align="center">4</td><td>‘M’ ‘Q’ ‘T’ ‘T’</td></tr><tr><td>Protocol level</td><td align="center">1</td><td align="center">8</td><td>对于MQTT 3.1.1 此字段值为 <code>0x04</code></td></tr><tr><td>Connect flags</td><td align="center">1</td><td align="center">9</td><td>包括 <code>Username</code>, <code>password</code>, <code>will retain</code>, <code>will QoS</code>, <code>will flag</code>, <code>clean session</code></td></tr><tr><td>Keepalive</td><td align="center">2</td><td align="center">10</td><td>ushort，保活时间，单位秒，最大值65536（18小时12分15秒）</td></tr><tr><td>Client ID length</td><td align="center">2</td><td align="center">12</td><td>ushort, 此例中值为<code>0x06</code> (danzan)</td></tr><tr><td>Client ID</td><td align="center">6</td><td align="center">14</td><td>‘d’ ‘a’ ‘n’ ‘z’ ‘a’ ‘n’</td></tr><tr><td>Username length</td><td align="center">2</td><td align="center">20</td><td>ushort, 此例中值为<code>0x05</code> (hello)</td></tr><tr><td>Username</td><td align="center">5</td><td align="center">22</td><td>‘h’ ‘e’ ‘l’ ‘l’ ‘o’</td></tr><tr><td>Password length</td><td align="center">2</td><td align="center">27</td><td>ushort,  此例中值为<code>0x05</code> (nacho)</td></tr><tr><td>Password</td><td align="center">5</td><td align="center">29</td><td>‘n’ ‘a’ ‘c’ ‘h’ ‘o’</td></tr></tbody></table><p>例如因为 Will Flags 被置为0，所以我们不需要在 <code>payload</code> 中解析这个字段（也压根没有），上例中我们要解析的内容总共就是包括 Fixed Header 在内的 34个byte。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>src/mqtt.c</span></div><code class="language-c"><span class="token comment">/* * CONNECT 解码函数 * return Remaing Length 的值 * buf 数据流，从变长长度开始 * hdr 已经解码好的头部 * pkt 返回的解码后数据包 */</span><span class="token keyword">static</span> <span class="token class-name">size_t</span> <span class="token function">unpack_mqtt_connect</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span>                                  <span class="token keyword">union</span> mqtt_header <span class="token operator">*</span>hdr<span class="token punctuation">,</span>                                  <span class="token keyword">union</span> mqtt_packet <span class="token operator">*</span>pkt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 制作一个connect结构体，并且用已经解码好的头部赋值</span>    <span class="token comment">// 此处有一个已经解码好的头部，是因为数据作为二进制流进来的时候，肯定是要先解码出头部，然后再根据包类型分到不同的函数里做进一步解码的</span>    <span class="token keyword">struct</span> <span class="token class-name">mqtt_connect</span> connect <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span>header <span class="token operator">=</span> <span class="token operator">*</span>hdr <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// 将这个结构体赋值到pkt</span>    pkt<span class="token operator">-></span>connect <span class="token operator">=</span> connect<span class="token punctuation">;</span>    <span class="token comment">// 初始指针指向buf的首部</span>    <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>init <span class="token operator">=</span> buf<span class="token punctuation">;</span>    <span class="token comment">/*     * 获得后续的变长总长度,同时将指针移动到 protocol name     */</span>    <span class="token class-name">size_t</span> len <span class="token operator">=</span> <span class="token function">mqtt_decode_length</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 暂时忽略协议名称、保留字段等等，所以直接向后移动8byte</span>    <span class="token comment">// 这里 init 直接+8，暗示了变长长度字段的长度是1byte，所以才能+8后指向Connect flags</span>    buf <span class="token operator">=</span> init <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">;</span>    <span class="token comment">// 读取 Connect flags</span>    pkt<span class="token operator">-></span>connect<span class="token punctuation">.</span>byte <span class="token operator">=</span> <span class="token function">unpack_u8</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 读取 keepalive</span>    pkt<span class="token operator">-></span>connect<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>keepalive <span class="token operator">=</span> <span class="token function">unpack_u16</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 读取 CID 长度（如果有CID则>0，否则为0）</span>    <span class="token class-name">uint16_t</span> cid_len <span class="token operator">=</span> <span class="token function">unpack_u16</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 如果有，则读取CID</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cid_len <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        pkt<span class="token operator">-></span>connect<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>client_id <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>cid_len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">unpack_bytes</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> cid_len<span class="token punctuation">,</span>                     pkt<span class="token operator">-></span>connect<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>client_id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 如果有，则读取遗嘱</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pkt<span class="token operator">-></span>connect<span class="token punctuation">.</span>bits<span class="token punctuation">.</span>will <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">unpack_string16</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pkt<span class="token operator">-></span>connect<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>will_topic<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">unpack_string16</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pkt<span class="token operator">-></span>connect<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>will_message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 如果有，则读取用户名</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pkt<span class="token operator">-></span>connect<span class="token punctuation">.</span>bits<span class="token punctuation">.</span>username <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">unpack_string16</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pkt<span class="token operator">-></span>connect<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 如果有，则读取密码</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pkt<span class="token operator">-></span>connect<span class="token punctuation">.</span>bits<span class="token punctuation">.</span>password <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">unpack_string16</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pkt<span class="token operator">-></span>connect<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> len<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><!-- read --><h2 id="PUBLISH-解码实现"><a href="#PUBLISH-解码实现" class="headerlink" title="PUBLISH 解码实现"></a>PUBLISH 解码实现</h2><p>以下是 PUBLISH 包的结构：</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">|   Bit    |  7  |  6  |  5  |  4  |  3  |  2  |  1  |   0    |  &lt;-- Fixed Header|----------|-----------------------|--------------------------|| Byte 1   |      MQTT type 3      | dup |    QoS    | retain ||----------|--------------------------------------------------|| Byte 2   |                                                  ||  .       |               Remaining Length                   ||  .       |                                                  || Byte 5   |                                                  ||----------|--------------------------------------------------|  &lt;-- Variable Header| Byte 6   |                Topic len MSB                     || Byte 7   |                Topic len LSB                     ||-------------------------------------------------------------|| Byte 8   |                                                  ||   .      |                Topic name                        || Byte N   |                                                  ||----------|--------------------------------------------------|| Byte N+1 |            Packet Identifier MSB                 || Byte N+2 |            Packet Identifier LSB                 ||----------|--------------------------------------------------|  &lt;-- Payload| Byte N+3 |                   Payload                        || Byte N+M |                                                  |<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>仅当 QoS level &gt; 0 时，存在 Packet identifier MSB 和 LSB。当 QoS 被设置为 <em>at most once</em> （值为0）时，没有必要存在 packet ID。</p><p>Payload部分的长度通过 Remaining Length 减去其他所有内容计算得来。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>src/mqtt.c</span></div><code class="language-c"><span class="token comment">/* * PUBLISH 解码函数 * return Remaing Length 的值 * buf 数据流，从变长长度开始 * hdr 已经解码好的头部 * pkt 返回的解码后数据包 */</span><span class="token keyword">static</span> <span class="token class-name">size_t</span> <span class="token function">unpack_mqtt_publish</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span>                                  <span class="token keyword">union</span> mqtt_header <span class="token operator">*</span>hdr<span class="token punctuation">,</span>                                  <span class="token keyword">union</span> mqtt_packet <span class="token operator">*</span>pkt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 创建 PUBLISH 包并且使用已经解码好的 header 赋值</span>    <span class="token keyword">struct</span> <span class="token class-name">mqtt_publish</span> publish <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span>header <span class="token operator">=</span> <span class="token operator">*</span>hdr <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// 准备给返回值提供这个 PUBLISH 包</span>    pkt<span class="token operator">-></span>publish <span class="token operator">=</span> publish<span class="token punctuation">;</span>    <span class="token comment">// 通过变长的 Remaing Length 字段获取剩余部分的长度</span>    <span class="token class-name">size_t</span> len <span class="token operator">=</span> <span class="token function">mqtt_decode_length</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 获得 topiclen 和 topic 内容</span>    pkt<span class="token operator">-></span>publish<span class="token punctuation">.</span>topiclen <span class="token operator">=</span> <span class="token function">unpack_string16</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pkt<span class="token operator">-></span>publish<span class="token punctuation">.</span>topic<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 将 len 赋值, 并视为 payload 长度</span>    <span class="token class-name">uint16_t</span> message_len <span class="token operator">=</span> len<span class="token punctuation">;</span>    <span class="token comment">// 如果 QoS > 0, 需要读取pkt_id</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>publish<span class="token punctuation">.</span>header<span class="token punctuation">.</span>bits<span class="token punctuation">.</span>qos <span class="token operator">></span> AT_MOST_ONCE<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        pkt<span class="token operator">-></span>publish<span class="token punctuation">.</span>pkt_id <span class="token operator">=</span> <span class="token function">unpack_u16</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 此时payload长度需要减去pkt_id</span>        message_len <span class="token operator">-=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// payload 长度需要减去 topic_len 字段长度和 topic 字段实际长度</span>    message_len <span class="token operator">-=</span> <span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span><span class="token punctuation">)</span> <span class="token operator">+</span> topic_len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 这里是正确的 payloadlen</span>    pkt<span class="token operator">-></span>publish<span class="token punctuation">.</span>payloadlen <span class="token operator">=</span> message_len<span class="token punctuation">;</span>    <span class="token comment">// 读取 payload</span>    pkt<span class="token operator">-></span>publish<span class="token punctuation">.</span>payload <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>message_len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">unpack_bytes</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> message_len<span class="token punctuation">,</span> pkt<span class="token operator">-></span>publish<span class="token punctuation">.</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> len<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="SUBSCRIBE-和-UNSUBSCRIBE-解码实现"><a href="#SUBSCRIBE-和-UNSUBSCRIBE-解码实现" class="headerlink" title="SUBSCRIBE 和 UNSUBSCRIBE 解码实现"></a>SUBSCRIBE 和 UNSUBSCRIBE 解码实现</h2><p>SUBSCRIBE 包和 UNSUBSCRIBE 包的结构非常相似。他们的 payload 部分都是一个 topic 相关的元组列表，其中 SUBSCRIBE 的元组是 (topic_len, topic_filter, qos)，而 UNSUBSCRIBE 是 (topic_len, topic_filter)。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>src/mqtt.c</span></div><code class="language-c"><span class="token comment">/* * SUBSCRIBE 解码函数 * return Remaing Length 的值 * buf 数据流，从变长长度开始 * hdr 已经解码好的头部 * pkt 返回的解码后数据包 */</span><span class="token keyword">static</span> <span class="token class-name">size_t</span> <span class="token function">unpack_mqtt_subscribe</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span>                                    <span class="token keyword">union</span> mqtt_header <span class="token operator">*</span>hdr<span class="token punctuation">,</span>                                    <span class="token keyword">union</span> mqtt_packet <span class="token operator">*</span>pkt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 创建 SUBSCRIBE 包并且使用已经解码好的 header 赋值</span>    <span class="token keyword">struct</span> <span class="token class-name">mqtt_subscribe</span> subscribe <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span>header <span class="token operator">=</span> <span class="token operator">*</span>hdr <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// 通过变长的 Remaing Length 字段获取剩余部分的长度</span>    <span class="token class-name">size_t</span> len <span class="token operator">=</span> <span class="token function">mqtt_decode_length</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">size_t</span> remaining_bytes <span class="token operator">=</span> len<span class="token punctuation">;</span>    <span class="token comment">// 读取pkt_id</span>    subscribe<span class="token punctuation">.</span>pkt_id <span class="token operator">=</span> <span class="token function">unpack_u16</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    remaining_bytes <span class="token operator">-=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/*     * 订阅频道列表, 由一系列三元组构成     *  - topic length 主题字符串长度     *  - topic filter (string) 主题filter     *  - qos     */</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>remaining_bytes <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 减去2byte, 是topic length的空间</span>        remaining_bytes <span class="token operator">-=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 给这个主题字符串分配内存</span>        subscribe<span class="token punctuation">.</span>tuples <span class="token operator">=</span> <span class="token function">realloc</span><span class="token punctuation">(</span>subscribe<span class="token punctuation">.</span>tuples<span class="token punctuation">,</span>                                   <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>subscribe<span class="token punctuation">.</span>tuples<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获得主题字符串长度, 获得主题字符串内容</span>        subscribe<span class="token punctuation">.</span>tuples<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>topic_len <span class="token operator">=</span>            <span class="token function">unpack_string16</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token operator">&amp;</span>subscribe<span class="token punctuation">.</span>tuples<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>topic<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 减去主题字符串实际占用的空间</span>        remaining_bytes <span class="token operator">-=</span> subscribe<span class="token punctuation">.</span>tuples<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>topic_len<span class="token punctuation">;</span>        <span class="token comment">// 获得主题qos</span>        subscribe<span class="token punctuation">.</span>tuples<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>qos <span class="token operator">=</span> <span class="token function">unpack_u8</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 减去主题 qos 的空间</span>        len <span class="token operator">-=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 操作下一个主题</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 记录订阅主题数</span>    subscribe<span class="token punctuation">.</span>tuples_len <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token comment">// 记录到 mqtt_packet</span>    pkt<span class="token operator">-></span>subscribe <span class="token operator">=</span> subscribe<span class="token punctuation">;</span>    <span class="token keyword">return</span> len<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* * UNSUBSCRIBE 解码函数 * return Remaing Length 的值 * buf 数据流，从变长长度开始 * hdr 已经解码好的头部 * pkt 返回的解码后数据包 */</span><span class="token keyword">static</span> <span class="token class-name">size_t</span> <span class="token function">unpack_mqtt_unsubscribe</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span>                                      <span class="token keyword">union</span> mqtt_header <span class="token operator">*</span>hdr<span class="token punctuation">,</span>                                      <span class="token keyword">union</span> mqtt_packet <span class="token operator">*</span>pkt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">mqtt_unsubscribe</span> unsubscribe <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span>header <span class="token operator">=</span> <span class="token operator">*</span>hdr <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">/*     * Second byte of the fixed header, contains the length of remaining bytes     * of the connect packet     */</span>    <span class="token class-name">size_t</span> len <span class="token operator">=</span> <span class="token function">mqtt_decode_length</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">size_t</span> remaining_bytes <span class="token operator">=</span> len<span class="token punctuation">;</span>    <span class="token comment">/* Read packet id */</span>    unsubscribe<span class="token punctuation">.</span>pkt_id <span class="token operator">=</span> <span class="token function">unpack_u16</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    remaining_bytes <span class="token operator">-=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/*     * Read in a loop all remaining bytes specified by len of the Fixed Header.     * From now on the payload consists of 2-tuples formed by:     *  - topic length     *  - topic filter (string)     */</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>remaining_bytes <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/* Read length bytes of the first topic filter */</span>        remaining_bytes <span class="token operator">-=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/* We have to make room for additional incoming tuples */</span>        unsubscribe<span class="token punctuation">.</span>tuples <span class="token operator">=</span> <span class="token function">realloc</span><span class="token punctuation">(</span>unsubscribe<span class="token punctuation">.</span>tuples<span class="token punctuation">,</span>                                     <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>unsubscribe<span class="token punctuation">.</span>tuples<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        unsubscribe<span class="token punctuation">.</span>tuples<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>topic_len <span class="token operator">=</span>            <span class="token function">unpack_string16</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token operator">&amp;</span>unsubscribe<span class="token punctuation">.</span>tuples<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>topic<span class="token punctuation">)</span><span class="token punctuation">;</span>        remaining_bytes <span class="token operator">-=</span> unsubscribe<span class="token punctuation">.</span>tuples<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>topic_len<span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    unsubscribe<span class="token punctuation">.</span>tuples_len <span class="token operator">=</span> i<span class="token punctuation">;</span>    pkt<span class="token operator">-></span>unsubscribe <span class="token operator">=</span> unsubscribe<span class="token punctuation">;</span>    <span class="token keyword">return</span> len<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="ACK-解码实现"><a href="#ACK-解码实现" class="headerlink" title="ACK 解码实现"></a>ACK 解码实现</h2><p>最终到了 ACK 包，MQTT 协议中没有设计通用 ACK，但是实际上每个 ACK 包的数据结构都是一样的，有一个 Fixed Header 和一个 packet_id组成。</p><p>MQTT 协议中有如下几种类型的ACK:</p><ul><li>PUBACK</li><li>PUBREC</li><li>PUBREL</li><li>PUBCOMP</li><li>UNSUBACK</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>src/mqtt.c</span></div><code class="language-c"><span class="token comment">/* * ACK 解码函数 * return Remaing Length 的值 * buf 数据流，从变长长度开始 * hdr 已经解码好的头部 * pkt 返回的解码后数据包 */</span><span class="token keyword">static</span> <span class="token class-name">size_t</span> <span class="token function">unpack_mqtt_ack</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span>                              <span class="token keyword">union</span> mqtt_header <span class="token operator">*</span>hdr<span class="token punctuation">,</span>                              <span class="token keyword">union</span> mqtt_packet <span class="token operator">*</span>pkt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 创建 ACK 包并且使用已经解码好的 header 赋值</span>    <span class="token keyword">struct</span> <span class="token class-name">mqtt_ack</span> ack <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span>header <span class="token operator">=</span> <span class="token operator">*</span>hdr <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// 通过变长的 Remaing Length 字段获取剩余部分的长度</span>    <span class="token class-name">size_t</span> len <span class="token operator">=</span> <span class="token function">mqtt_decode_length</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// pkt_id</span>    ack<span class="token punctuation">.</span>pkt_id <span class="token operator">=</span> <span class="token function">unpack_u16</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    pkt<span class="token operator">-></span>ack <span class="token operator">=</span> ack<span class="token punctuation">;</span>    <span class="token keyword">return</span> len<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="MQTT包解码实现"><a href="#MQTT包解码实现" class="headerlink" title="MQTT包解码实现"></a>MQTT包解码实现</h2><p>现在我们已经实现了 <code>unpack_mqtt_packet</code> 需要的所有工具函数，接下来我们先定义一个解码函数的接口，然后使用一个静态数组来索引所有的解码函数，这里我们直接使用 <code>Control Packet type</code> 的值来作为数组中的索引。</p><p>需要注意的是，<code>DISCONNECT</code> <code>PINGREQ</code> <code>PINGRESP</code> 这三种包只有一个byte，所以我们不需要编写解码工具函数。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>src/mqtt.c</span></div><code class="language-c"><span class="token comment">// 解码函数接口</span><span class="token keyword">typedef</span> <span class="token class-name">size_t</span> <span class="token function">mqtt_unpack_handler</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">,</span>                                   <span class="token keyword">union</span> mqtt_header <span class="token operator">*</span><span class="token punctuation">,</span>                                   <span class="token keyword">union</span> mqtt_packet <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 所有解码函数的列表, 索引值和包类型对应</span><span class="token keyword">static</span> mqtt_unpack_handler <span class="token operator">*</span>unpack_handlers<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token constant">NULL</span><span class="token punctuation">,</span>    unpack_mqtt_connect<span class="token punctuation">,</span>    <span class="token constant">NULL</span><span class="token punctuation">,</span>    unpack_mqtt_publish<span class="token punctuation">,</span>    unpack_mqtt_ack<span class="token punctuation">,</span>    unpack_mqtt_ack<span class="token punctuation">,</span>    unpack_mqtt_ack<span class="token punctuation">,</span>    unpack_mqtt_ack<span class="token punctuation">,</span>    unpack_mqtt_subscribe<span class="token punctuation">,</span>    <span class="token constant">NULL</span><span class="token punctuation">,</span>    unpack_mqtt_unsubscribe<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// MQTT 包解码入口</span><span class="token keyword">int</span> <span class="token function">unpack_mqtt_packet</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token keyword">union</span> mqtt_packet <span class="token operator">*</span>pkt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> rc <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 第一个 byte 是 fiexd header 中的 mqttType + flags</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> type <span class="token operator">=</span> <span class="token operator">*</span>buf<span class="token punctuation">;</span>    <span class="token comment">// 第一个byte可以被作为header</span>    <span class="token keyword">union</span> mqtt_header header <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">.</span>byte <span class="token operator">=</span> type    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// 对于这些包暂时无需解码</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>header<span class="token punctuation">.</span>bits<span class="token punctuation">.</span>type <span class="token operator">==</span> DISCONNECT        <span class="token operator">||</span> header<span class="token punctuation">.</span>bits<span class="token punctuation">.</span>type <span class="token operator">==</span> PINGREQ        <span class="token operator">||</span> header<span class="token punctuation">.</span>bits<span class="token punctuation">.</span>type <span class="token operator">==</span> PINGRESP<span class="token punctuation">)</span>        pkt<span class="token operator">-></span>header <span class="token operator">=</span> header<span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token comment">// 通过包类型找到解码函数, 执行解码操作后返回rc, 此时rc等于具体解码函数的返回值</span>        rc <span class="token operator">=</span> unpack_handlers<span class="token punctuation">[</span>header<span class="token punctuation">.</span>bits<span class="token punctuation">.</span>type<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">++</span>buf<span class="token punctuation">,</span> <span class="token operator">&amp;</span>header<span class="token punctuation">,</span> pkt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> rc<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>从零开始MQTT broker的第一部分就这样结束了，我们做了两个模块，一个根据 OASIS 定义的标准描述MQTT协议结构，另一个则用来处理编解码操作。</p><p>此时我们的文件结构是这样的：</p><figure><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">sol/ ├── src/ │    ├── mqtt.h │    ├── mqtt.c │    ├── pack.h │    └── pack.c ├── CHANGELOG ├── CMakeLists.txt ├── COPYING └── README.md<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>网络编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络编程</tag>
      
      <tag>翻译</tag>
      
      <tag>物联网</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[翻译] n2n 常见问题</title>
    <link href="/2023/12/07/translate-n2n-faq.html"/>
    <url>/2023/12/07/translate-n2n-faq.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>原文 <a href="https://github.com/ntop/n2n/blob/dev/doc/Faq.md">n2n Frequently Asked Questions</a><br><a href="https://github.com/ntop/n2n">项目地址</a></p></blockquote><h1 id="n2n-常见问题"><a href="#n2n-常见问题" class="headerlink" title="n2n 常见问题"></a>n2n 常见问题</h1><span id="more"></span><h2 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h2><h3 id="哪里能找到Windows系统的n2n软件？"><a href="#哪里能找到Windows系统的n2n软件？" class="headerlink" title="哪里能找到Windows系统的n2n软件？"></a>哪里能找到Windows系统的n2n软件？</h3><p>我们没有在<code>release</code>中发布Windows版本的n2n，但是我们的自动化测试流程会创建他们。你可以点击项目界面中的 <code>Actions</code>，选择 <code>Testing</code>，进入最近一次的运行实例，在界面最下方的 <code>Artifacts</code> 处下载 <code>binaries</code>，其中就包括了编译好的windows版本<code>n2n</code>。通常来说你可以使用 <code>x86_64-w64-mingw32\usr\sbin</code> 路径下的版本。</p><p>此外，正如我们的<a href="https://github.com/ntop/n2n#further-readings-and-related-projects">README</a>中提到的，luckytu 一直在更新<code>n2n</code>的<a href="https://github.com/lucktu/n2n">Windows版本</a>，你也可以在他那里直接下载编译后的软件。</p><h2 id="Supernode"><a href="#Supernode" class="headerlink" title="Supernode"></a>Supernode</h2><h3 id="我想部署一个私有的，有密码保护的supernode，需要怎么设置？"><a href="#我想部署一个私有的，有密码保护的supernode，需要怎么设置？" class="headerlink" title="我想部署一个私有的，有密码保护的supernode，需要怎么设置？"></a>我想部署一个私有的，有密码保护的supernode，需要怎么设置？</h3><p>你可以直接配置 <code>community.list</code> 文件，在其中设置一个 <code>&lt;community name&gt;</code> (输入单行文本即可) ，然后把这个 <code>&lt;community name&gt;</code> 当作您的密码。</p><p>在启动 <code>supernode</code> 时，记得加上 <code>-c &lt;community file&gt;</code> 参数指定配置文件。这样，只有设置了 <code>-c &lt;community name&gt;</code> 的 <code>edge</code> 可以使用 <code>supernode</code>。</p><p>此时，在您的 <code>edge</code> 向 <code>supernode</code> 注册的过程中，<code>&lt;community name&gt;</code> 是明文传递的。如果您想要对传输过程进行加密，需要在<strong>所有</strong> <code>edge</code> 节点启动时添加 <code>-H</code> 参数。</p><p>另外，请参阅 <code>n2n</code> 附带的 <code>community.list</code> 文件以了解该文件的高级使用。</p><p>除了这个访问障碍之外，您可能希望在边缘使用有效负载加密 -A_。</p><p>只有边缘（而不是超级节点）能够解密有效负载数据。</p><p>因此，即使任何人都能够打破超级节点的访问障碍，有效负载仍然受到有效负载加密的保护，请参阅此文档了解详细信息。</p><p>除了上述的这些安全手段之外，您还可以在 <code>edge</code> 添加 <code>-A_</code> 参数来加密传输的数据。数据的加密和解密都是 <code>edge</code> 进行的，所以即使是 <code>supernode</code> 节点也无法解密数据内容。因此，即使你的 <code>supernode</code> 节点被黑客入侵，你的数据内容依然是被加密算法保护的。更多细节可以参考这一篇关于加密的<a href="https://github.com/ntop/n2n/blob/dev/doc/Crypto.md">文档</a>。</p><h3 id="我可以在supernode查看接入的edge列表吗？"><a href="#我可以在supernode查看接入的edge列表吗？" class="headerlink" title="我可以在supernode查看接入的edge列表吗？"></a>我可以在supernode查看接入的edge列表吗？</h3><p>可以，<code>supernode</code> 通过UDP提供了基本的管理接口，默认端口是5645，可以通过 <code>-t</code> 参数修改。</p><p>只需要发送一个新的行就可以查询当前状态，例如，在 <code>supernode</code> <strong>本机</strong>（远程链接不可以）上按下[ENTER]键，然后输入如下命令：</p><p><code>netcat -u localhost 5645</code></p><h3 id="支持多个supernode节点的部署方式吗？"><a href="#支持多个supernode节点的部署方式吗？" class="headerlink" title="支持多个supernode节点的部署方式吗？"></a>支持多个supernode节点的部署方式吗？</h3><p>支持，这篇<a href="https://github.com/ntop/n2n/blob/dev/doc/Federation.md">文档</a>描述了如何部署多个 <code>supernode</code> 节点来提升网络的可用性。</p><h3 id="supernode可以监听多个UDP端口吗？"><a href="#supernode可以监听多个UDP端口吗？" class="headerlink" title="supernode可以监听多个UDP端口吗？"></a>supernode可以监听多个UDP端口吗？</h3><p><code>supernode</code> 本身只支持监听一个端口，但是你应该可以通过做NAT的方式将多个端口映射到同一个端口上，例如：</p><p><code>sudo iptables -t nat -A PREROUTING -i &lt;network interface name&gt; -d &lt;supernode&#39;s ip address&gt; -p udp --dport &lt;additional port number&gt; -j REDIRECT --to-ports &lt;regular supernode port number&gt;</code></p><p>这条命令可以作为 <code>ExecStartPost=</code> 添加到 <code>supernode</code> 的 <code>.service</code> 文件中（不需要加sudo），如果需要映射多个端口，可以多加几行。</p><h3 id="这个报错是怎么回事-“process-udp-dropped-a-packet-with-seemingly-encrypted-header-for-which-no-matching-community-which-uses-encrypted-headers-was-found”？"><a href="#这个报错是怎么回事-“process-udp-dropped-a-packet-with-seemingly-encrypted-header-for-which-no-matching-community-which-uses-encrypted-headers-was-found”？" class="headerlink" title="这个报错是怎么回事 “process_udp dropped a packet with seemingly encrypted header for which no matching community which uses encrypted headers was found”？"></a>这个报错是怎么回事 “process_udp dropped a packet with seemingly encrypted header for which no matching community which uses encrypted headers was found”？</h3><p>这条报错的意思是 <code>supernode</code> 收到了一个无法使用的数据包。<code>supernode</code> 先将这个包视为一个未加密的包来处理，如果处理失败的话，<code>supernode</code> 会<strong>假定</strong>这是一个加密的数据包，之后 <code>supernode</code> 会尝试所有可以生成key的 <code>community</code> （排除明确没有加密的<code>community</code>）。如果任何 <code>community</code> 的key都无法解开此数据包，就会产生这条报错。</p><p>如果所有 <code>edge</code> 的 <code>-H</code> 参数配置是相同的（都有 <code>-H</code> 或者都没有 <code>-H</code> ），并且重启 <code>supernode</code> 后依然报错，最大的可能是 <code>supernode</code> 或者 <code>edge</code> 的版本不一致，导致了数据包格式不一致。</p><p>因此，请确保所有 <code>edge</code> <strong>和</strong> <code>supernode</code> 具有完全相同的版本，例如：最新的 <code>_dev_</code> 分支。</p><h2 id="Edge"><a href="#Edge" class="headerlink" title="Edge"></a>Edge</h2><h3 id="如何查看p2p链接的状态？"><a href="#如何查看p2p链接的状态？" class="headerlink" title="如何查看p2p链接的状态？"></a>如何查看p2p链接的状态？</h3><p><code>edge</code> 同样提供了一个本地的UDP管理端口，包括了 <em>peers</em> 这种已经建立的p2p链接，还有 <em>pending peers</em> 这种通过 <code>supernode</code> 中转的链接。</p><p><code>edge</code> 的默认管理端口号是 5644，可以通过 <code>-t</code> 参数修改。可以在<strong>本机</strong>通过此命令查看：</p><p><code>netcat -u localhost 5644</code></p><p>发送空行就可以查看链接信息，对于其他的命令行功能，请通过 <code>help</code> 查看。</p><h3 id="edge-反复报错-“Authentication-error-MAC-or-IP-address-already-in-use-or-not-released-yet-by-supernode”。是什么问题？"><a href="#edge-反复报错-“Authentication-error-MAC-or-IP-address-already-in-use-or-not-released-yet-by-supernode”。是什么问题？" class="headerlink" title="edge 反复报错 “Authentication error. MAC or IP address already in use or not released yet by supernode”。是什么问题？"></a>edge 反复报错 “Authentication error. MAC or IP address already in use or not released yet by supernode”。是什么问题？</h3><p>Edge 遇到了 n2n 的防欺骗保护。</p><p>它可以防止一个边缘的身份（MAC 和 IP 地址）在原始边缘仍然在线时被其他边缘冒充，请参阅一些详细信息。</p><p>大多数情况下，有两种情况可以触发此操作：</p><p>这是触发了 <code>n2n</code> 的防欺骗保护机制，这个机制可以防止已经在线的 <code>edge</code> 节点被其他人冒充，这篇<a href="Authentication.md">文档</a>有更详细的描述。总之，大部分情况下，有两种可能触发这个机制：</p><p>你使用的 MAC 地址或 IP 地址已经被使用了，修改这些参数就可以了。</p><p>如果一个 <code>edge</code> 非正常退出，例如被 <code>kill -9 ...</code> 或 <code>kill -SIGKILL ...</code>，那么这个 <code>edge</code> 可能没有机会通知 <code>supernode</code> 取消注册，因此 <code>supernode</code> 仍然认为此 <code>edge</code> 在线，此时具有相同 MAC 或 IP 地址的注册就不会成功。</p><p><code>supernode</code> 记录 <code>edge</code> 的超时时间是两分钟，所以可以等待两分钟，或者换不同的 MAC 和 IP 地址注册。</p><p>基本上来说，不管是 <code>CTRL</code> + <code>C</code> 或是 <code>kill -SIGTERM ...</code> 或者 <code>kill -SIGINT ...</code> 或者 <code>kill ...</code> 不带9，都可以正常的结束 <code>edge</code>，在管理接口下发 <code>stop</code> 命令也可以停止 <code>edge</code> ，所以大部分情况下无需使用 <code>kill -9 ...</code>。</p>]]></content>
    
    
    <categories>
      
      <category>网络工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络编程</tag>
      
      <tag>网络工具</tag>
      
      <tag>翻译</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用n2n连接不同局域网设备</title>
    <link href="/2023/12/06/n2nBeginner.html"/>
    <url>/2023/12/06/n2nBeginner.html</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>目的是想在办公室使用家里的服务器</p><p>家里有不固定的公网IP，办公室有固定的公网IP，因此打算使用办公室服务器做Server</p><p>为什么不用frp？：因为想获得一个完整的网络服务，而frp只能做端口映射，如果开发过程中新增端口，需要修改frp就很麻烦</p><span id="more"></span><h1 id="n2n简介"><a href="#n2n简介" class="headerlink" title="n2n简介"></a>n2n简介</h1><p><code>n2n</code> 是一个开源项目，地址在这里：</p><p><a href="https://github.com/ntop/n2n">https://github.com/ntop/n2n</a></p><p><code>n2n</code> 是一个二层VPN技术，他能在家里的服务器和办公室的服务器之间创建一个局域网链接</p><p><code>n2n</code> 网络由 <code>supernode</code> 和 <code>edge</code> 组成，可以简单理解为同一 <code>supernode</code> 下的所有 <code>edge</code> 都处在同一个局域网中。</p><h1 id="网络环境"><a href="#网络环境" class="headerlink" title="网络环境"></a>网络环境</h1><h2 id="办公室网络："><a href="#办公室网络：" class="headerlink" title="办公室网络："></a>办公室网络：</h2><ul><li>网段：192.168.34.0&#x2F;24</li><li>网关：192.168.34.1</li><li>网关公网地址：88.88.88.88</li><li>服务器地址：192.168.34.194</li></ul><h2 id="家庭网络"><a href="#家庭网络" class="headerlink" title="家庭网络"></a>家庭网络</h2><ul><li>网段：192.168.0.0&#x2F;24</li><li>网关：192.168.0.1</li><li>网关公网地址：不固定</li><li>服务器地址：192.168.0.12</li></ul><h2 id="规划n2n网络"><a href="#规划n2n网络" class="headerlink" title="规划n2n网络"></a>规划n2n网络</h2><p>由于办公室有固定的公网地址，就由办公室服务器充当 <code>supernode</code>，同时家庭服务器和办公室服务器都是此 <code>supernode</code> 下的 <code>edge</code><br><code>n2n</code> 会形成一个新的局域网，规划如下：</p><ul><li>网段：10.0.34.0&#x2F;24</li><li>网关：无</li><li>办公室服务器：10.0.34.21</li><li>家庭服务器：10.0.34.41</li></ul><h1 id="实施"><a href="#实施" class="headerlink" title="实施"></a>实施</h1><h2 id="下载安装n2n"><a href="#下载安装n2n" class="headerlink" title="下载安装n2n"></a>下载安装n2n</h2><p>在办公室服务器和家庭服务器都下载并安装 <code>n2n</code>：</p><p><a href="https://github.com/ntop/n2n/releases">https://github.com/ntop/n2n/releases</a></p><p>安装完成后，服务器中会自动生成两个服务 <code>supernode</code> 和 <code>edge</code></p><p>配置文件位于 <code>/etc/n2n/</code></p><p><img src="/2023/12/06/n2nBeginner/installVerify.png"></p><h2 id="配置办公室服务器"><a href="#配置办公室服务器" class="headerlink" title="配置办公室服务器"></a>配置办公室服务器</h2><p>办公室服务器需要承担三个职能：充当 <code>supernode</code>，充当 <code>edge</code>，转发其他办公室设备到家庭服务器的网络包</p><h3 id="配置supernode"><a href="#配置supernode" class="headerlink" title="配置supernode"></a>配置supernode</h3><p>配置 <code>/etc/n2n/community.list</code> 文件，指定community名称</p><figure><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><div class="caption"><span>community.list</span></div><code class="language-text">com8888 # community名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>复制 <code>supernode.conf.sample</code> 文件，并修改配置内容</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>bash</span></div><code class="language-bash"><span class="token function">cp</span> /etc/n2n/supernode.conf.sample /etc/n2n/supernode.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>bash</span></div><code class="language-bash"><span class="token function">vi</span> /etc/n2n/supernode.conf  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-conf" data-language="conf"><div class="caption"><span>supernode.conf</span></div><code class="language-conf">-p&#x3D;7777 # 指定supernode服务端口-c&#x3D;&#x2F;etc&#x2F;n2n&#x2F;community.list # 指定引用的community文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>启动supernode</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>shell</span></div><code class="language-bash">systemctl <span class="token builtin class-name">enable</span> supernodesystemctl start supernode<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>之后可以看到 <code>supernode</code> 已经启动，并且在7777端口提供服务：</p><p><img src="/2023/12/06/n2nBeginner/supernodeVerify.png"></p><h3 id="配置edge"><a href="#配置edge" class="headerlink" title="配置edge"></a>配置edge</h3><p>配置 <code>edge</code> 使办公室服务器成为 <code>n2n</code> 网络的成员</p><p>复制 <code>edge.conf.sample</code> 文件，并修改配置内容</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>bash</span></div><code class="language-bash"><span class="token function">cp</span> /etc/n2n/edge.conf.sample /etc/n2n/edge.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>bash</span></div><code class="language-bash"><span class="token function">vi</span> /etc/n2n/edge.conf  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-conf" data-language="conf"><div class="caption"><span>edge.conf</span></div><code class="language-conf">-d&#x3D;n2n0 # 指定虚拟网卡名称-c&#x3D;com8888 # community名称-k&#x3D;888888 # 通讯加密密钥-a&#x3D;10.0.34.21 # 在n2n网络中的地址-l&#x3D;127.0.0.1:7777 # supernode服务地址-r # 允许通过n2n转发数据包<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>启动edge</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>shell</span></div><code class="language-bash">systemctl <span class="token builtin class-name">enable</span> edgesystemctl start edge<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>启动后，可以看到 <code>n2n</code> 已经添加了虚拟网卡：</p><p><img src="/2023/12/06/n2nBeginner/edgeVerify.png"></p><h3 id="开启数据包转发功能"><a href="#开启数据包转发功能" class="headerlink" title="开启数据包转发功能"></a>开启数据包转发功能</h3><p>需要通过办公室服务器转发办公室其他电脑到家庭服务器的流量，因此需要在办公室服务器上开启数据包转发功能</p><p>需要将 <code>/etc/sysctl.conf</code> 文件中的 <code>net.ipv4.ip_forward</code> 修改为 1</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>bash</span></div><code class="language-bash"><span class="token function">vi</span> /etc/sysctl.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-conf" data-language="conf"><div class="caption"><span>sysctl.conf</span></div><code class="language-conf">...net.ipv4.ip_forward&#x3D;1...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="配置办公室网关"><a href="#配置办公室网关" class="headerlink" title="配置办公室网关"></a>配置办公室网关</h2><h3 id="添加静态路由"><a href="#添加静态路由" class="headerlink" title="添加静态路由"></a>添加静态路由</h3><p>其他办公室电脑没有到 <code>n2n</code> 网络的路由，因此数据包会发送到办公室网关</p><p>此时需要配置办公室网关，添加一条指向 <code>n2n</code> 网络的静态路由，下一条为办公室服务器的办公网地址</p><p><img src="/2023/12/06/n2nBeginner/gwRoute.png"></p><h2 id="配置家庭服务器"><a href="#配置家庭服务器" class="headerlink" title="配置家庭服务器"></a>配置家庭服务器</h2><h3 id="配置edge，设置自动添加路由"><a href="#配置edge，设置自动添加路由" class="headerlink" title="配置edge，设置自动添加路由"></a>配置edge，设置自动添加路由</h3><p>家庭服务器的 <code>edge</code> 安装配置过程与办公室服务器的 <code>edge</code> 大致相同，但有两点需要注意：</p><ol><li>无需添加<code>-r</code>参数，因为家庭服务器不需要将来自其他设备的包转发到<code>n2n</code>网络</li><li>需要添加<code>-n</code>参数，这样<code>edge</code>启动时会自动产生一条通过<code>n2n</code>网络到达办公室网络的路由</li></ol><figure><div class="code-wrapper"><pre class="line-numbers language-conf" data-language="conf"><div class="caption"><span>edge.conf</span></div><code class="language-conf">-d&#x3D;n2n0 # 指定虚拟网卡名称-c&#x3D;com8888 # community名称-k&#x3D;888888 # 通讯加密密钥-a&#x3D;10.0.34.41 # 在n2n网络中的地址-l&#x3D;88.88.88.88:17777 # supernode公网地址-n&#x3D;192.168.34.0&#x2F;24:10.0.34.21<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h1><h2 id="n2n网络验证"><a href="#n2n网络验证" class="headerlink" title="n2n网络验证"></a>n2n网络验证</h2><p>使用 <code>n2n</code> 网络地址从办公室服务器ping家庭服务器，或从家庭服务器ping办公室服务器，成功</p><p>此时数据包的实际流向是 办公室服务器-&gt;办公室网关-&gt;运营商网络-&gt;家庭网关-&gt;家庭服务器</p><p>由于 <code>n2n</code> vpn的配置，此时可以认为办公室服务器和家庭服务器处在同一局域网下，tracert也仅一跳可达</p><p><img src="/2023/12/06/n2nBeginner/trace.png"></p><h2 id="办公室电脑到家庭服务器网络验证"><a href="#办公室电脑到家庭服务器网络验证" class="headerlink" title="办公室电脑到家庭服务器网络验证"></a>办公室电脑到家庭服务器网络验证</h2><p>办公室电脑ping家庭服务器，成功</p><p>此时数据包流向是 办公室电脑-&gt;办公室网关-&gt;办公室服务器-&gt;家庭服务器，其中办公室服务器到家庭服务器是 <code>n2n</code> 虚拟链路</p><p>tracert三跳可达</p><p><img src="/2023/12/06/n2nBeginner/trace2.png"></p><h2 id="家庭服务器到办公室电脑"><a href="#家庭服务器到办公室电脑" class="headerlink" title="家庭服务器到办公室电脑"></a>家庭服务器到办公室电脑</h2><p>家庭服务器ping办公室电脑，成功</p><p>此时数据包流向是 家庭服务器-&gt;办公室服务器-&gt;办公室电脑，其中家庭服务器到办公室服务器是 <code>n2n</code> 虚拟链路</p><p>tracert两跳可达</p><p><img src="/2023/12/06/n2nBeginner/trace3.png"></p>]]></content>
    
    
    <categories>
      
      <category>网络工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络编程</tag>
      
      <tag>网络工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>工作周报可视化</title>
    <link href="/2023/12/05/weekreport2chart.html"/>
    <url>/2023/12/05/weekreport2chart.html</url>
    
    <content type="html"><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>这个项目是一个纯粹的小玩具，起因是我公司的工作周报都是 <code>.doc</code> 格式存储的，现在到年底了，我又比较想知道我一年都干了哪些工作。显而易见的一个方式就是提取所有周报文字内容做词频分析。</p><span id="more"></span><h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p>完成之后的效果还算不错，源码也放在了github上：</p><p><a href="https://github.com/vitsumoc/weekreport2chart">https://github.com/vitsumoc/weekreport2chart</a></p><p>提取一段时间的工作周报内容，生成词云和河流图</p><p><img src="/2023/12/05/weekreport2chart/wordcloud.png"></p><p><img src="/2023/12/05/weekreport2chart/river.png"></p><p>可以直接过滤低频词汇，或手动操作删除某些虚词、连词等</p><p><img src="/2023/12/05/weekreport2chart/disable.png"></p><h1 id="相关库"><a href="#相关库" class="headerlink" title="相关库"></a>相关库</h1><p>使用libreoffice将doc转为docx</p><p>使用结巴分词分词：<a href="https://github.com/fxsjy/jieba">https://github.com/fxsjy/jieba</a></p><p>使用wordcloudjs词云：<a href="https://wordcloud2-js.timdream.org/#love">https://wordcloud2-js.timdream.org/#love</a></p><p>使用echarts河流图</p>]]></content>
    
    
    <categories>
      
      <category>小玩具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>小玩具</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在golang中使用lua</title>
    <link href="/2023/12/05/golua.html"/>
    <url>/2023/12/05/golua.html</url>
    
    <content type="html"><![CDATA[<p>使用<code>gopher-lua</code>，在golang中使用lua。<code>gopher-lua</code> 项目地址：</p><p><a href="https://github.com/yuin/gopher-lua">https://github.com/yuin/gopher-lua</a></p><span id="more"></span><p>使用示例仓库地址：</p><p><a href="https://github.com/vitsumoc/my-golua">https://github.com/vitsumoc/my-golua</a></p><p>示例列表：</p><ul><li>最基础的用法</li><li>基础数据类型</li><li>在lua中调用go方法</li><li>在go中使用lua协程</li><li>示范如何手动开启模块</li><li>在lua中使用go模块</li><li>在golang中调用lua方法</li><li>在lua中使用golang数据</li><li>通过context控制停止</li><li>在有协程的情况下使用context控制</li><li>共享lua文件字节码, 减少开销</li><li>通过go协程跑lua的示例 可以把ch带到lua中 和相关限制</li><li>在lua中使用ch的例子</li><li>lua虚拟机池</li><li>在golang中提供钩子, 使lua可以注册脚本, 在脚本中获得并修改用户数据</li></ul>]]></content>
    
    
    <categories>
      
      <category>小玩具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
      <tag>库</tag>
      
      <tag>小玩具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Systemd管理自启动</title>
    <link href="/2023/12/01/linuxBoot.html"/>
    <url>/2023/12/01/linuxBoot.html</url>
    
    <content type="html"><![CDATA[<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><p>启动服务</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>shell</span></div><code class="language-bash">systemctl start service-name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><span id="more"></span><p>停止服务</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>shell</span></div><code class="language-bash">systemctl stop service-name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>查看服务状态</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>shell</span></div><code class="language-bash">systemctl status service-name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>设置开机自启动</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>shell</span></div><code class="language-bash">systemctl <span class="token builtin class-name">enable</span> service-name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>停止开机自启动</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>shell</span></div><code class="language-bash">systemctl disable service-name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h1 id="服务注册"><a href="#服务注册" class="headerlink" title="服务注册"></a>服务注册</h1><p>在 <code>/etc/systemd/system</code> 路径下，创建 <code>service-name.service</code> 文件，格式如下：</p><figure><div class="code-wrapper"><pre class="line-numbers language-ini" data-language="ini"><div class="caption"><span>service-name.service</span></div><code class="language-ini"><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">Unit</span><span class="token punctuation">]</span></span><span class="token comment"># 服务名称</span><span class="token key attr-name">Description</span> <span class="token punctuation">=</span> <span class="token value attr-value">xxxx server</span><span class="token key attr-name">After</span> <span class="token punctuation">=</span> <span class="token value attr-value">network.target syslog.target</span><span class="token key attr-name">Wants</span> <span class="token punctuation">=</span> <span class="token value attr-value">network.target</span><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">Service</span><span class="token punctuation">]</span></span><span class="token key attr-name">Type</span> <span class="token punctuation">=</span> <span class="token value attr-value">simple</span><span class="token comment"># 启动命令</span><span class="token key attr-name">ExecStart</span> <span class="token punctuation">=</span> <span class="token value attr-value">/home/start.sh</span><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">Install</span><span class="token punctuation">]</span></span><span class="token key attr-name">WantedBy</span> <span class="token punctuation">=</span> <span class="token value attr-value">multi-user.target</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>豆知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>豆知识</tag>
      
      <tag>环境配置</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AI入门笔记（3）——感知器</title>
    <link href="/2023/12/01/AiForBeginners-3.html"/>
    <url>/2023/12/01/AiForBeginners-3.html</url>
    
    <content type="html"><![CDATA[<h1 id="课程"><a href="#课程" class="headerlink" title="课程"></a>课程</h1><p><a href="https://github.com/microsoft/AI-For-Beginners/blob/main/lessons/3-NeuralNetworks/03-Perceptron/README.md">https://github.com/microsoft/AI-For-Beginners/blob/main/lessons/3-NeuralNetworks/03-Perceptron/README.md</a></p><p>这是微软提供的AI-For-Beginners课程第三课，介绍了什么是感知器（Perceptron）</p><span id="more"></span><h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><p>感知器<code>Perceptron</code>是一种二元分类模型，总是能根据输入产生一个+1或-1的输出。</p><p>感知器进行计算时需要权重<code>weight</code>的参与，权重会导致感知器产生正确或错误的结果，训练的过程既是修改权重不断增加结果的正确率。</p><p>感知器只能解决线性分类的问题，如果一个问题无法被线性分类，感知器就不会收敛，例如异或问题。</p><h1 id="随堂作业"><a href="#随堂作业" class="headerlink" title="随堂作业"></a>随堂作业</h1><p>在本课的作业中，需要使用 <code>Jupyter</code> 构建代码+文档的环境，使用 <code>sklearn</code> 创造测试数据，使用 <code>numPy</code> 表示和处理数据，使用 <code>matpoltlib</code> 绘制数据图像，使用 <code>ipywidgets</code> 交互式的查看训练过程。</p><h2 id="训练感知器分类数据"><a href="#训练感知器分类数据" class="headerlink" title="训练感知器分类数据"></a>训练感知器分类数据</h2><p><a href="https://github.com/vitsumoc/exercise-AI-Beginner/blob/main/3-Perceptron/perceptron.py">https://github.com/vitsumoc/exercise-AI-Beginner/blob/main/3-Perceptron/perceptron.py</a></p><p>作业中使用代码实现了训练感知器的过程：</p><ol><li>创建数据集合，分类为训练数据和测试数据</li><li>将训练数据分类为pos和neg</li><li>初始化权重值</li><li>设置训练次数并开始训练，每次选择随机的数据进行训练</li><li>在每次训练错误时，使用本次选择的数据对权重进行调整</li><li>使用测试数据验证训练后的权重值</li></ol><h2 id="感知器的局限性"><a href="#感知器的局限性" class="headerlink" title="感知器的局限性"></a>感知器的局限性</h2><p><a href="https://github.com/vitsumoc/exercise-AI-Beginner/blob/main/3-Perceptron/xor.ipynb">https://github.com/vitsumoc/exercise-AI-Beginner/blob/main/3-Perceptron/xor.ipynb</a></p><p>感知器只能解决线性分类问题，对于无法使用一条直线分类的问题，往往就无法很好的收敛。</p><p>作业中的异或问题就是一个完全无法收敛的例子。</p><h2 id="使用感知器-MNIST-数据识别手写数字"><a href="#使用感知器-MNIST-数据识别手写数字" class="headerlink" title="使用感知器 + MNIST 数据识别手写数字"></a>使用感知器 + MNIST 数据识别手写数字</h2><p><a href="https://github.com/vitsumoc/exercise-AI-Beginner/blob/main/3-Perceptron/mnist.ipynb">https://github.com/vitsumoc/exercise-AI-Beginner/blob/main/3-Perceptron/mnist.ipynb</a></p><p>在这个作业中使用感知器区分手写数字图像。</p><p>使用PCA降低特征的维度，分析感知器训练结果差异的原因。</p><h2 id="训练感知器识别任何手写数字"><a href="#训练感知器识别任何手写数字" class="headerlink" title="训练感知器识别任何手写数字"></a>训练感知器识别任何手写数字</h2><p>这个作业中需要拓展上一个作业的功能，训练10个不同的感知器，用来识别0-9全部的数字。</p><p><a href="https://github.com/vitsumoc/exercise-AI-Beginner/blob/main/3-Perceptron/anyNum.ipynb">https://github.com/vitsumoc/exercise-AI-Beginner/blob/main/3-Perceptron/anyNum.ipynb</a></p><p>参考上一个作业的方式，训练了10组weights，来判断一个数字是或不是特定的数字。</p><p>每个感知器训练10000次，最终正确率 74.7%。</p>]]></content>
    
    
    <categories>
      
      <category>AI学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AI</tag>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jupyter入门笔记</title>
    <link href="/2023/11/30/pythonJupyter.html"/>
    <url>/2023/11/30/pythonJupyter.html</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>网站 <a href="https://jupyter.org/">https://jupyter.org/</a></p><p>jupyter 项目提供了可供计算的记事本，将代码、资源、交互式计算与文档结合。</p><span id="more"></span><h1 id="试用"><a href="#试用" class="headerlink" title="试用"></a>试用</h1><p>可以通过试用界面 <a href="https://jupyter.org/try">https://jupyter.org/try</a> 直接体验jupyter，建立大致的了解。</p><h1 id="打开"><a href="#打开" class="headerlink" title="打开"></a>打开</h1><p><code>jupyter lab</code> 在指定路径打开jupyter lab，程序会占用8888端口，可通过<code>http://localhost:8888/</code>访问图形化界面。</p><h1 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h1><p>jupyter会将执行程序的目录作为文件系统的根目录。</p><p>jupyter的文件后缀为 <code>.ipynb</code> 其中可以混合代码、文档、输出。</p><p>可以直接在 <code>jupyter lab</code> 提供的浏览器界面中新建、编辑、删除文件。</p><h1 id="内容编辑"><a href="#内容编辑" class="headerlink" title="内容编辑"></a>内容编辑</h1><p>以下是一个混合了 文档、代码、输出、图像、组件的文件截图，因为导出的PDF不支持组件，所以组件输出为文本。</p><p><img src="/2023/11/30/pythonJupyter/JupyterLab-1.png"></p><p><img src="/2023/11/30/pythonJupyter/JupyterLab-2.png"></p><p><img src="/2023/11/30/pythonJupyter/JupyterLab-3.png"></p><p>github也支持 <code>.ipynb</code> 格式，但同样不支持组件，这是上方图片文件的原始内容：</p><p><a href="https://github.com/vitsumoc/exercise-AI-Beginner/blob/main/PyBeginner/jupyter.ipynb">https://github.com/vitsumoc/exercise-AI-Beginner/blob/main/PyBeginner/jupyter.ipynb</a></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>豆知识</tag>
      
      <tag>笔记</tag>
      
      <tag>python</tag>
      
      <tag>库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Matplotlib入门笔记</title>
    <link href="/2023/11/29/pythonMatplotlib.html"/>
    <url>/2023/11/29/pythonMatplotlib.html</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>网站 <a href="https://matplotlib.org/stable/">https://matplotlib.org/stable/</a></p><p>Matplotlib 是一个用于创建静态、动画和交互式可视化的综合库。</p><p>本文是学习 Matplotlib 过程中的笔记，所有内容都来自官方文档：<a href="https://matplotlib.org/stable/users/explain/quick_start.html">https://matplotlib.org/stable/users/explain/quick_start.html</a></p><span id="more"></span><h1 id="1-入门示例"><a href="#1-入门示例" class="headerlink" title="1. 入门示例"></a>1. 入门示例</h1><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>python</span></div><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib <span class="token keyword">as</span> mpl<span class="token keyword">def</span> <span class="token function">e1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  x <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>pi<span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span>  y <span class="token operator">=</span> np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>x<span class="token punctuation">)</span>  fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span><span class="token punctuation">)</span>  ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>e1<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="2-窗口、图像和绘制"><a href="#2-窗口、图像和绘制" class="headerlink" title="2. 窗口、图像和绘制"></a>2. 窗口、图像和绘制</h1><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>python</span></div><code class="language-python"><span class="token keyword">def</span> <span class="token function">e2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 创建一个只有一个 axes 的 figure</span>  fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 在 axes 上 plot 一些数据</span>  ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>e2<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="3-figure-的构成部分"><a href="#3-figure-的构成部分" class="headerlink" title="3. figure 的构成部分"></a>3. figure 的构成部分</h1><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>python</span></div><code class="language-python"><span class="token comment"># figure 是一个绘图窗口</span><span class="token comment"># axes 是一副数据图像</span><span class="token comment"># axis 是坐标轴</span><span class="token keyword">def</span> <span class="token function">e3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 一个没有 axes 的 figure</span>  fig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 只有一个 axes 的图像</span>  fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 2 * 2 布局的图像</span>  fig<span class="token punctuation">,</span> axs <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment"># 左一右二布局</span>  fig<span class="token punctuation">,</span> axs <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplot_mosaic<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'left'</span><span class="token punctuation">,</span> <span class="token string">'right_top'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'left'</span><span class="token punctuation">,</span> <span class="token string">'right_bottom'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>e3<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="4-输入数据类型"><a href="#4-输入数据类型" class="headerlink" title="4. 输入数据类型"></a>4. 输入数据类型</h1><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>python</span></div><code class="language-python"><span class="token keyword">def</span> <span class="token function">e4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># plot 接受 np.array np.ma.masked_array np.asarray 三种类型的输入</span>  <span class="token comment"># 如果不是此类数据，需要先进行处理</span>  b <span class="token operator">=</span> np<span class="token punctuation">.</span>matrix<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  b_asarray <span class="token operator">=</span> np<span class="token punctuation">.</span>asarray<span class="token punctuation">(</span>b<span class="token punctuation">)</span>  <span class="token comment"># 对于一些已经准备好的对象(字典)数据, 也可以用下面的方式输入</span>  np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">19680801</span><span class="token punctuation">)</span>  <span class="token comment"># seed the random number generator.</span>  <span class="token comment"># a 是 0-50 的整数 用于每个数据的 x 坐标</span>  <span class="token comment"># b 是 50个随机数 用于每个数据的 y 坐标 (50个0-1的随机数 * 10 再加 x坐标)</span>  <span class="token comment"># c 随机颜色 50个50以下的整数</span>  <span class="token comment"># d 是随机尺寸</span>  data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'a'</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token string">'c'</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token string">'d'</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>  data<span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">10</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>  data<span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token builtin">abs</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span>  fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2.7</span><span class="token punctuation">)</span><span class="token punctuation">,</span> layout<span class="token operator">=</span><span class="token string">'constrained'</span><span class="token punctuation">)</span>  <span class="token comment"># 离散数据 使用字典中的内容赋值</span>  ax<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'c'</span><span class="token punctuation">,</span> s<span class="token operator">=</span><span class="token string">'d'</span><span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>  ax<span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">'entry a'</span><span class="token punctuation">)</span>  ax<span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">'entry b'</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>e4<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="5-接口风格"><a href="#5-接口风格" class="headerlink" title="5. 接口风格"></a>5. 接口风格</h1><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>python</span></div><code class="language-python"><span class="token comment"># mplib提供了两种接口风格 一是显示的获取各层对象并调用 二是直接使用plt搞定一切</span><span class="token comment"># 显示风格的例子</span><span class="token keyword">def</span> <span class="token function">e5_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  x <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>  <span class="token comment"># 示意数据</span>  <span class="token comment"># 获得 figure 和 axes</span>  fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2.7</span><span class="token punctuation">)</span><span class="token punctuation">,</span> layout<span class="token operator">=</span><span class="token string">'constrained'</span><span class="token punctuation">)</span>  <span class="token comment"># 一次二次和三次函数</span>  ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> x<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'linear'</span><span class="token punctuation">)</span>  ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> x<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'quadratic'</span><span class="token punctuation">)</span>  ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> x<span class="token operator">**</span><span class="token number">3</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'cubic'</span><span class="token punctuation">)</span>  <span class="token comment"># 指定xy的label</span>  ax<span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">'x label'</span><span class="token punctuation">)</span>  ax<span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">'y label'</span><span class="token punctuation">)</span>  <span class="token comment"># axes 的title</span>  ax<span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">"Simple Plot"</span><span class="token punctuation">)</span>  <span class="token comment"># 添加一个图例 用来显示各plot的label</span>  ax<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 隐式风格的例子 效果和显示风格完全相同</span><span class="token keyword">def</span> <span class="token function">e5_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  x <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2.7</span><span class="token punctuation">)</span><span class="token punctuation">,</span> layout<span class="token operator">=</span><span class="token string">'constrained'</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> x<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'linear'</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> x<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'quadratic'</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> x<span class="token operator">**</span><span class="token number">3</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'cubic'</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'x label'</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'y label'</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"Simple Plot"</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>e5_1<span class="token punctuation">(</span><span class="token punctuation">)</span>e5_2<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="6-制作辅助函数"><a href="#6-制作辅助函数" class="headerlink" title="6. 制作辅助函数"></a>6. 制作辅助函数</h1><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>python</span></div><code class="language-python"><span class="token comment"># 制作工具函数, 避免代码重复</span><span class="token keyword">def</span> <span class="token function">e6_plotter</span><span class="token punctuation">(</span>ax<span class="token punctuation">,</span> data1<span class="token punctuation">,</span> data2<span class="token punctuation">,</span> param_dict<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    A helper function to make a graph.    """</span>    out <span class="token operator">=</span> ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>data1<span class="token punctuation">,</span> data2<span class="token punctuation">,</span> <span class="token operator">**</span>param_dict<span class="token punctuation">)</span>    <span class="token keyword">return</span> out<span class="token keyword">def</span> <span class="token function">e6</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  data1<span class="token punctuation">,</span> data2<span class="token punctuation">,</span> data3<span class="token punctuation">,</span> data4 <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>  <span class="token comment"># make 4 random data sets</span>  fig<span class="token punctuation">,</span> <span class="token punctuation">(</span>ax1<span class="token punctuation">,</span> ax2<span class="token punctuation">)</span> <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2.7</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  e6_plotter<span class="token punctuation">(</span>ax1<span class="token punctuation">,</span> data1<span class="token punctuation">,</span> data2<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'marker'</span><span class="token punctuation">:</span> <span class="token string">'x'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  e6_plotter<span class="token punctuation">(</span>ax2<span class="token punctuation">,</span> data3<span class="token punctuation">,</span> data4<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'marker'</span><span class="token punctuation">:</span> <span class="token string">'o'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>e6<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="7-样式"><a href="#7-样式" class="headerlink" title="7. 样式"></a>7. 样式</h1><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>python</span></div><code class="language-python"><span class="token keyword">def</span> <span class="token function">e7</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  data1<span class="token punctuation">,</span> data2 <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>  fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2.7</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  x <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>data1<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># plot 直接跟样式参数</span>  ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> np<span class="token punctuation">.</span>cumsum<span class="token punctuation">(</span>data1<span class="token punctuation">)</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'blue'</span><span class="token punctuation">,</span> linewidth<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> linestyle<span class="token operator">=</span><span class="token string">'--'</span><span class="token punctuation">)</span>  l<span class="token punctuation">,</span> <span class="token operator">=</span> ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> np<span class="token punctuation">.</span>cumsum<span class="token punctuation">(</span>data2<span class="token punctuation">)</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'orange'</span><span class="token punctuation">,</span> linewidth<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment"># plot 后对返回内容进行样式赋值</span>  l<span class="token punctuation">.</span>set_linestyle<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>e7<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="8-标记"><a href="#8-标记" class="headerlink" title="8. 标记"></a>8. 标记</h1><h2 id="基础标记"><a href="#基础标记" class="headerlink" title="基础标记"></a>基础标记</h2><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>python</span></div><code class="language-python"><span class="token keyword">def</span> <span class="token function">e8_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  mu<span class="token punctuation">,</span> sigma <span class="token operator">=</span> <span class="token number">115</span><span class="token punctuation">,</span> <span class="token number">15</span>  <span class="token comment"># x 是一万个值的列表 randn 会给出一组正态分布的随机数结果</span>  x <span class="token operator">=</span> mu <span class="token operator">+</span> sigma <span class="token operator">*</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span>  fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2.7</span><span class="token punctuation">)</span><span class="token punctuation">,</span> layout<span class="token operator">=</span><span class="token string">'constrained'</span><span class="token punctuation">)</span>  <span class="token comment"># the histogram of the data</span>  <span class="token comment"># 直方图参数: x-数据内容 50-柱数量 density-返回概率密度 </span>  n<span class="token punctuation">,</span> bins<span class="token punctuation">,</span> patches <span class="token operator">=</span> ax<span class="token punctuation">.</span>hist<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> density<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> facecolor<span class="token operator">=</span><span class="token string">'C0'</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.75</span><span class="token punctuation">)</span>  <span class="token comment"># 轴和图的标题</span>  ax<span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">'Length [cm]'</span><span class="token punctuation">)</span>  ax<span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">'Probability'</span><span class="token punctuation">)</span>  ax<span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'Aardvark lengths\n (not really)'</span><span class="token punctuation">)</span>  <span class="token comment"># 文本 (使用了数学符号)</span>  ax<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token number">75</span><span class="token punctuation">,</span> <span class="token number">.025</span><span class="token punctuation">,</span> <span class="token string">r'$\mu=115,\ \sigma=15$'</span><span class="token punctuation">)</span>  <span class="token comment"># 轴定义</span>  ax<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">175</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.03</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 网线</span>  ax<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>e8_1<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="标记图上的点"><a href="#标记图上的点" class="headerlink" title="标记图上的点"></a>标记图上的点</h2><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>python</span></div><code class="language-python"><span class="token keyword">def</span> <span class="token function">e8_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2.7</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  t <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">5.0</span><span class="token punctuation">,</span> <span class="token number">0.01</span><span class="token punctuation">)</span>  s <span class="token operator">=</span> np<span class="token punctuation">.</span>cos<span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>pi <span class="token operator">*</span> t<span class="token punctuation">)</span>  line<span class="token punctuation">,</span> <span class="token operator">=</span> ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>t<span class="token punctuation">,</span> s<span class="token punctuation">,</span> lw<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment"># 使用点位、文本位、箭头设置来标记点</span>  ax<span class="token punctuation">.</span>annotate<span class="token punctuation">(</span><span class="token string">'local max'</span><span class="token punctuation">,</span> xy<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> xytext<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            arrowprops<span class="token operator">=</span><span class="token builtin">dict</span><span class="token punctuation">(</span>facecolor<span class="token operator">=</span><span class="token string">'black'</span><span class="token punctuation">,</span> shrink<span class="token operator">=</span><span class="token number">0.05</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># y轴limit</span>  ax<span class="token punctuation">.</span>set_ylim<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>e8_2<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="添加-Legend用以区分数据"><a href="#添加-Legend用以区分数据" class="headerlink" title="添加 Legend用以区分数据"></a>添加 Legend用以区分数据</h2><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>python</span></div><code class="language-python"><span class="token keyword">def</span> <span class="token function">e8_3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  data1<span class="token punctuation">,</span> data2<span class="token punctuation">,</span> data3 <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>  fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2.7</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>data1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data1<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'data1'</span><span class="token punctuation">)</span>  ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>data2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data2<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'data2'</span><span class="token punctuation">)</span>  ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>data3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data3<span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'data3'</span><span class="token punctuation">)</span>  ax<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>e8_3<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="9-轴的比例和刻度"><a href="#9-轴的比例和刻度" class="headerlink" title="9. 轴的比例和刻度"></a>9. 轴的比例和刻度</h1><h2 id="轴的比例定义"><a href="#轴的比例定义" class="headerlink" title="轴的比例定义"></a>轴的比例定义</h2><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>python</span></div><code class="language-python"><span class="token keyword">def</span> <span class="token function">e9_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 100 个随机数</span>  data1 <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>  <span class="token comment"># 两个 axes</span>  fig<span class="token punctuation">,</span> axs <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2.7</span><span class="token punctuation">)</span><span class="token punctuation">,</span> layout<span class="token operator">=</span><span class="token string">'constrained'</span><span class="token punctuation">)</span>  <span class="token comment"># x轴为随机数的数量</span>  xdata <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>data1<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># y数据为 10 ** data1</span>  data <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">**</span>data1  <span class="token comment"># axes 使用折线图</span>  axs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>plot<span class="token punctuation">(</span>xdata<span class="token punctuation">,</span> data<span class="token punctuation">)</span>  <span class="token comment"># axes 使用对数坐标 图像内容接近 data1 的原始值</span>  axs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_yscale<span class="token punctuation">(</span><span class="token string">'log'</span><span class="token punctuation">)</span>  axs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>plot<span class="token punctuation">(</span>xdata<span class="token punctuation">,</span> data<span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>e9_1<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="手动操作-axis-上的-ticks"><a href="#手动操作-axis-上的-ticks" class="headerlink" title="手动操作 axis 上的 ticks"></a>手动操作 axis 上的 ticks</h2><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>python</span></div><code class="language-python"><span class="token keyword">def</span> <span class="token function">e9_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  data1 <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>  xdata <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>data1<span class="token punctuation">)</span><span class="token punctuation">)</span>  fig<span class="token punctuation">,</span> axs <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> layout<span class="token operator">=</span><span class="token string">'constrained'</span><span class="token punctuation">)</span>  axs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>plot<span class="token punctuation">(</span>xdata<span class="token punctuation">,</span> data1<span class="token punctuation">)</span>  axs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'Automatic ticks'</span><span class="token punctuation">)</span>  axs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>plot<span class="token punctuation">(</span>xdata<span class="token punctuation">,</span> data1<span class="token punctuation">)</span>  <span class="token comment"># 设置x 轴和显示内容</span>  axs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_xticks<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'zero'</span><span class="token punctuation">,</span> <span class="token string">'30'</span><span class="token punctuation">,</span> <span class="token string">'sixty'</span><span class="token punctuation">,</span> <span class="token string">'90'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 设置 y 轴</span>  axs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_yticks<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1.5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1.5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  axs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'Manual ticks'</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>e9_2<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="使用时间做轴"><a href="#使用时间做轴" class="headerlink" title="使用时间做轴"></a>使用时间做轴</h2><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>python</span></div><code class="language-python"><span class="token keyword">def</span> <span class="token function">e9_3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2.7</span><span class="token punctuation">)</span><span class="token punctuation">,</span> layout<span class="token operator">=</span><span class="token string">'constrained'</span><span class="token punctuation">)</span>  <span class="token comment"># 通过时间范围和间隔构建时间戳数组</span>  dates <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span>np<span class="token punctuation">.</span>datetime64<span class="token punctuation">(</span><span class="token string">'2021-11-15'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>datetime64<span class="token punctuation">(</span><span class="token string">'2021-12-25'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    np<span class="token punctuation">.</span>timedelta64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'h'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 随机数的数据</span>  data <span class="token operator">=</span> np<span class="token punctuation">.</span>cumsum<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>dates<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># x 和 y 数据正常放入图像</span>  ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>dates<span class="token punctuation">,</span> data<span class="token punctuation">)</span>  <span class="token comment"># 设置日期格式化方式并添加到轴</span>  cdf <span class="token operator">=</span> mpl<span class="token punctuation">.</span>dates<span class="token punctuation">.</span>ConciseDateFormatter<span class="token punctuation">(</span>ax<span class="token punctuation">.</span>xaxis<span class="token punctuation">.</span>get_major_locator<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  ax<span class="token punctuation">.</span>xaxis<span class="token punctuation">.</span>set_major_formatter<span class="token punctuation">(</span>cdf<span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>e9_3<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="使用字符串做轴"><a href="#使用字符串做轴" class="headerlink" title="使用字符串做轴"></a>使用字符串做轴</h2><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>python</span></div><code class="language-python"><span class="token keyword">def</span> <span class="token function">e9_4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2.7</span><span class="token punctuation">)</span><span class="token punctuation">,</span> layout<span class="token operator">=</span><span class="token string">'constrained'</span><span class="token punctuation">)</span>  categories <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'turnips'</span><span class="token punctuation">,</span> <span class="token string">'rutabaga'</span><span class="token punctuation">,</span> <span class="token string">'cucumber'</span><span class="token punctuation">,</span> <span class="token string">'pumpkins'</span><span class="token punctuation">]</span>  ax<span class="token punctuation">.</span>bar<span class="token punctuation">(</span>categories<span class="token punctuation">,</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>categories<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>e9_4<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="添加更多的轴"><a href="#添加更多的轴" class="headerlink" title="添加更多的轴"></a>添加更多的轴</h2><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>python</span></div><code class="language-python"><span class="token keyword">def</span> <span class="token function">e9_5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  t <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">5.0</span><span class="token punctuation">,</span> <span class="token number">0.01</span><span class="token punctuation">)</span>  s <span class="token operator">=</span> np<span class="token punctuation">.</span>cos<span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>pi <span class="token operator">*</span> t<span class="token punctuation">)</span>  <span class="token comment"># fig上的图像为 ax1 和 ax3</span>  fig<span class="token punctuation">,</span> <span class="token punctuation">(</span>ax1<span class="token punctuation">,</span> ax3<span class="token punctuation">)</span> <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">2.7</span><span class="token punctuation">)</span><span class="token punctuation">,</span> layout<span class="token operator">=</span><span class="token string">'constrained'</span><span class="token punctuation">)</span>  l1<span class="token punctuation">,</span> <span class="token operator">=</span> ax1<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>t<span class="token punctuation">,</span> s<span class="token punctuation">)</span>  <span class="token comment"># ax2 和 ax1 绘制在一起, 共享x轴</span>  ax2 <span class="token operator">=</span> ax1<span class="token punctuation">.</span>twinx<span class="token punctuation">(</span><span class="token punctuation">)</span>  l2<span class="token punctuation">,</span> <span class="token operator">=</span> ax2<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'C1'</span><span class="token punctuation">)</span>  ax2<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">[</span>l1<span class="token punctuation">,</span> l2<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Sine (left)'</span><span class="token punctuation">,</span> <span class="token string">'Straight (right)'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  ax3<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>t<span class="token punctuation">,</span> s<span class="token punctuation">)</span>  ax3<span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">'Angle [rad]'</span><span class="token punctuation">)</span>  <span class="token comment"># secondary_xaxis 用于创建一个新的x轴 传入了和原x轴的互相转换函数</span>  ax4 <span class="token operator">=</span> ax3<span class="token punctuation">.</span>secondary_xaxis<span class="token punctuation">(</span><span class="token string">'top'</span><span class="token punctuation">,</span> functions<span class="token operator">=</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>rad2deg<span class="token punctuation">,</span> np<span class="token punctuation">.</span>deg2rad<span class="token punctuation">)</span><span class="token punctuation">)</span>  ax4<span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">'Angle [°]'</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>e9_5<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="10-色块图"><a href="#10-色块图" class="headerlink" title="10. 色块图"></a>10. 色块图</h1><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>python</span></div><code class="language-python"><span class="token keyword">def</span> <span class="token function">e10</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  data1<span class="token punctuation">,</span> data2<span class="token punctuation">,</span> data3 <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>  X<span class="token punctuation">,</span> Y <span class="token operator">=</span> np<span class="token punctuation">.</span>meshgrid<span class="token punctuation">(</span>np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  Z <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> X<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">+</span> X<span class="token operator">**</span><span class="token number">5</span> <span class="token operator">+</span> Y<span class="token operator">**</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span>X<span class="token operator">**</span><span class="token number">2</span> <span class="token operator">-</span> Y<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span>  fig<span class="token punctuation">,</span> axs <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> layout<span class="token operator">=</span><span class="token string">'constrained'</span><span class="token punctuation">)</span>  pc <span class="token operator">=</span> axs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>pcolormesh<span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> Z<span class="token punctuation">,</span> vmin<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> vmax<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'RdBu_r'</span><span class="token punctuation">)</span>  fig<span class="token punctuation">.</span>colorbar<span class="token punctuation">(</span>pc<span class="token punctuation">,</span> ax<span class="token operator">=</span>axs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  axs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'pcolormesh()'</span><span class="token punctuation">)</span>  co <span class="token operator">=</span> axs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>contourf<span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> Z<span class="token punctuation">,</span> levels<span class="token operator">=</span>np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.25</span><span class="token punctuation">,</span> <span class="token number">1.25</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  fig<span class="token punctuation">.</span>colorbar<span class="token punctuation">(</span>co<span class="token punctuation">,</span> ax<span class="token operator">=</span>axs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  axs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'contourf()'</span><span class="token punctuation">)</span>  pc <span class="token operator">=</span> axs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>Z<span class="token operator">**</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'plasma'</span><span class="token punctuation">,</span>                            norm<span class="token operator">=</span>mpl<span class="token punctuation">.</span>colors<span class="token punctuation">.</span>LogNorm<span class="token punctuation">(</span>vmin<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">,</span> vmax<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  fig<span class="token punctuation">.</span>colorbar<span class="token punctuation">(</span>pc<span class="token punctuation">,</span> ax<span class="token operator">=</span>axs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> extend<span class="token operator">=</span><span class="token string">'both'</span><span class="token punctuation">)</span>  axs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'imshow() with LogNorm()'</span><span class="token punctuation">)</span>  pc <span class="token operator">=</span> axs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>data1<span class="token punctuation">,</span> data2<span class="token punctuation">,</span> c<span class="token operator">=</span>data3<span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'RdBu_r'</span><span class="token punctuation">)</span>  fig<span class="token punctuation">.</span>colorbar<span class="token punctuation">(</span>pc<span class="token punctuation">,</span> ax<span class="token operator">=</span>axs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> extend<span class="token operator">=</span><span class="token string">'both'</span><span class="token punctuation">)</span>  axs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'scatter()'</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>e10<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="11-多-axes-使用-dict-操作"><a href="#11-多-axes-使用-dict-操作" class="headerlink" title="11. 多 axes 使用 dict 操作"></a>11. 多 axes 使用 dict 操作</h1><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>python</span></div><code class="language-python"><span class="token keyword">def</span> <span class="token function">e11</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  fig<span class="token punctuation">,</span> axd <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplot_mosaic<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'upleft'</span><span class="token punctuation">,</span> <span class="token string">'right'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                               <span class="token punctuation">[</span><span class="token string">'lowleft'</span><span class="token punctuation">,</span> <span class="token string">'right'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> layout<span class="token operator">=</span><span class="token string">'constrained'</span><span class="token punctuation">)</span>  axd<span class="token punctuation">[</span><span class="token string">'upleft'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'upleft'</span><span class="token punctuation">)</span>  axd<span class="token punctuation">[</span><span class="token string">'lowleft'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'lowleft'</span><span class="token punctuation">)</span>  axd<span class="token punctuation">[</span><span class="token string">'right'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'right'</span><span class="token punctuation">)</span>e11<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>豆知识</tag>
      
      <tag>笔记</tag>
      
      <tag>python</tag>
      
      <tag>库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Numpy入门笔记</title>
    <link href="/2023/11/28/pythonNumpy.html"/>
    <url>/2023/11/28/pythonNumpy.html</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>网站 <a href="https://numpy.org/">https://numpy.org/</a></p><p>NumPy（Numerical Python）是Python中数字处理的事实标准，也是学习其他数据知识的必备工具。</p><p>本文是学习Numpy过程中的笔记，所有内容都来自官方文档：<a href="https://numpy.org/doc/stable/user/absolute_beginners.html">https://numpy.org/doc/stable/user/absolute_beginners.html</a></p><span id="more"></span><h1 id="1-普通数组和np数组的区别"><a href="#1-普通数组和np数组的区别" class="headerlink" title="1. 普通数组和np数组的区别"></a>1. 普通数组和np数组的区别</h1><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>python</span></div><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment"># 普通数组</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment"># np数组</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="2-创建np数组的方法"><a href="#2-创建np数组的方法" class="headerlink" title="2. 创建np数组的方法"></a>2. 创建np数组的方法</h1><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>python</span></div><code class="language-python">np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment"># 全0填充</span>np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment"># 全1填充</span>np<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment"># 空数组</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment"># [0, 1, 2, 3]</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment"># [2, 4, 6, 8]</span>np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> num<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment"># [0, 2.5, 5, 7.5, 10]</span><span class="token comment"># 可以自己决定数据类型</span>np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>int64<span class="token punctuation">)</span> <span class="token comment"># [1, 1]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="3-排序和拼接"><a href="#3-排序和拼接" class="headerlink" title="3. 排序和拼接"></a>3. 排序和拼接</h1><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>python</span></div><code class="language-python">arr <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment"># 排序</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 拼接</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>y <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment"># 拼接</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="4-形状和大小"><a href="#4-形状和大小" class="headerlink" title="4. 形状和大小"></a>4. 形状和大小</h1><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>python</span></div><code class="language-python">array_example <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token punctuation">,</span><span class="token number">1</span> <span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>array_example<span class="token punctuation">.</span>ndim <span class="token comment"># 维度 3</span>array_example<span class="token punctuation">.</span>size <span class="token comment"># 大小 24</span>array_example<span class="token punctuation">.</span>shape <span class="token comment"># 形状 (3, 2, 4)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="5-改变数组的形状"><a href="#5-改变数组的形状" class="headerlink" title="5. 改变数组的形状"></a>5. 改变数组的形状</h1><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>python</span></div><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>b <span class="token operator">=</span> a<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment"># [[0 1]</span><span class="token comment">#  [2 3]</span><span class="token comment">#  [4 5]]</span>np<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>a<span class="token punctuation">,</span> newshape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> order<span class="token operator">=</span><span class="token string">'C'</span><span class="token punctuation">)</span> <span class="token comment"># 更多参数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="6-添加维度"><a href="#6-添加维度" class="headerlink" title="6. 添加维度"></a>6. 添加维度</h1><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>python</span></div><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span>shape <span class="token comment"># 一维 (6, )</span>a2 <span class="token operator">=</span> a<span class="token punctuation">[</span>np<span class="token punctuation">.</span>newaxis<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span>a2<span class="token punctuation">.</span>shape <span class="token comment"># 二维 (1, 6)</span>col_vector <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>newaxis<span class="token punctuation">]</span> <span class="token comment"># 插入列向量</span>col_vector<span class="token punctuation">.</span>shape <span class="token comment"># 二维 (6, 1)</span><span class="token comment"># 在指定维度插入</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>expand_dims<span class="token punctuation">(</span>a<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>b<span class="token punctuation">.</span>shape <span class="token comment"># (6, 1)</span>c <span class="token operator">=</span> np<span class="token punctuation">.</span>expand_dims<span class="token punctuation">(</span>a<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span>shape <span class="token comment"># (1, 6)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="7-索引和切片"><a href="#7-索引和切片" class="headerlink" title="7. 索引和切片"></a>7. 索引和切片</h1><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>python</span></div><code class="language-python">data <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment"># 正常索引方式 2</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token comment"># 正常切片 array([1, 2])</span>data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token comment"># 正向到底 array([2, 3])</span>data<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token comment"># 反向到底 array([2, 3])</span><span class="token comment"># 条件过滤</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>a<span class="token punctuation">[</span>a <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">]</span> <span class="token comment"># 符合条件的内容 [1 2 3 4 5 6 7]</span>five_up <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">>=</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment"># 条件表达式作为参数</span>a<span class="token punctuation">[</span>five_up<span class="token punctuation">]</span> <span class="token comment"># [5 6 7 8 9 10 11 12]</span>c <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token punctuation">(</span>a <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment"># 可以使用与&amp;或| [3 4 5 6 7 8 9 10]</span>five_up <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment"># 条件本身会被计算成一个bool数组, 和原数组结构相同</span>five_up<span class="token comment"># [[False False False False]</span><span class="token comment">#  [ True  True  True  True]</span><span class="token comment">#  [ True  True  True True]]</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>nonzero<span class="token punctuation">(</span>a <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token comment"># 根据查询条件, 返回符合条件的元素的索引</span><span class="token comment"># 返回的数组数是a的维数, 返回值是索引值, 返回长度是符合条件的个数</span><span class="token comment"># print(b) # (array([0, 0, 0, 0, 1], dtype=int64), array([0, 1, 2, 3, 0], dtype=int64))</span><span class="token comment"># 将上述内容压缩成坐标列表</span>list_of_coordinates<span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># [[0, 0], [0, 1], [0, 2], [0, 3], [1, 0]]</span>a<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token comment"># 也可以用索引直接获得元素 [1 2 3 4 5]</span><span class="token comment"># 结果为空</span>not_there <span class="token operator">=</span> np<span class="token punctuation">.</span>nonzero<span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">42</span><span class="token punctuation">)</span> <span class="token comment"># (array([], dtype=int64), array([], dtype=int64))</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="8-现有数据转数组"><a href="#8-现有数据转数组" class="headerlink" title="8. 现有数据转数组"></a>8. 现有数据转数组</h1><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>python</span></div><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span>arr1 <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token comment"># 通过切片创建新数组 array([4, 5, 6, 7, 8])</span>a1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>a2 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>vstack<span class="token punctuation">(</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> a2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 垂直堆叠 [[1, 1], [2, 2], [3, 3], [4, 4]]</span>np<span class="token punctuation">.</span>hstack<span class="token punctuation">(</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> a2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 水平堆叠 [[1, 1], [3, 3], [2, 2], [4, 4]]</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token comment"># 素材</span><span class="token comment"># array([[ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12],</span><span class="token comment">#       [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]])</span>np<span class="token punctuation">.</span>hsplit<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment"># 拆成三个</span><span class="token comment"># [array([[ 1,  2,  3,  4],</span><span class="token comment">#        [13, 14, 15, 16]]), array([[ 5,  6,  7,  8],</span><span class="token comment">#        [17, 18, 19, 20]]), array([[ 9, 10, 11, 12],</span><span class="token comment">#        [21, 22, 23, 24]])]</span>np<span class="token punctuation">.</span>hsplit<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 按指定列号拆分</span><span class="token comment"># [array([[ 1,  2,  3],</span><span class="token comment">#        [13, 14, 15]]), array([[ 4],</span><span class="token comment">#        [16]]), array([[ 5,  6,  7,  8,  9, 10, 11, 12],</span><span class="token comment">#        [17, 18, 19, 20, 21, 22, 23, 24]])]</span><span class="token comment"># 视图是引用, 修改视图也会修改原数据</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b1 <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token comment"># array([1, 2, 3, 4])</span>b1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">99</span>a<span class="token comment"># array([[99,  2,  3,  4],</span><span class="token comment">#        [ 5,  6,  7,  8],</span><span class="token comment">#        [ 9, 10, 11, 12]])</span><span class="token comment"># copy是复制, 修改copy对原数据没影响</span>b2 <span class="token operator">=</span> a<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="9-基础数组操作"><a href="#9-基础数组操作" class="headerlink" title="9. 基础数组操作"></a>9. 基础数组操作</h1><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>python</span></div><code class="language-python"><span class="token comment"># 加减乘除</span>data <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># [1 2]</span>ones <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token comment"># [1 1]</span>data <span class="token operator">+</span> ones <span class="token comment"># [2 3]</span><span class="token comment"># 求和</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 10</span><span class="token comment"># 在所选维度求和</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment"># [3, 3]</span>b<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># [2, 4]</span><span class="token comment"># 和常量的运算</span>data <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>data <span class="token operator">*</span> <span class="token number">1.6</span> <span class="token comment"># [1.6 3.2]</span><span class="token comment"># 素材</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.45053314</span><span class="token punctuation">,</span> <span class="token number">0.17296777</span><span class="token punctuation">,</span> <span class="token number">0.34376245</span><span class="token punctuation">,</span> <span class="token number">0.5510652</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span><span class="token number">0.54627315</span><span class="token punctuation">,</span> <span class="token number">0.05093587</span><span class="token punctuation">,</span> <span class="token number">0.40067661</span><span class="token punctuation">,</span> <span class="token number">0.55645993</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span><span class="token number">0.12697628</span><span class="token punctuation">,</span> <span class="token number">0.82485143</span><span class="token punctuation">,</span> <span class="token number">0.26590556</span><span class="token punctuation">,</span> <span class="token number">0.56917101</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 求和 4.8595784</span>a<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 极小值 0.05093587</span>a<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment"># 维度极小值 [0.12697628, 0.05093587, 0.26590556, 0.5510652 ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="10-矩阵"><a href="#10-矩阵" class="headerlink" title="10. 矩阵"></a>10. 矩阵</h1><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>python</span></div><code class="language-python">data <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># array([[1, 2],</span><span class="token comment">#        [3, 4],</span><span class="token comment">#        [5, 6]])</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment"># 正常索引 2</span>data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token comment"># 正常切片 array([[3, 4], [5, 6]])</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment"># 0:2是切片, 0是索引, 切片和索引混用 array([1, 3])</span>data<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 6</span>data<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 1</span>data<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 21</span><span class="token comment"># 也可以指定维度</span>data <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>data<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment"># array([5, 6])</span>data<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># array([2, 5, 6])</span><span class="token comment"># 矩阵之间的运算（需要矩阵尺寸相同）</span>data <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>ones <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>data <span class="token operator">+</span> ones <span class="token comment"># array([[2, 3], [4, 5]])</span><span class="token comment"># 如果某个矩阵只有一行或者一列, 也可使用广播规则运算</span>data <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>ones_row <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>data <span class="token operator">+</span> ones_row<span class="token comment"># array([[2, 3],</span><span class="token comment">#        [4, 5],</span><span class="token comment">#        [6, 7]])</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="11-生成随机数"><a href="#11-生成随机数" class="headerlink" title="11. 生成随机数"></a>11. 生成随机数</h1><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>python</span></div><code class="language-python">rng <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>default_rng<span class="token punctuation">(</span><span class="token punctuation">)</span>rng<span class="token punctuation">.</span>integers<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 两行四列, 随机整数, 小于5</span>rng<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 三行两列 0-1之间 float</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="12-去重和计数"><a href="#12-去重和计数" class="headerlink" title="12. 去重和计数"></a>12. 去重和计数</h1><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>python</span></div><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span>unique_values <span class="token operator">=</span> np<span class="token punctuation">.</span>unique<span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment"># 去重 [11 12 13 14 15 16 17 18 19 20]</span>unique_values<span class="token punctuation">,</span> indices_list <span class="token operator">=</span> np<span class="token punctuation">.</span>unique<span class="token punctuation">(</span>a<span class="token punctuation">,</span> return_index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token comment"># 序号 [ 0  2  3  4  5  6  7 12 13 14]</span>unique_values<span class="token punctuation">,</span> occurrence_count <span class="token operator">=</span> np<span class="token punctuation">.</span>unique<span class="token punctuation">(</span>a<span class="token punctuation">,</span> return_counts<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token comment"># 数量 [3 2 2 2 1 1 1 1 1 1]</span><span class="token comment"># 对多维数组也可用</span>a_2d <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>unique_values <span class="token operator">=</span> np<span class="token punctuation">.</span>unique<span class="token punctuation">(</span>a_2d<span class="token punctuation">)</span> <span class="token comment"># 去重 [ 1  2  3  4  5  6  7  8  9 10 11 12]</span>unique_rows <span class="token operator">=</span> np<span class="token punctuation">.</span>unique<span class="token punctuation">(</span>a_2d<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment"># 获得去重的行</span><span class="token comment"># [[ 1  2  3  4]</span><span class="token comment">#  [ 5  6  7  8]</span><span class="token comment">#  [ 9 10 11 12]]</span>unique_rows<span class="token punctuation">,</span> indices<span class="token punctuation">,</span> occurrence_count <span class="token operator">=</span> np<span class="token punctuation">.</span>unique<span class="token punctuation">(</span>a_2d<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> return_counts<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> return_index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>indices <span class="token comment"># 所得行的序号 [0 1 2]</span>occurrence_count <span class="token comment"># 所得行的数量 [2 1 1]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="13-矩阵转置和变形"><a href="#13-矩阵转置和变形" class="headerlink" title="13. 矩阵转置和变形"></a>13. 矩阵转置和变形</h1><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>python</span></div><code class="language-python">data <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 变形</span>data<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token comment"># array([[1, 2, 3],</span><span class="token comment">#        [4, 5, 6]])</span>data<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment"># array([[1, 2],</span><span class="token comment">#        [3, 4],</span><span class="token comment">#        [5, 6]])</span><span class="token comment"># 转置</span>data <span class="token operator">=</span> data<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment"># 先准备一个 23 矩阵</span><span class="token comment"># array([[1, 2, 3],</span><span class="token comment">#        [4, 5, 6]])</span>data<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 转置</span><span class="token comment"># [[1 4]</span><span class="token comment">#  [2 5]</span><span class="token comment">#  [3 6]]</span><span class="token comment"># 也可以直接用T</span>data<span class="token punctuation">.</span>T<span class="token comment"># [[1 4]</span><span class="token comment">#  [2 5]</span><span class="token comment">#  [3 6]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="14-数组逆序"><a href="#14-数组逆序" class="headerlink" title="14. 数组逆序"></a>14. 数组逆序</h1><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>python</span></div><code class="language-python">arr <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span>reversed_arr <span class="token operator">=</span> np<span class="token punctuation">.</span>flip<span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment"># [8 7 6 5 4 3 2 1]</span><span class="token comment"># 二维数组逆序</span>arr_2d <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>reversed_arr <span class="token operator">=</span> np<span class="token punctuation">.</span>flip<span class="token punctuation">(</span>arr_2d<span class="token punctuation">)</span><span class="token comment"># [[12 11 10  9]</span><span class="token comment">#  [ 8  7  6  5]</span><span class="token comment">#  [ 4  3  2  1]]</span><span class="token comment"># 针对的维度逆序</span>reversed_arr_rows <span class="token operator">=</span> np<span class="token punctuation">.</span>flip<span class="token punctuation">(</span>arr_2d<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment"># [[ 9 10 11 12]</span><span class="token comment">#  [ 5  6  7  8]</span><span class="token comment">#  [ 1  2  3  4]]</span><span class="token comment"># 对切片逆序并赋值</span>arr_2d<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>flip<span class="token punctuation">(</span>arr_2d<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># [[ 1 10  3  4]</span><span class="token comment">#  [ 8  7  6  5]</span><span class="token comment">#  [ 9  2 11 12]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="15-多维数组展开"><a href="#15-多维数组展开" class="headerlink" title="15. 多维数组展开"></a>15. 多维数组展开</h1><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>python</span></div><code class="language-python">x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>x<span class="token punctuation">.</span>flatten<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 拷贝展开 array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12])</span>a2 <span class="token operator">=</span> x<span class="token punctuation">.</span>ravel<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 引用展开 array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12])</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="16-内置文档"><a href="#16-内置文档" class="headerlink" title="16. 内置文档"></a>16. 内置文档</h1><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>python</span></div><code class="language-python"><span class="token comment"># help(max) 输出说明</span><span class="token comment"># max? 同名所有函数说明</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># a? 变量说明</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="17-实现数学公式"><a href="#17-实现数学公式" class="headerlink" title="17. 实现数学公式"></a>17. 实现数学公式</h1><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>python</span></div><code class="language-python">predictions <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>labels <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 例如均方误差公式</span>error <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">*</span> np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>square<span class="token punctuation">(</span>predictions <span class="token operator">-</span> labels<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="18-np对象导入导出"><a href="#18-np对象导入导出" class="headerlink" title="18. np对象导入导出"></a>18. np对象导入导出</h1><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>python</span></div><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># np.save('filename', a) 存成文件</span><span class="token comment"># b = np.load('filename.npy') 从文件读取</span><span class="token comment"># 使用csv格式</span><span class="token comment"># np.savetxt('new_file.csv', a)</span><span class="token comment"># np.loadtxt('new_file.csv')</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="19-使用-Pandas-库进行csv导入导出操作"><a href="#19-使用-Pandas-库进行csv导入导出操作" class="headerlink" title="19. 使用 Pandas 库进行csv导入导出操作"></a>19. 使用 Pandas 库进行csv导入导出操作</h1><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>python</span></div><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment"># # If all of your columns are the same type:</span><span class="token comment"># x = pd.read_csv('music.csv', header=0).values</span><span class="token comment"># print(x)</span><span class="token comment"># [['Billie Holiday' 'Jazz' 1300000 27000000]</span><span class="token comment">#  ['Jimmie Hendrix' 'Rock' 2700000 70000000]</span><span class="token comment">#  ['Miles Davis' 'Jazz' 1500000 48000000]</span><span class="token comment">#  ['SIA' 'Pop' 2000000 74000000]]</span><span class="token comment"># # You can also simply select the columns you need:</span><span class="token comment"># x = pd.read_csv('music.csv', usecols=['Artist', 'Plays']).values</span><span class="token comment"># print(x)</span><span class="token comment"># [['Billie Holiday' 27000000]</span><span class="token comment">#  ['Jimmie Hendrix' 70000000]</span><span class="token comment">#  ['Miles Davis' 48000000]</span><span class="token comment">#  ['SIA' 74000000]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="20-使用-Matplotlib-绘制数据图像"><a href="#20-使用-Matplotlib-绘制数据图像" class="headerlink" title="20. 使用 Matplotlib 绘制数据图像"></a>20. 使用 Matplotlib 绘制数据图像</h1><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>python</span></div><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token comment"># 显示数组</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>a<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 两种数据</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>y <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token string">'purple'</span><span class="token punctuation">)</span> <span class="token comment"># line</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">)</span>      <span class="token comment"># dots</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 高级使用</span>fig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span>ax <span class="token operator">=</span> fig<span class="token punctuation">.</span>add_subplot<span class="token punctuation">(</span>projection<span class="token operator">=</span><span class="token string">'3d'</span><span class="token punctuation">)</span>X <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0.15</span><span class="token punctuation">)</span>Y <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0.15</span><span class="token punctuation">)</span>X<span class="token punctuation">,</span> Y <span class="token operator">=</span> np<span class="token punctuation">.</span>meshgrid<span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">)</span>R <span class="token operator">=</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>X<span class="token operator">**</span><span class="token number">2</span> <span class="token operator">+</span> Y<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span>Z <span class="token operator">=</span> np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>R<span class="token punctuation">)</span>ax<span class="token punctuation">.</span>plot_surface<span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> Z<span class="token punctuation">,</span> rstride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> cstride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'viridis'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>豆知识</tag>
      
      <tag>笔记</tag>
      
      <tag>python</tag>
      
      <tag>库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AI入门笔记（2）——知识表示与专家系统</title>
    <link href="/2023/11/24/AiForBeginners-2.html"/>
    <url>/2023/11/24/AiForBeginners-2.html</url>
    
    <content type="html"><![CDATA[<h1 id="课程"><a href="#课程" class="headerlink" title="课程"></a>课程</h1><p><a href="https://github.com/microsoft/AI-For-Beginners/blob/main/lessons/2-Symbolic/README.md">https://github.com/microsoft/AI-For-Beginners/blob/main/lessons/2-Symbolic/README.md</a></p><p>这是微软提供的AI-For-Beginners课程第二课，介绍了过去常见的自顶向下的AI设计方法。</p><span id="more"></span><h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><p>通过DIKW金字塔，探讨了 数据、信息、知识、智慧 的含义，传统的人工智能实现方式就是一类尝试将数据组织成知识的方法。</p><p>探讨了使用计算机表达知识的几种方式。</p><h2 id="专家系统"><a href="#专家系统" class="headerlink" title="专家系统"></a>专家系统</h2><p>介绍了早期<code>symbolic AI</code>的一种成功实践：专家系统。</p><p>将专家系统的实现区分为两种类型：向后推理与向前推理。</p><p>后向推理实现专家系统的代码实践：<a href="https://github.com/vitsumoc/exercise-AI-Beginner/blob/main/2-Symbolic/animal_Inference.py">https://github.com/vitsumoc/exercise-AI-Beginner/blob/main/2-Symbolic/animal_Inference.py</a></p><h2 id="本体论和语义网"><a href="#本体论和语义网" class="headerlink" title="本体论和语义网"></a>本体论和语义网</h2><p><code>ontology</code> 本体指的是某个概念实体，<code>Semantic Web</code> 语义网指的是对本体的各种规范性描述的集合，简单的有对本体属性的描述，复杂的有对各种逻辑关系的描述。</p><p>本体和语义网也是对人类思考方式的归纳和模仿，是一种组织复杂数据形成知识的方式，<code>WikiData</code> 就是这样的一个知识库。</p><p>使用语义网实现家谱查询系统的代码实践：<a href="https://github.com/vitsumoc/exercise-AI-Beginner/blob/main/2-Symbolic/family_ontology.py">https://github.com/vitsumoc/exercise-AI-Beginner/blob/main/2-Symbolic/family_ontology.py</a></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>学习了<code>Symbolic AI</code>的概念，历史，还通过几个简单例子进行了最简单的了解。</p><p>可以感受到曾经计算机行业的先驱者们为了赋予计算机智能，付出了多少辛劳和汗水，也取得了巨大的成果。</p><p>However, the important characteristics of knowledge-based systems is that you can always <em>explain</em> exactly how any of the decisions were made.</p>]]></content>
    
    
    <categories>
      
      <category>AI学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AI</tag>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AI入门笔记（1）——简介与历史</title>
    <link href="/2023/11/24/AiForBeginners-1.html"/>
    <url>/2023/11/24/AiForBeginners-1.html</url>
    
    <content type="html"><![CDATA[<h1 id="课程"><a href="#课程" class="headerlink" title="课程"></a>课程</h1><p><a href="https://github.com/microsoft/AI-For-Beginners/blob/main/lessons/1-Intro/README.md">https://github.com/microsoft/AI-For-Beginners/blob/main/lessons/1-Intro/README.md</a></p><p>这是微软提供的AI-For-Beginners课程第一课，对AI的基础概念、定义、发展历史等内容进行了简单的介绍。</p><span id="more"></span><h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><p>什么是<code>Weak AI</code>，什么是<code>Strong AI</code></p><p>什么是图灵测试，如何定义<code>Intelligence</code></p><p>AI的不同实现路径，过去主要是<code>Symbolic Reasoning</code>，而现在主要使用<code>Neural Networks</code></p><p>AI发展的简要历史</p><p>近年来AI技术取得的重大进展：图片识别、自然语言识别、翻译等等</p>]]></content>
    
    
    <categories>
      
      <category>AI学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AI</tag>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用SSH包装Socks5代理</title>
    <link href="/2023/11/22/SSHInSubSocks.html"/>
    <url>/2023/11/22/SSHInSubSocks.html</url>
    
    <content type="html"><![CDATA[<h1 id="subSocks简介"><a href="#subSocks简介" class="headerlink" title="subSocks简介"></a>subSocks简介</h1><p><a href="https://github.com/luyuhuang/subsocks">subSocks</a>是<a href="https://luyuhuang.tech/">Luyu Huang</a>制作的纯golang网络代理软件。</p><p>这里是作者本人对此项目的介绍<a href="https://luyuhuang.tech/2020/12/02/subsocks.html">文档</a>。</p><span id="more"></span><h1 id="为什么要做SSH包装"><a href="#为什么要做SSH包装" class="headerlink" title="为什么要做SSH包装"></a>为什么要做SSH包装</h1><p>因为之前使用v2ray总是被封端口，但是VPS上的22端口始终建在，考虑到SSH协议比较复杂，包括了Shell，SFTP等多种应用。我认为使用SSH协议包装流量可以起到一定的伪装作用，减少端口被封的可能性。</p><p>subSocks项目的代码结构非常漂亮，添加SSH包装非常便捷。</p><h1 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h1><p>首先需要了解subSocks的代码结构，Luyu Huang的<a href="https://luyuhuang.tech/2020/12/02/subsocks.html">文档</a>中描述的非常详细，我只需要实现SSHWarpper和SSHStripper。</p><p>golang已经提供了SSH的官方实现，参考<a href="https://pkg.go.dev/golang.org/x/crypto/ssh">文档</a>。并且提供了使用SSH进行远程Shell的示例。</p><p>之后需要对SSH的<a href="/2023/11/20/SSH.html">通讯过程</a>，<code>Session</code> <code>Channel</code> <code>Request</code>等等各种概念有基础的了解。</p><p>使用ssh包中的代码，在服务端使用TCP链接，创建SSH服务器，等待客户端链接后获取Channel，将Channel包装为Stripper。</p><p>客户端与服务端相似，需要使用TCP链接，向服务端完成握手过程，之后可获得Session，将Session包装成Wrapper。</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>服务端必须配置密钥，可使用自己生成的密钥：</p><figure class="highlight toml"><figcaption><span>toml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs toml"><span class="hljs-section">[server]</span> <span class="hljs-comment"># server configuration</span><br><br><span class="hljs-attr">protocol</span> = <span class="hljs-string">&quot;ssh&quot;</span><br><span class="hljs-attr">listen</span> = <span class="hljs-string">&quot;0.0.0.0:22&quot;</span><br><br><span class="hljs-attr">ssh.cert</span> = <span class="hljs-string">&quot;./id_rsa.pub&quot;</span><br><span class="hljs-attr">ssh.key</span> = <span class="hljs-string">&quot;./id_rsa&quot;</span><br></code></pre></td></tr></table></figure><p>客户端只需将协议设置为ssh，其他与subsocks相同:</p><figure class="highlight toml"><figcaption><span>toml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs toml"><span class="hljs-section">[client]</span> <span class="hljs-comment"># client configuration</span><br><br><span class="hljs-attr">listen</span> = <span class="hljs-string">&quot;127.0.0.1:1080&quot;</span><br><br><span class="hljs-attr">server.protocol</span> = <span class="hljs-string">&quot;ssh&quot;</span><br><span class="hljs-attr">server.address</span> = <span class="hljs-string">&quot;serverIP:22&quot;</span><br></code></pre></td></tr></table></figure><p>通过抓包验证，握手过程正常，通讯过程与SSH相同，多条链接使用正常，所有数据均经过加密：</p><p><img src="/2023/11/22/SSHInSubSocks/wireshark.png"></p><p>通过观看视频网站验证，视频加载流畅，体验很好。</p>]]></content>
    
    
    <categories>
      
      <category>网络编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络编程</tag>
      
      <tag>SSH</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>golang与串口设备在项目中的运用</title>
    <link href="/2023/11/22/golangSerial.html"/>
    <url>/2023/11/22/golangSerial.html</url>
    
    <content type="html"><![CDATA[<h1 id="需求简述"><a href="#需求简述" class="headerlink" title="需求简述"></a>需求简述</h1><p>硬件设备使用485Modbus通讯，需使用golang编写采集程序，将数据采集至平台。</p><span id="more"></span><h1 id="方案简述"><a href="#方案简述" class="headerlink" title="方案简述"></a>方案简述</h1><p>使用串口服务器将485Modbus通讯转为TCPModbus，并将串口服务器设置为TCPserver。</p><p>使用golang编写采集器，定期向串口服务器建立TCP链接，采集数据。</p><h1 id="技术点与实现"><a href="#技术点与实现" class="headerlink" title="技术点与实现"></a>技术点与实现</h1><h2 id="点表"><a href="#点表" class="headerlink" title="点表"></a>点表</h2><p>通过<code>struct</code>实现点位表</p><p>这里使用Raw表示原始点表数据，和通讯协议一一对应</p><p>后续可将Raw结构封装至更高层的业务结构，用来实现业务数据的表示、嵌套能其他功能</p><figure><div class="code-wrapper"><pre class="line-numbers language-go" data-language="go"><div class="caption"><span>go</span></div><code class="language-go"><span class="token keyword">type</span> StructMcuRaw <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>Ver               <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token builtin">uint8</span> <span class="token string">`json:"ver"`</span>                                                                               <span class="token comment">// 软件版本[4]char</span>Id                <span class="token builtin">uint16</span>   <span class="token string">`json:"id"`</span>                                                                                <span class="token comment">// 通信箱id</span>TargetAngle       <span class="token builtin">uint16</span>   <span class="token string">`json:"targetAngle" IEC104:"yc" IEC104Name:"子阵目标角度" IEC104Unit:"°" IEC104Factor:"0.1"`</span> <span class="token comment">// 对整个子阵设置目标角度</span>InitSnowDepth     <span class="token builtin">uint16</span>   <span class="token string">`json:"initSnowDepth" IEC104:"yx" IEC104Name:"标定初始雪深标志"`</span>                              <span class="token comment">// 标定初始雪深标志</span>PrecipitationType <span class="token builtin">uint16</span>   <span class="token string">`json:"precipitationType"`</span>                                                                 <span class="token comment">// 降水类型</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="读取二进制数据"><a href="#读取二进制数据" class="headerlink" title="读取二进制数据"></a>读取二进制数据</h2><p>通过<code>binary</code>包，可以实现从buffer中读取数据向<code>struct</code>赋值</p><figure><div class="code-wrapper"><pre class="line-numbers language-go" data-language="go"><div class="caption"><span>go</span></div><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>StructMcuRaw<span class="token punctuation">)</span> <span class="token function">MCUFromByte</span><span class="token punctuation">(</span>res <span class="token operator">*</span>bytes<span class="token punctuation">.</span>Buffer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 软件版本[4]char</span><span class="token keyword">for</span> x <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> x<span class="token operator">++</span> <span class="token punctuation">&#123;</span>binary<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> binary<span class="token punctuation">.</span>BigEndian<span class="token punctuation">,</span> p<span class="token punctuation">.</span>Ver<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 通信箱id</span>binary<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> binary<span class="token punctuation">.</span>BigEndian<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token comment">// 对整个子阵设置目标角度</span>binary<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> binary<span class="token punctuation">.</span>BigEndian<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p<span class="token punctuation">.</span>TargetAngle<span class="token punctuation">)</span><span class="token comment">// 标定初始雪深标志</span>binary<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> binary<span class="token punctuation">.</span>BigEndian<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p<span class="token punctuation">.</span>InitSnowDepth<span class="token punctuation">)</span><span class="token comment">// 降水类型</span>binary<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> binary<span class="token punctuation">.</span>BigEndian<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p<span class="token punctuation">.</span>PrecipitationType<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="封装为query"><a href="#封装为query" class="headerlink" title="封装为query"></a>封装为query</h2><p>在本项目中，query指对单个设备的采集方法</p><p>将数据读取封装成query方法，包括TCP采集过程、日志记录、包格式处理等</p><figure><div class="code-wrapper"><pre class="line-numbers language-go" data-language="go"><div class="caption"><span>go</span></div><code class="language-go"><span class="token keyword">func</span> <span class="token function">MCUQuery</span><span class="token punctuation">(</span>conn <span class="token operator">*</span>net<span class="token punctuation">.</span>Conn<span class="token punctuation">,</span> reader <span class="token operator">*</span>bufio<span class="token punctuation">.</span>Reader<span class="token punctuation">,</span> buffer <span class="token operator">*</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> cb <span class="token operator">*</span>rs<span class="token punctuation">.</span>StructCommBox<span class="token punctuation">,</span> mcu <span class="token operator">*</span>rs<span class="token punctuation">.</span>StructMcu<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span><span class="token comment">// 查询地址</span>addInt<span class="token punctuation">,</span> err <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span>mcu<span class="token punctuation">.</span>Addr<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> err<span class="token punctuation">&#125;</span><span class="token comment">// 包编号</span>tcpSeq <span class="token operator">:=</span> <span class="token function">TcpSeq</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> query <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">&#123;</span><span class="token function">uint8</span><span class="token punctuation">(</span>tcpSeq <span class="token operator">/</span> <span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">uint8</span><span class="token punctuation">(</span>tcpSeq <span class="token operator">%</span> <span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 编号</span><span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x06</span><span class="token punctuation">,</span> <span class="token comment">// 长度</span><span class="token function">byte</span><span class="token punctuation">(</span>addInt<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0x03</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0xa0</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x29</span><span class="token punctuation">&#125;</span> <span class="token comment">// 指令</span><span class="token punctuation">(</span><span class="token operator">*</span>conn<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetWriteDeadline</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span>QUERY_DEFAULT_TIMEOUT<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>conn<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> cb<span class="token punctuation">.</span>IpAddr<span class="token punctuation">,</span> cb<span class="token punctuation">.</span>Port<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">return</span> err<span class="token punctuation">&#125;</span><span class="token comment">// 日志</span>log<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> cb<span class="token punctuation">.</span>IpAddr<span class="token punctuation">,</span> cb<span class="token punctuation">.</span>Port<span class="token punctuation">,</span> query<span class="token punctuation">)</span><span class="token comment">// 接收</span><span class="token punctuation">(</span><span class="token operator">*</span>conn<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetReadDeadline</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span>QUERY_DEFAULT_TIMEOUT<span class="token punctuation">)</span><span class="token punctuation">)</span>n<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span>reader<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token operator">*</span>buffer<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> cb<span class="token punctuation">.</span>IpAddr<span class="token punctuation">,</span> cb<span class="token punctuation">.</span>Port<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">return</span> err<span class="token punctuation">&#125;</span><span class="token comment">// 日志</span>log<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> cb<span class="token punctuation">.</span>IpAddr<span class="token punctuation">,</span> cb<span class="token punctuation">.</span>Port<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>buffer<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">// 解析</span>res <span class="token operator">:=</span> bytes<span class="token punctuation">.</span><span class="token function">NewBuffer</span><span class="token punctuation">(</span><span class="token operator">*</span>buffer<span class="token punctuation">)</span><span class="token comment">// TCP头</span><span class="token keyword">var</span> tcpHeader rs<span class="token punctuation">.</span>StructTCPHeadertcpHeader<span class="token punctuation">.</span><span class="token function">TCPHeaderFromByte</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token keyword">if</span> tcpHeader<span class="token punctuation">.</span>Seq <span class="token operator">!=</span> tcpSeq <span class="token punctuation">&#123;</span><span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"TCP异常"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> tcpHeader<span class="token punctuation">.</span>Len <span class="token operator">!=</span> <span class="token number">85</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"TCP长度异常"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// modbus头</span><span class="token keyword">var</span> mbHeader rs<span class="token punctuation">.</span>StructMudbusHeadermbHeader<span class="token punctuation">.</span><span class="token function">MudbusHeaderFromByte</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token comment">// mcu内容</span>mcu<span class="token punctuation">.</span>Raw<span class="token punctuation">.</span><span class="token function">MCUFromByte</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>mcu<span class="token punctuation">.</span>VUpdate <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment">// 标记更新</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="封装为采集过程"><a href="#封装为采集过程" class="headerlink" title="封装为采集过程"></a>封装为采集过程</h2><p>最后需要将所有的采集query放置在统一的采集过程中</p><p>在一次采集过程中，创建一条TCP链接，完成所有采集动作，最后断开链接</p><figure><div class="code-wrapper"><pre class="line-numbers language-go" data-language="go"><div class="caption"><span>go</span></div><code class="language-go"><span class="token keyword">func</span> <span class="token function">Collect</span><span class="token punctuation">(</span>cb <span class="token operator">*</span>rs<span class="token punctuation">.</span>StructCommBox<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 记录网络占用</span>NetCh <span class="token operator">&lt;-</span> <span class="token boolean">true</span><span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token operator">&lt;-</span>NetCh<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 初始化采集标识</span><span class="token function">eraseFlag</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span><span class="token comment">// 采集结束后更新时标</span><span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">updateTs</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 建链</span>conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">DialTimeout</span><span class="token punctuation">(</span><span class="token string">"tcp"</span><span class="token punctuation">,</span> cb<span class="token punctuation">.</span>IpAddr<span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>cb<span class="token punctuation">.</span>Port<span class="token punctuation">,</span> rs<span class="token punctuation">.</span>QUERY_DEFAULT_TIMEOUT<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> cb<span class="token punctuation">.</span>IpAddr<span class="token punctuation">,</span> cb<span class="token punctuation">.</span>Port<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">&#125;</span>cb<span class="token punctuation">.</span>VUpdate <span class="token operator">=</span> <span class="token boolean">true</span><span class="token keyword">defer</span> conn<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 读写缓存</span>readBuf <span class="token operator">:=</span> bufio<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span>buffer <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token comment">// 按mcu查询</span><span class="token keyword">for</span> x <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>cb<span class="token punctuation">.</span>Mcus<span class="token punctuation">)</span><span class="token punctuation">;</span> x<span class="token operator">++</span> <span class="token punctuation">&#123;</span><span class="token comment">// 切换MCU预留时间, 提高成功率</span>time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span>QUERY_MCU_INTERVAL<span class="token punctuation">)</span><span class="token comment">// 查mcu信息</span>mcu <span class="token operator">:=</span> cb<span class="token punctuation">.</span>Mcus<span class="token punctuation">[</span>x<span class="token punctuation">]</span>err <span class="token operator">=</span> cmd<span class="token punctuation">.</span><span class="token function">MCUQuery</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>conn<span class="token punctuation">,</span> readBuf<span class="token punctuation">,</span> <span class="token operator">&amp;</span>buffer<span class="token punctuation">,</span> cb<span class="token punctuation">,</span> mcu<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">&#125;</span><span class="token comment">// 分次查跟踪器信息</span><span class="token keyword">for</span> y <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> y <span class="token operator">&lt;</span> mcu<span class="token punctuation">.</span>TracerNum<span class="token punctuation">;</span> <span class="token punctuation">&#123;</span><span class="token comment">// 切换Tracer预留时间, 提高成功率</span>time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span>QUERY_TRACER_INTERVAL<span class="token punctuation">)</span><span class="token comment">// 查询长度</span>tracerLen <span class="token operator">:=</span> rs<span class="token punctuation">.</span>QUERY_TRACER_COUNT<span class="token keyword">if</span> mcu<span class="token punctuation">.</span>TracerNum<span class="token operator">-</span>y <span class="token operator">&lt;</span> rs<span class="token punctuation">.</span>QUERY_TRACER_COUNT <span class="token punctuation">&#123;</span>tracerLen <span class="token operator">=</span> mcu<span class="token punctuation">.</span>TracerNum <span class="token operator">-</span> y<span class="token punctuation">&#125;</span>err <span class="token operator">=</span> cmd<span class="token punctuation">.</span><span class="token function">TracerQuery</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>conn<span class="token punctuation">,</span> readBuf<span class="token punctuation">,</span> <span class="token operator">&amp;</span>buffer<span class="token punctuation">,</span> cb<span class="token punctuation">,</span> mcu<span class="token punctuation">,</span> y<span class="token punctuation">,</span> tracerLen<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">&#125;</span>y <span class="token operator">+=</span> tracerLen<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>使用golang+串口服务器进行串口通讯，非常的简单、直观，易于开发维护。</p><p>在本次项目实践中，由于golang提供了方便的并发编程与控制机制，高负载环境下的性能也得到了充分保障。</p>]]></content>
    
    
    <categories>
      
      <category>项目实践</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络编程</tag>
      
      <tag>项目实践</tag>
      
      <tag>golang</tag>
      
      <tag>串口通讯</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSH握手过程</title>
    <link href="/2023/11/20/SSH.html"/>
    <url>/2023/11/20/SSH.html</url>
    
    <content type="html"><![CDATA[<h1 id="RFC"><a href="#RFC" class="headerlink" title="RFC"></a>RFC</h1><p><a href="https://datatracker.ietf.org/doc/html/rfc4253">https://datatracker.ietf.org/doc/html/rfc4253</a></p><h1 id="SSH简介"><a href="#SSH简介" class="headerlink" title="SSH简介"></a>SSH简介</h1><p>安全外壳协议（Secure Shell Protocol，简称SSH）是一种加密的网络传输协议，可在不安全的网络中为网络服务提供安全的传输环境。SSH通过在网络中建立安全隧道来实现SSH客户端与服务器之间的连接。SSH最常见的用途是远程登录系统，人们通常利用SSH来传输命令行界面和远程执行命令。</p><span id="more"></span><h1 id="SSH数据包基本格式"><a href="#SSH数据包基本格式" class="headerlink" title="SSH数据包基本格式"></a>SSH数据包基本格式</h1><p>SSH的数据包加密后分块传输，每次传输的实际包长度都应为密码块大小的整数倍或8</p><p>每个加密后的数据包都由如下结构构成</p><figure class="highlight c"><figcaption><span>c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">uint32    packet_length;<br>byte      padding_length;<br>byte[n1]  payload; <span class="hljs-comment">// n1 = packet_length - padding_length - 1</span><br>byte[n2]  random_padding; <span class="hljs-comment">// n2 = padding_length</span><br>byte[m]   mac(Message_Authentication_Code - MAC); <span class="hljs-comment">// m = mac_length</span><br></code></pre></td></tr></table></figure><ul><li><p>packet_length：数据载荷的长度，不包括<code>mac</code>部分和<code>packet_length</code>本身。在进行加密协商完成后，传输的<code>packet_length</code>也会被加密</p></li><li><p>padding_length：<code>random_padding</code>块的大小</p></li><li><p>payload：数据载荷，根绝协商决定被加密或被压缩的方法</p></li><li><p>random padding： 0-255位随机填充</p></li><li><p>mac：信息认证码，用作信息完整性校验</p></li></ul><h1 id="SSH过程"><a href="#SSH过程" class="headerlink" title="SSH过程"></a>SSH过程</h1><p>以下采用一个SSH抓包结果为例，描述SSH链接建立过程：</p><p>|&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;|</p><p>|&nbsp;&nbsp;&nbsp;客户端&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;服务端&nbsp;&nbsp;&nbsp;&nbsp;|</p><p>|&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;|</p><p>|&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;链接建立&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;|</p><p>|1. 三次握手1|—————————————————————————————–&gt;</p><p>&lt;—————————————————————————————-|2. 三次握手2|</p><p>|3. 三次握手3|—————————————————————————————–&gt;</p><p>|&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;协议协商&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;|</p><p>&lt;—————————————————————————————-|4. 服务端协议|</p><p>|5. 客户端协议|—————————————————————————————–&gt;</p><p>|&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;算法协商&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;|</p><p>&lt;————————————————————————————-|6. 服务端算法表|</p><p>|7. 客户端算法表|————————————————————————————&gt;</p><p>|&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;密钥交换&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;|</p><p>|8. Diffie-Hellman Init|——————————————————————————&gt;</p><p>&lt;————————————————|9. Diffie-Hellman Reply，New Keys，加密包|</p><p>|10. New Keys|—————————————————————————————-&gt;</p><p>|&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;加密通讯&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;|</p><h2 id="链接建立"><a href="#链接建立" class="headerlink" title="链接建立"></a>链接建立</h2><p>（1）（2）（3）三次握手报文</p><p><a href="https://zh.wikipedia.org/zh-hans/%E4%BC%A0%E8%BE%93%E6%8E%A7%E5%88%B6%E5%8D%8F%E8%AE%AE">TCP三次握手</a></p><h2 id="协议协商"><a href="#协议协商" class="headerlink" title="协议协商"></a>协议协商</h2><p>（4）服务端协议报文</p><p>Hex内容</p><blockquote><p>0x 53 53 48 2d 32 2e 30 2d 4f 70 65 6e 53 53 48 5f 38 2e 30 0d 0a</p></blockquote><p>报文内容</p><blockquote><p>SSH-2.0-OpenSSH_8.0&lt;CR&gt;&lt;LF&gt;</p></blockquote><p>包括SSH、协议版本（2.0）、软件版本（OpenSSH_8.0）</p><p>（5）客户端协议报文</p><p>Hex内容</p><blockquote><p>0x 53 53 48 2d 32 2e 30 2d 6e 73 73 73 68 32 5f 37 2e 30 2e 30 30 33 33 20 4e 65 74 53 61 72 61 6e 67 20 43 6f 6d 70 75 74 65 72 2c 20 49 6e 63 2e 0d 0a</p></blockquote><p>报文内容</p><blockquote><p>SSH-2.0-nsssh2_7.0.0033 NetSarang Computer, Inc.&lt;CR&gt;&lt;LF&gt;</p></blockquote><h2 id="算法协商"><a href="#算法协商" class="headerlink" title="算法协商"></a>算法协商</h2><p>在算法协商的过程中，双方会各自发送自己支持的算法列表，最终对以下几个算法达成共识：</p><ul><li>kex_algorithms：密钥交换算法</li><li>server_host_key_algorithms：公钥算法</li><li>encryption_algorithms：加密算法</li><li>mac_algorithms：数据完整性算法</li><li>compression_algorithms：压缩算法</li><li>languages：语言标签（可选）</li><li>first_kex_packet_follows：表示是否有猜测数据包</li></ul><p>在达成共识的过程中，基本以客户端中的算法排序优先匹配</p><p>（6）服务端算法表报文</p><ul><li>packet_length：0x00 00 04 14（1044）</li><li>padding_length：0x05（5）</li><li>SSH_MSG_SERVICE_ACCEPT：0x14（<code>SSH_MSG_KEXINIT</code>）</li><li>Cookie：0xd7 86 29 66…(16Byte)</li><li>kex_algorithms length：下方算法表长度</li><li>kex_algorithms list：算法表（字符串表示，逗号分隔）</li><li>server_host_key_algorithms length：下方算法表长度</li><li>server_host_key_algorithms list：算法表（字符串表示，逗号分隔）</li><li>encryption_algorithms_client_to_server length：下方算法表长度</li><li>encryption_algorithms_client_to_server list：算法表（字符串表示，逗号分隔）</li><li>encryption_algorithms_server_to_client length：下方算法表长度</li><li>encryption_algorithms_server_to_client list：算法表（字符串表示，逗号分隔）</li><li>mac_algorithms_client_to_server length：下方算法表长度</li><li>mac_algorithms_client_to_server list：算法表（字符串表示，逗号分隔）</li><li>mac_algorithms_server_to_client length：下方算法表长度</li><li>mac_algorithms_server_to_client list：算法表（字符串表示，逗号分隔）</li><li>compression_algorithms_client_to_server length：下方算法表长度</li><li>compression_algorithms_client_to_server list：算法表（字符串表示，逗号分隔）</li><li>compression_algorithms_server_to_client length：下方算法表长度</li><li>compression_algorithms_server_to_client list：算法表（字符串表示，逗号分隔）</li><li>languages_client_to_server length：下方算法表长度</li><li>languages_client_to_server list：算法表（字符串表示，逗号分隔）</li><li>languages_server_to_client length：下方算法表长度</li><li>languages_server_to_client list：算法表（字符串表示，逗号分隔）</li><li>first_kex_packet_follows：0x00</li><li>Reserved：0x00 00 00 00</li><li>Padding：0x00 00 00 00 00（<code>padding_length</code>长度）</li></ul><p>（7）客户端算法表报文</p><p>与服务端算法表格式相同</p><h2 id="密钥交换"><a href="#密钥交换" class="headerlink" title="密钥交换"></a>密钥交换</h2><p>通过双方协商，决定采用Elliptic Curve Diffie-Hellman方式进行密钥交换</p><p>（8）客户端Diffie-Hellman Init</p><ul><li>packet_length：0x00 00 00 2c</li><li>padding_length：0x06</li><li>MSG：0x1e（Elliptic Curve Diffie-Hellman Key Exchange Init）</li><li>客户端公钥长度：0x00 00 00 20（32）</li><li>客户端公钥：0xd1 d9 b8 6c 84 67 55 0f ca 84 6e 8b 0e 67 25 27 6b 50 ae ed a4 6d dc 0b 73 4c 15 ad e9 f5 51 66</li><li>Padding：0x91 f0 e8 0c f4 9b</li></ul><p>（9）服务端Diffie-Hellman Reply，New Keys，加密包</p><p>服务端的回复包含三部分内容，Key Exchange Reply、New Keys、 加密包</p><p>其中，Key Exchange Reply包括了密钥交换的结果</p><ul><li>packet_length：0x00 00 03 5c</li><li>padding_length：0x08</li><li>MSG：0x1f（Elliptic Curve Diffie-Hellman Key Exchange Reply）</li><li>Host Key Length：0x00 00 01 97</li><li>Host Key Type Length：0x00 00 00 07</li><li>Host Key Type：0x73 73 68 2d 72 73 21（ssh-rsa）</li><li>Multi Precision Integer Length：0x00 00 00 03</li><li>RSA public exponent (e)：0x01 00 01</li><li>Multi Precision Integer Length：0x00 00 01 81</li><li>RSA Modulus (N)：0x00 be 1b 4b 73 9d f8 37 0e 33…</li><li>ECDH server’s ephemeral public key length：0x00 00 00 20</li><li>ECDH server’s ephemeral public key (Q_S)：0x3a 2e 62 f6 ee…</li><li>KEX H signature length：0x00 00 01 8f</li><li>KEX H signature ：0x00 00 00 07 73 73 68 2d 72 73 61 00 00 01 80 a0…</li><li>Padding：0x00 00 00 00 00 00 00 00</li></ul><p>New Keys表示密钥交换完成，此后的内容都需要使用新密钥处理</p><ul><li>packet_length：0x00 00 00 0c</li><li>padding_length：0x0a</li><li>MSG：0x15（<code>SSH_MSG_NEWKEYS</code>）</li><li>Padding：0x00 00 00 00 00 00 00 00 00 00</li></ul><p>后续的数据已经被加密，无法查看内容，推测是与客户端进行登录认证的协商</p><p>（10）客户端New Keys</p><p>客户端的New Keys包与服务端相同，后续客户端发送数据也都被加密处理</p>]]></content>
    
    
    <categories>
      
      <category>网络编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络编程</tag>
      
      <tag>SSH</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在Windows中使用Linux——WSL</title>
    <link href="/2023/11/17/WSL.html"/>
    <url>/2023/11/17/WSL.html</url>
    
    <content type="html"><![CDATA[<p><a href="https://learn.microsoft.com/zh-cn/windows/wsl/">https://learn.microsoft.com/zh-cn/windows/wsl/</a></p><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>豆知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>豆知识</tag>
      
      <tag>环境配置</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
