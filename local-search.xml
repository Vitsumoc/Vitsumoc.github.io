<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>MQTT 5.0 中文文档(施工中)</title>
    <link href="/2024/01/06/mqtt-v5-0-chinese.html"/>
    <url>/2024/01/06/mqtt-v5-0-chinese.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>原文 <a href="https://docs.oasis-open.org/mqtt/mqtt/v5.0/mqtt-v5.0.html">MQTT Version 5.0</a><br><strong>[mqtt-v5.0]</strong><br>MQTT Version 5.0. Edited by Andrew Banks, Ed Briggs, Ken Borgendale, and Rahul Gupta. 07 March 2019. OASIS Standard. <a href="https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html">https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html</a>. Latest version: <a href="https://docs.oasis-open.org/mqtt/mqtt/v5.0/mqtt-v5.0.html">https://docs.oasis-open.org/mqtt/mqtt/v5.0/mqtt-v5.0.html</a>.</p></blockquote><span id="more"></span><head>  <style>    :root {      --vc-marked: #ffc107;      --vc-referred: #EE0000;    }    [data-user-color-scheme="dark"] {      --vc-marked: #886c57;      --vc-referred: #EE0000;    }    .bold {      font-weight: bold;    }    .vcLinked {      color: var(--post-link-color);    }    .vcMarked {      background: var(--vc-marked);    }    .vcReferred {      color: var(--vc-referred);    }  </style></head><h1 id="MQTT-5-0"><a href="#MQTT-5-0" class="headerlink" title="MQTT 5.0"></a>MQTT 5.0</h1><p>OASIS 标准</p><p>2019年3月7日</p><h2 id="规范-URIs"><a href="#规范-URIs" class="headerlink" title="规范 URIs"></a>规范 URIs</h2><h3 id="此版本"><a href="#此版本" class="headerlink" title="此版本"></a>此版本</h3><p><a href="https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.docx">https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.docx</a> (权威性)<br><a href="https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html">https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html</a><br><a href="https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.pdf">https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.pdf</a></p><h3 id="前一版本"><a href="#前一版本" class="headerlink" title="前一版本"></a>前一版本</h3><p><a href="http://docs.oasis-open.org/mqtt/mqtt/v5.0/cos01/mqtt-v5.0-cos01.docx">http://docs.oasis-open.org/mqtt/mqtt/v5.0/cos01/mqtt-v5.0-cos01.docx</a> (权威性)<br><a href="http://docs.oasis-open.org/mqtt/mqtt/v5.0/cos01/mqtt-v5.0-cos01.html">http://docs.oasis-open.org/mqtt/mqtt/v5.0/cos01/mqtt-v5.0-cos01.html</a><br><a href="http://docs.oasis-open.org/mqtt/mqtt/v5.0/cos01/mqtt-v5.0-cos01.pdf">http://docs.oasis-open.org/mqtt/mqtt/v5.0/cos01/mqtt-v5.0-cos01.pdf</a></p><h3 id="最新版本"><a href="#最新版本" class="headerlink" title="最新版本"></a>最新版本</h3><p><a href="https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.docx">https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.docx</a> (权威性)<br><a href="https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html">https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html</a><br><a href="https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.pdf">https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.pdf</a></p><h3 id="技术委员会"><a href="#技术委员会" class="headerlink" title="技术委员会"></a>技术委员会</h3><p><a href="https://www.oasis-open.org/committees/mqtt/">OASIS Message Queuing Telemetry Transport (MQTT) TC</a></p><h3 id="主席"><a href="#主席" class="headerlink" title="主席"></a>主席</h3><p>Richard Coppen (<a href="mailto:&#x63;&#x6f;&#112;&#112;&#x65;&#110;&#x40;&#x75;&#107;&#x2e;&#x69;&#x62;&#109;&#46;&#x63;&#111;&#x6d;">&#x63;&#x6f;&#112;&#112;&#x65;&#110;&#x40;&#x75;&#107;&#x2e;&#x69;&#x62;&#109;&#46;&#x63;&#111;&#x6d;</a>), <a href="http://www.ibm.com/">IBM</a></p><h3 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h3><p>Andrew Banks (<a href="mailto:&#x61;&#x6e;&#x64;&#x72;&#x65;&#119;&#95;&#98;&#x61;&#110;&#107;&#x73;&#x40;&#117;&#107;&#46;&#x69;&#98;&#109;&#46;&#99;&#111;&#109;">&#x61;&#x6e;&#x64;&#x72;&#x65;&#119;&#95;&#98;&#x61;&#110;&#107;&#x73;&#x40;&#117;&#107;&#46;&#x69;&#98;&#109;&#46;&#99;&#111;&#109;</a>), <a href="http://www.ibm.com/">IBM</a><br>Ed Briggs (<a href="mailto:&#x65;&#x64;&#98;&#114;&#x69;&#x67;&#103;&#115;&#64;&#x6d;&#x69;&#x63;&#x72;&#111;&#x73;&#111;&#x66;&#116;&#x2e;&#x63;&#111;&#109;">&#x65;&#x64;&#98;&#114;&#x69;&#x67;&#103;&#115;&#64;&#x6d;&#x69;&#x63;&#x72;&#111;&#x73;&#111;&#x66;&#116;&#x2e;&#x63;&#111;&#109;</a>), <a href="http://www.microsoft.com/">Microsoft</a><br>Ken Borgendale (<a href="mailto:&#x6b;&#119;&#98;&#64;&#x75;&#115;&#46;&#105;&#98;&#x6d;&#46;&#99;&#x6f;&#109;">&#x6b;&#119;&#98;&#64;&#x75;&#115;&#46;&#105;&#98;&#x6d;&#46;&#99;&#x6f;&#109;</a>), <a href="http://www.ibm.com/">IBM</a><br>Rahul Gupta (<a href="mailto:&#114;&#97;&#x68;&#x75;&#x6c;&#x2e;&#103;&#x75;&#112;&#x74;&#97;&#64;&#117;&#115;&#46;&#x69;&#98;&#109;&#46;&#99;&#111;&#x6d;">&#114;&#97;&#x68;&#x75;&#x6c;&#x2e;&#103;&#x75;&#112;&#x74;&#97;&#64;&#117;&#115;&#46;&#x69;&#98;&#109;&#46;&#99;&#111;&#x6d;</a>), <a href="http://www.ibm.com/">IBM</a></p><h3 id="相关工作"><a href="#相关工作" class="headerlink" title="相关工作"></a>相关工作</h3><p>本规范取代：</p><ul><li><em>MQTT 3.1.1</em>  由 Andrew Banks 和 Rahul Gupta 编辑发布与 2014年10月29日。 OASIS 标准 <a href="http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html">http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html</a> 最新版本：<a href="http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/mqtt-v3.1.1.html">http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/mqtt-v3.1.1.html</a></li></ul><p>本规范涉及：</p><ul><li><em>MQTT and the NIST Cybersecurity Framework Version 1.0</em> 由 Geoff Brown 和 Louis-Philippe Lamoureux 编辑发布。最新版本： <a href="http://docs.oasis-open.org/mqtt/mqtt-nist-cybersecurity/v1.0/mqtt-nist-cybersecurity-v1.0.html">http://docs.oasis-open.org/mqtt/mqtt-nist-cybersecurity/v1.0/mqtt-nist-cybersecurity-v1.0.html</a></li></ul><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>MQTT 是一个 客户端&#x2F;服务器 架构，采用 订阅&#x2F;发布 模式的消息传输协议。是一套轻量级的、开放的、简单且易于实现的标准。这些特性使得他适用于多种场景，包括一些资源受限的场景比如机器和机器之间的通信（M2M）或是物联网（IoT）场景，这些场景要求较小的代码空间占用，或是网络带宽非常珍贵。</p><p>MQTT 基于 TCP&#x2F;IP 或其他提供了顺序、无包丢失、双向链接的网络协议。MQTT 的特性包括：</p><ul><li>通过 订阅&#x2F;发布 模式实现一对多的消息传输和应用程序解耦。</li><li>与负载内容无关的消息传输。</li><li>三种不同服务质量(QoS)的消息传输：<ul><li>至多一次(At most once)，根据操作环境情况尽最大努力来传输消息，消息可能会丢失。例如这种模式可以用于传感器数据采集，单次的消息的丢失并不重要，因为下一个消息很快就会到来。</li><li>至少一次(At least once)，可以确保消息到达，但是可能会造成消息重复。</li><li>确保一次(Exactly once)，可以确保消息只到达一次，例如这种消息可以用于账单交易信息，在交易场景下消息的丢失或者重复处理都会带来糟糕的后果。</li></ul></li><li>小型的协议头，用来降低网络负载。</li><li>当发生异常断开时通知相关方的机制。</li></ul><h3 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h3><p>本文档最后一次修订的日期和级别都已经在前文中描述。检查<a href="#%E6%9C%80%E6%96%B0%E7%89%88%E6%9C%AC">最新版本</a>位置了解本文档后续可能的修订版。技术委员会(TC)制作的其他版本文档或其他技术项目均在此提供 <a href="https://www.oasis-open.org/committees/tc_home.php?wg_abbrev=mqtt#technical">https://www.oasis-open.org/committees/tc_home.php?wg_abbrev=mqtt#technical</a></p><p>技术委员会成员应将对此文档的评论发送至技术委员会邮件列表，其他人需在技术委员会的网站(<a href="https://www.oasis-open.org/committees/mqtt/)%E8%AE%A2%E9%98%85%E5%85%AC%E5%85%B1%E8%AF%84%E8%AE%BA%E5%88%97%E8%A1%A8%E5%90%8E%EF%BC%8C%E9%80%9A%E8%BF%87%E7%82%B9%E5%87%BB[%E5%8F%91%E9%80%81%E8%AF%84%E8%AE%BA](https://www.oasis-open.org/committees/comments/index.php?wg_abbrev=mqtt)%E5%B0%86%E8%AF%84%E8%AE%BA%E5%8F%91%E9%80%81%E8%87%B3%E5%85%AC%E5%85%B1%E8%AF%84%E8%AE%BA%E5%88%97%E8%A1%A8%E3%80%82">https://www.oasis-open.org/committees/mqtt/)订阅公共评论列表后，通过点击[发送评论](https://www.oasis-open.org/committees/comments/index.php?wg_abbrev=mqtt)将评论发送至公共评论列表。</a></p><p>本规范是在 OASIS <a href="https://www.oasis-open.org/policies-guidelines/ipr">知识产权政策</a>的 <a href="https://www.oasis-open.org/policies-guidelines/ipr#Non-Assertion-Mode">Non-Assertion</a>模式下提供的，该模式是技术委员会成立时选择的。关于是否有实施本规范依赖的已经披露的专利信息或是关于任何专利许可条款的信息，请参考技术委员会网站中的知识产权部分(<a href="https://www.oasis-open.org/committees/mqtt/ipr.php)%E3%80%82">https://www.oasis-open.org/committees/mqtt/ipr.php)。</a></p><p>请注意，本工作产品声明为规范的任何机器可读内容（<a href="https://www.oasis-open.org/policies-guidelines/tc-process#wpComponentsCompLang">计算机语言定义</a>）均以单独的纯文本文件提供。 如果任何此类纯文本文件与工作产品的散文叙述性文档中的显示内容之间存在差异，则以单独的纯文本文件中的内容为准。</p><h3 id="引用格式"><a href="#引用格式" class="headerlink" title="引用格式"></a>引用格式</h3><p>引用本规范时，需要使用如下引用格式：</p><p><strong>[mqtt-v5.0]</strong></p><p>MQTT Version 5.0. Edited by Andrew Banks, Ed Briggs, Ken Borgendale, and Rahul Gupta. 07 March 2019. OASIS Standard. <a href="https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html">https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html</a>. Latest version: <a href="https://docs.oasis-open.org/mqtt/mqtt/v5.0/mqtt-v5.0.html">https://docs.oasis-open.org/mqtt/mqtt/v5.0/mqtt-v5.0.html</a>.</p><h1 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h1><p>Copyright © OASIS Open 2019. All Rights Reserved.</p><p>以下文本中所有 <code>大写</code> 术语均具有 <code>OASIS</code> 知识产权政策（the <code>OASIS IPR Policy</code>）中指定的含义。 完整的<a href="https://www.oasis-open.org/policies-guidelines/ipr">政策</a>可以在 <code>OASIS</code> 网站上找到。</p><p>本文档及其一本可以被复制并提供给其他人，本文档的原文或对本文档的部分引用、评论、解释说明等衍生品的制作、复制、出版和分发均没有限制，但上述许可的前提条件是上述的版权说明和本节内容必须包括在此类副本和衍生品内。并且，对于本文档本身的内容不得做任何修改，包括删除版权申明或对 <code>OASIS</code> 的引用，除非是为了 <code>OASIS</code> 技术委员会为了制作某些文件或者交付成果的需要（在这种情况下，必须遵守 OASIS 知识产权政策中规定的适用于版权的规则）或是将本文档翻译为英语之外的其他语言。</p><p>上述授予的有限权限是永久性的，<code>OASIS</code> 或其继承者或受让人不会撤销。</p><p>本文档和此处包含的信息均按<code>原样</code>提供，<code>OASIS 不承担任何明示或暗示的保证，包括但不限于使用此处信息不会侵犯任何所有权的任何保证或任何暗示的保证商用能力或特定用途的适用性</code>。</p><p><code>OASIS</code> 要求任何 <code>OASIS</code> 方或任何其他方认为其专利主张必然会因实施本 <code>OASIS</code> 委员会规范或 <code>OASIS</code> 标准而受到侵犯时，通知 OASIS 技术委员会管理员并表明其愿意向此类人员授予专利许可。 专利权利要求的方式与制定本规范的 <code>OASIS</code> 技术委员会的 IPR 模式一致。</p><p><code>OASIS</code> 邀请任何一方联系 <code>OASIS</code> 技术委员会管理员，如果它知道任何专利权利要求的所有权主张，如果专利持有者不愿意使用与制定本规范的 <code>OASIS</code> 技术委员会的 <code>IPR</code> 模式一致的方式。 <code>OASIS</code> 可能会在其网站上包含此类声明，但不承担任何这样做的义务。</p><p>对于可能声称与本文档中描述的技术的实施或使用有关的任何知识产权或其他权利的有效性或范围，或者此类权利下的任何许可可能或可能不可用的范围，<code>OASIS</code> 不持任何立场 ; 他也不代表他已做出任何努力来确定任何此类权利。 有关 <code>OASIS</code> 与 <code>OASIS</code> 技术委员会制定的任何文件或交付物的权利有关的程序的信息，请参见 <code>OASIS</code> 网站。 可供发布的权利主张的副本以及可供使用的许可证的任何保证，或者本 <code>OASIS</code> 委员会规范的实施者或用户尝试获得使用此类专有权利的一般许可证或许可的结果，或 <code>OASIS</code> 标准，可从 <code>OASIS</code> 技术委员会管理员处获取。 <code>OASIS</code> 不声明任何信息或知识产权列表在任何时候都是完整的，也不声明该列表中的任何权利要求实际上是基本权利要求。</p><p>名称<code>“OASIS”</code>是 <code>OASIS</code>（本规范的所有者和开发者）的商标，仅用于指代该组织及其官方输出。 <code>OASIS</code> 欢迎参考、实施和使用规范，同时保留强制执行其标记以防止误导性使用的权利。 请参阅 <a href="https://www.oasis-open.org/policies-guidelines/trademark">https://www.oasis-open.org/policies-guidelines/trademark</a> 了解上述指南。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul><li>1 <a href="#1-%E4%BB%8B%E7%BB%8D">介绍</a><ul><li>1.0 <a href="#1-0-%E7%9F%A5%E8%AF%86%E4%BA%A7%E6%9D%83%E6%94%BF%E7%AD%96">知识产权政策</a></li><li>1.1 <a href="#1-1-MQTT%E8%A7%84%E8%8C%83%E7%BB%93%E6%9E%84">MQTT规范结构</a></li><li>1.2 <a href="#1-2-%E6%9C%AF%E8%AF%AD%E8%A1%A8">术语表</a></li><li>1.3 <a href="#1-3-%E8%A7%84%E8%8C%83%E6%80%A7%E5%BC%95%E7%94%A8">规范性引用</a></li><li>1.4 <a href="#1-4-%E9%9D%9E%E8%A7%84%E8%8C%83%E6%80%A7%E5%BC%95%E7%94%A8">非规范性引用</a></li><li>1.5 <a href="#1-5-%E6%95%B0%E6%8D%AE%E8%A1%A8%E7%A4%BA">数据表示</a><ul><li>1.5.1 <a href="#1-5-1-%E6%AF%94%E7%89%B9%E4%BD%8D">比特位</a></li><li>1.5.2 <a href="#1-5-2-2%E5%AD%97%E8%8A%82%E6%95%B4%E6%95%B0">2字节整数</a></li><li>1.5.3 <a href="#1-5-3-4%E5%AD%97%E8%8A%82%E6%95%B4%E6%95%B0">4字节整数</a></li><li>1.5.4 <a href="#1-5-4-UTF-8%E5%AD%97%E7%AC%A6%E4%B8%B2">UTF-8字符串</a></li><li>1.5.5 <a href="#1-5-5-%E5%8F%98%E9%95%BF%E6%95%B4%E6%95%B0">变长整数</a></li><li>1.5.6 <a href="#1-5-6-%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%95%B0%E6%8D%AE">二进制数据</a></li><li>1.5.7 <a href="#1-5-7-UTF-8%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%AF%B9">UTF-8字符串对</a></li></ul></li><li>1.6 <a href="#1-6-%E5%AE%89%E5%85%A8%E6%80%A7">安全性</a></li><li>1.7 <a href="#1-7-%E7%BC%96%E8%BE%91%E7%BA%A6%E5%AE%9A">编辑约定</a></li><li>1.8 <a href="#1-8-%E5%8F%98%E6%9B%B4%E5%8E%86%E5%8F%B2">变更历史</a><ul><li>1.8.1 <a href="#1-8-1-MQTT-v3-1-1">MQTT v3.1.1</a></li><li>1.8.2 <a href="#1-8-2-MQTT-v5-0">MQTT v5.0</a></li></ul></li></ul></li><li>2 <a href="#2-MQTT%E5%8C%85%E6%A0%BC%E5%BC%8F">MQTT包格式</a><ul><li>2.1 <a href="#2-1-MQTT%E5%8C%85%E7%BB%93%E6%9E%84">MQTT包结构</a><ul><li>2.1.1 <a href="#2-1-1-%E5%9B%BA%E5%AE%9A%E5%A4%B4">固定头</a></li><li>2.1.2 <a href="#2-1-2-MQTT%E5%8C%85%E7%B1%BB%E5%9E%8B">MQTT包类型</a></li><li>2.1.3 <a href="2-1-3-%E6%8E%A7%E5%88%B6%E6%A0%87%E8%AF%86">控制标识</a></li><li>2.1.4 <a href="#2-1-4-%E5%89%A9%E4%BD%99%E9%95%BF%E5%BA%A6">剩余长度</a></li></ul></li><li>2.2 <a href="#2-2-%E5%8F%AF%E5%8F%98%E5%A4%B4">可变头</a><ul><li>2.2.1 <a href="#2-2-1-%E5%8C%85ID">包ID</a></li><li>2.2.2 <a href="#2-2-2-%E5%B1%9E%E6%80%A7%E9%9B%86">属性集</a><ul><li>2.2.2.1 <a href="#2-2-2-1-%E5%B1%9E%E6%80%A7%E9%95%BF%E5%BA%A6">属性长度</a></li><li>2.2.2.2 <a href="#2-2-2-2-%E5%B1%9E%E6%80%A7">属性</a></li></ul></li></ul></li><li>2.3 <a href="#2-3-%E8%BD%BD%E8%8D%B7">载荷</a></li><li>2.4 <a href="#2-4-%E5%8E%9F%E5%9B%A0%E7%A0%81">原因码</a></li></ul></li><li>3 <a href="#3-MQTT%E5%8C%85">MQTT包</a><ul><li>3.1 <a href="#3-1-CONNECT-%E8%BF%9E%E6%8E%A5%E8%AF%B7%E6%B1%82">CONNECT - 连接请求</a><ul><li>3.1.1 <a href="#3-1-1-CONNECT%E5%9B%BA%E5%AE%9A%E5%A4%B4">CONNECT固定头</a></li><li>3.1.2 <a href="#3-1-2-CONNECT%E5%8F%AF%E5%8F%98%E5%A4%B4">CONNECT可变头</a><ul><li>3.1.2.1 <a href="#3-1-2-1-%E5%8D%8F%E8%AE%AE%E5%90%8D">协议名</a></li><li>3.1.2.2 <a href="#3-1-2-2-%E5%8D%8F%E8%AE%AE%E7%89%88%E6%9C%AC">协议版本</a></li><li>3.1.2.3 <a href="#3-1-2-3-%E8%BF%9E%E6%8E%A5%E6%A0%87%E8%AF%86">连接标识</a></li><li>3.1.2.4 <a href="#3-1-2-4-%E5%85%A8%E6%96%B0%E5%BC%80%E5%A7%8B">全新开始</a></li><li>3.1.2.5 <a href="#3-1-2-5-%E9%81%97%E5%98%B1%E6%A0%87%E8%AF%86">遗嘱标识</a></li><li>3.1.2.6 <a href="#3-1-2-6-%E9%81%97%E5%98%B1QoS">遗嘱QoS</a></li><li>3.1.2.7 <a href="#3-1-2-7-%E9%81%97%E5%98%B1%E4%BF%9D%E7%95%99%E6%B6%88%E6%81%AF">遗嘱保留消息</a></li><li>3.1.2.8 <a href="#3-1-2-8-%E7%94%A8%E6%88%B7%E5%90%8D%E6%A0%87%E8%AF%86">用户名标识</a></li><li>3.1.2.9 <a href="#3-1-2-9-%E5%AF%86%E7%A0%81%E6%A0%87%E8%AF%86">密码标识</a></li><li>3.1.2.10 <a href="#3-1-2-10-%E4%BF%9D%E6%B4%BB%E6%97%B6%E9%97%B4">保活时间</a></li><li>3.1.2.11 <a href="#3-1-2-11-CONNECT-%E5%B1%9E%E6%80%A7%E9%9B%86">CONNECT 属性集</a><ul><li>3.1.2.11.1 <a href="#3-1-2-11-1-%E5%B1%9E%E6%80%A7%E9%95%BF%E5%BA%A6">属性长度</a></li><li>3.1.2.11.2 <a href="#3-1-2-11-2-%E4%BC%9A%E8%AF%9D%E8%BF%87%E6%9C%9F%E9%97%B4%E9%9A%94">会话过期间隔</a></li><li>3.1.2.11.3 <a href="#3-1-2-11-3-%E6%8E%A5%E6%94%B6%E6%9C%80%E5%A4%A7%E5%80%BC">接收最大值</a></li><li>3.1.2.11.4 <a href="#3-1-2-11-4-%E6%9C%80%E5%A4%A7%E5%8C%85%E5%B0%BA%E5%AF%B8">最大包尺寸</a></li><li>3.1.2.11.5 <a href="#3-1-2-11-5-%E4%B8%BB%E9%A2%98%E5%88%AB%E5%90%8D%E6%9C%80%E5%A4%A7%E5%80%BC">主题别名最大值</a></li><li>3.1.2.11.6 <a href="#3-1-2-11-6-%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94%E4%BF%A1%E6%81%AF">请求响应信息</a></li><li>3.1.2.11.7 <a href="#3-1-2-11-7-%E8%AF%B7%E6%B1%82%E9%97%AE%E9%A2%98%E4%BF%A1%E6%81%AF">请求问题信息</a></li><li>3.1.2.11.8 <a href="#3-1-2-11-8-%E7%94%A8%E6%88%B7%E5%B1%9E%E6%80%A7">用户属性</a></li><li>3.1.2.11.9 <a href="#3-1-2-11-9-%E8%AE%A4%E8%AF%81%E6%96%B9%E5%BC%8F">认证方式</a></li><li>3.1.2.11.10 <a href="#3-1-2-11-10-%E8%AE%A4%E8%AF%81%E6%95%B0%E6%8D%AE">认证数据</a></li></ul></li><li>3.1.2.12 <a href="#3-1-2-12-%E5%8F%AF%E5%8F%98%E5%A4%B4%E9%9D%9E%E8%A7%84%E8%8C%83%E6%80%A7%E7%A4%BA%E4%BE%8B">可变头非规范性示例</a></li></ul></li><li>3.1.3 <a href="#3-1-3-CONNECT%E8%BD%BD%E8%8D%B7">CONNECT载荷</a><ul><li>3.1.3.1 <a href="#3-1-3-1-%E5%AE%A2%E6%88%B7%E7%AB%AFID">客户端ID</a></li><li>3.1.3.2 <a href="#3-1-3-2-%E9%81%97%E5%98%B1%E5%B1%9E%E6%80%A7%E9%9B%86">遗嘱属性集</a><ul><li>3.1.3.2.1 <a href="#3-1-3-2-1-%E5%B1%9E%E6%80%A7%E9%95%BF%E5%BA%A6">属性长度</a></li><li>3.1.3.2.2 <a href="#3-1-3-2-2-%E9%81%97%E5%98%B1%E5%BB%B6%E8%BF%9F%E9%97%B4%E9%9A%94">遗嘱延迟间隔</a></li><li>3.1.3.2.3 <a href="#3-1-3-2-3-%E8%BD%BD%E8%8D%B7%E6%A0%BC%E5%BC%8F%E6%A0%87%E8%AF%86">载荷格式标识</a></li><li>3.1.3.2.4 <a href="#3-1-3-2-4-%E6%B6%88%E6%81%AF%E8%BF%87%E6%9C%9F%E9%97%B4%E9%9A%94">消息过期间隔</a></li><li>3.1.3.2.5 <a href="#3-1-3-2-5-%E5%86%85%E5%AE%B9%E7%B1%BB%E5%9E%8B">内容类型</a></li><li>3.1.3.2.6 <a href="#3-1-3-2-6-%E5%93%8D%E5%BA%94%E4%B8%BB%E9%A2%98">响应主题</a></li><li>3.1.3.2.7 <a href="#3-1-3-2-7-%E5%85%B3%E8%81%94%E6%95%B0%E6%8D%AE">关联数据</a></li><li>3.1.3.2.8 <a href="#3-1-3-2-8-%E7%94%A8%E6%88%B7%E5%B1%9E%E6%80%A7">用户属性</a></li></ul></li><li>3.1.3.3 <a href="#3-1-3-3-%E9%81%97%E5%98%B1%E4%B8%BB%E9%A2%98">遗嘱主题</a></li><li>3.1.3.4 <a href="3-1-3-4-%E9%81%97%E5%98%B1%E8%BD%BD%E8%8D%B7">遗嘱载荷</a></li><li>3.1.3.5 <a href="#3-1-3-5-%E7%94%A8%E6%88%B7%E5%90%8D">用户名</a></li><li>3.1.3.6 <a href="#3-1-3-6-%E5%AF%86%E7%A0%81">密码</a></li></ul></li><li>3.1.4 <a href="#3-1-4-CONNECT%E5%8A%A8%E4%BD%9C">CONNECT动作</a></li></ul></li><li>3.2 <a href="#3-2-CONNACK-%E2%80%93-%E8%BF%9E%E6%8E%A5%E5%9B%9E%E5%A4%8D">CONNACK – 连接回复</a><ul><li>3.2.1 CONNACK Fixed Header</li><li>3.2.2 CONNACK Variable Header<ul><li>3.2.2.1 Connect Acknowledge Flags<ul><li>3.2.2.1.1 Session Present</li></ul></li><li>3.2.2.2 Connect Reason Code</li><li>3.2.2.3 CONNACK Properties<ul><li>3.2.2.3.1 Property Length</li><li>3.2.2.3.2 Session Expiry Interval</li><li>3.2.2.3.3 Receive Maximum</li><li>3.2.2.3.4 Maximum QoS</li><li>3.2.2.3.5 Retain Available</li><li>3.2.2.3.6 Maximum Packet Size</li><li>3.2.2.3.7 Assigned Client Identifier</li><li>3.2.2.3.8 Topic Alias Maximum</li><li>3.2.2.3.9 Reason String</li><li>3.2.2.3.10 User Property</li><li>3.2.2.3.11 Wildcard Subscription Available</li><li>3.2.2.3.12 Subscription Identifiers Available</li><li>3.2.2.3.13 Shared Subscription Available</li><li>3.2.2.3.14 Server Keep Alive</li><li>3.2.2.3.15 Response Information</li><li>3.2.2.3.16 Server Reference</li><li>3.2.2.3.17 Authentication Method</li><li>3.2.2.3.18 Authentication Data</li></ul></li></ul></li><li>3.2.3 CONNACK Payload</li></ul></li><li>3.3 PUBLISH – Publish message<ul><li>3.3.1 <a href="#3-3-1-PUBLISH-%E5%9B%BA%E5%AE%9A%E5%A4%B4">PUBLISH 固定头</a><ul><li>3.3.1.1 DUP</li><li>3.3.1.2 QoS</li><li>3.3.1.3 RETAIN</li><li>3.3.1.4 Remaining Length</li></ul></li><li>3.3.2 PUBLISH Variable Header<ul><li>3.3.2.1 Topic Name</li><li>3.3.2.2 Packet Identifier</li><li>3.3.2.3 PUBLISH Properties<ul><li>3.3.2.3.1 Property Length</li><li>3.3.2.3.2 Payload Format Indicator</li><li>3.3.2.3.3 Message Expiry Interval&#96;</li><li>3.3.2.3.4 Topic Alias</li><li>3.3.2.3.5 Response Topic</li><li>3.3.2.3.6 Correlation Data</li><li>3.3.2.3.7 User Property</li><li>3.3.2.3.8 Subscription Identifier</li><li>3.3.2.3.9 Content Type</li></ul></li></ul></li><li>3.3.3 PUBLISH Payload</li><li>3.3.4 PUBLISH Actions</li></ul></li><li>3.4 PUBACK – Publish acknowledgement<ul><li>3.4.1 PUBACK Fixed Header</li><li>3.4.2 PUBACK Variable Header<ul><li>3.4.2.1 PUBACK Reason Code</li><li>3.4.2.2 PUBACK Properties<ul><li>3.4.2.2.1 Property Length</li><li>3.4.2.2.2 Reason String</li><li>3.4.2.2.3 User Property</li></ul></li></ul></li><li>3.4.3 PUBACK Payload</li><li>3.4.4 PUBACK Actions</li></ul></li><li>3.5 PUBREC – Publish received (QoS 2 delivery part 1)<ul><li>3.5.1 PUBREC Fixed Header</li><li>3.5.2 PUBREC Variable Header<ul><li>3.5.2.1 PUBREC Reason Code</li><li>3.5.2.2 PUBREC Properties<ul><li>3.5.2.2.1 Property Length</li><li>3.5.2.2.2 Reason String</li><li>3.5.2.2.3 User Property</li></ul></li></ul></li><li>3.5.3 PUBREC Payload</li><li>3.5.4 PUBREC Actions</li></ul></li><li>3.6 PUBREL – Publish release (QoS 2 delivery part 2)<ul><li>3.6.1 PUBREL Fixed Header</li><li>3.6.2 PUBREL Variable Header<ul><li>3.6.2.1 PUBREL Reason Code</li><li>3.6.2.2 PUBREL Properties<ul><li>3.6.2.2.1 Property Length</li><li>3.6.2.2.2 Reason String</li><li>3.6.2.2.3 User Property</li></ul></li></ul></li><li>3.6.3 PUBREL Payload</li><li>3.6.4 PUBREL Actions</li></ul></li><li>3.7 PUBCOMP – Publish complete (QoS 2 delivery part 3)<ul><li>3.7.1 PUBCOMP Fixed Header</li><li>3.7.2 PUBCOMP Variable Header<ul><li>3.7.2.1 PUBCOMP Reason Code</li><li>3.7.2.2 PUBCOMP Properties<ul><li>3.7.2.2.1 Property Length</li><li>3.7.2.2.2 Reason String</li><li>3.7.2.2.3 User Property</li></ul></li></ul></li><li>3.7.3 PUBCOMP Payload</li><li>3.7.4 PUBCOMP Actions</li></ul></li><li>3.8 SUBSCRIBE - Subscribe request<ul><li>3.8.1 SUBSCRIBE Fixed Header</li><li>3.8.2 SUBSCRIBE Variable Header<ul><li>3.8.2.1 SUBSCRIBE Properties<ul><li>3.8.2.1.1 Property Length</li><li>3.8.2.1.2 Subscription Identifier</li><li>3.8.2.1.3 User Property</li></ul></li></ul></li><li>3.8.3 SUBSCRIBE Payload<ul><li>3.8.3.1 Subscription Options</li></ul></li><li>3.8.4 SUBSCRIBE Actions</li></ul></li><li>3.9 SUBACK – Subscribe acknowledgement<ul><li>3.9.1 SUBACK Fixed Header</li><li>3.9.2 SUBACK Variable Header<ul><li>3.9.2.1 SUBACK Properties<ul><li>3.9.2.1.1 Property Length</li><li>3.9.2.1.2 Reason String</li><li>3.9.2.1.3 User Property</li></ul></li></ul></li><li>3.9.3 SUBACK Payload</li></ul></li><li>3.10 UNSUBSCRIBE – Unsubscribe request<ul><li>3.10.1 UNSUBSCRIBE Fixed Header</li><li>3.10.2 UNSUBSCRIBE Variable Header<ul><li>3.10.2.1 UNSUBSCRIBE Properties<ul><li>3.10.2.1.1 Property Length</li><li>3.10.2.1.2 User Property</li></ul></li></ul></li><li>3.10.3 UNSUBSCRIBE Payload</li><li>3.10.4 UNSUBSCRIBE Actions</li></ul></li><li>3.11 UNSUBACK – Unsubscribe acknowledgement<ul><li>3.11.1 UNSUBACK Fixed Header</li><li>3.11.2 UNSUBACK Variable Header<ul><li>3.11.2.1 UNSUBACK Properties<ul><li>3.11.2.1.1 Property Length</li><li>3.11.2.1.2 Reason String</li><li>3.11.2.1.3 User Property</li></ul></li></ul></li><li>3.11.3 UNSUBACK Payload</li></ul></li><li>3.12 PINGREQ – PING request<ul><li>3.12.1 PINGREQ Fixed Header</li><li>3.12.2 PINGREQ Variable Header</li><li>3.12.3 PINGREQ Payload</li><li>3.12.4 PINGREQ Actions</li></ul></li><li>3.13 PINGRESP – PING response<ul><li>3.13.1 PINGRESP Fixed Header</li><li>3.13.2 PINGRESP Variable Header</li><li>3.13.3 PINGRESP Payload</li><li>3.13.4 PINGRESP Actions</li></ul></li><li>3.14 DISCONNECT – Disconnect notification<ul><li>3.14.1 DISCONNECT Fixed Header</li><li>3.14.2 DISCONNECT Variable Header<ul><li>3.14.2.1 Disconnect Reason Code</li><li>3.14.2.2 DISCONNECT Properties<ul><li>3.14.2.2.1 Property Length</li><li>3.14.2.2.2 Session Expiry Interval</li><li>3.14.2.2.3 Reason String</li><li>3.14.2.2.4 User Property</li><li>3.14.2.2.5 Server Reference</li></ul></li></ul></li><li>3.14.3 DISCONNECT Payload</li><li>3.14.4 DISCONNECT Actions</li></ul></li><li>3.15 AUTH – Authentication exchange<ul><li>3.15.1 AUTH Fixed Header</li><li>3.15.2 AUTH Variable Header<ul><li>3.15.2.1 Authenticate Reason Code</li><li>3.15.2.2 AUTH Properties<ul><li>3.15.2.2.1 Property Length</li><li>3.15.2.2.2 Authentication Method</li><li>3.15.2.2.3 Authentication Data</li><li>3.15.2.2.4 Reason String</li><li>3.15.2.2.5 User Property</li></ul></li></ul></li><li>3.15.3 AUTH Payload</li><li>3.15.4 AUTH Actions</li></ul></li></ul></li><li>4 <a href="#4-%E6%93%8D%E4%BD%9C%E8%A1%8C%E4%B8%BA">操作行为</a><ul><li>4.1 <a href="#4-1-%E4%BC%9A%E8%AF%9D%E7%8A%B6%E6%80%81">会话状态</a><ul><li>4.1.1 <a href="#4-1-1-%E5%AD%98%E5%82%A8%E4%BC%9A%E8%AF%9D%E7%8A%B6%E6%80%81">存储会话状态</a></li><li>4.1.2 Session State non-normative examples</li></ul></li><li>4.2 <a href="#4-2-%E7%BD%91%E7%BB%9C%E8%BF%9E%E6%8E%A5">网络连接</a></li><li>4.3 Quality of Service levels and protocol flows<ul><li>4.3.1 QoS 0: At most once delivery</li><li>4.3.2 QoS 1: At least once delivery</li><li>4.3.3 QoS 2: Exactly once delivery</li></ul></li><li>4.4 Message delivery retry</li><li>4.5 Message receipt</li><li>4.6 Message ordering</li><li>4.7 <a href="#4-7-%E4%B8%BB%E9%A2%98%E5%90%8D%E5%92%8C%E4%B8%BB%E9%A2%98%E8%BF%87%E6%BB%A4%E5%99%A8">主题名和主题过滤器</a><ul><li>4.7.1 Topic wildcards<ul><li>4.7.1.1 Topic level separator</li><li>4.7.1.2 Multi-level wildcard</li><li>4.7.1.3 Single-level wildcard</li></ul></li><li>4.7.2 Topics beginning with $</li><li>4.7.3 Topic semantic and usage</li></ul></li><li>4.8 Subscriptions<ul><li>4.8.1 Non‑shared Subscriptions</li><li>4.8.2 Shared Subscriptions</li></ul></li><li>4.9 <a href="#4-9-%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6">流量控制</a></li><li>4.10 <a href="#4-10-%E8%AF%B7%E6%B1%82-%E5%93%8D%E5%BA%94">请求 &#x2F; 响应</a><ul><li>4.10.1 Basic Request Response (non-normative)</li><li>4.10.2 Determining a Response Topic value (non-normative)</li></ul></li><li>4.11 Server redirection</li><li>4.12 <a href="#4-12-%E5%A2%9E%E5%BC%BA%E8%AE%A4%E8%AF%81">增强认证</a><ul><li>4.12.1 Re-authentication</li></ul></li><li>4.13 <a href="#4-13-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86">错误处理</a><ul><li>4.13.1 Malformed Packet and Protocol Errors</li><li>4.13.2 Other errors</li></ul></li></ul></li><li>5 <a href="#5-%E5%AE%89%E5%85%A8%E6%80%A7%EF%BC%88%E9%9D%9E%E8%A7%84%E8%8C%83%E6%80%A7%EF%BC%89">安全性（非规范性）</a><ul><li>5.1 Introduction</li><li>5.2 MQTT solutions: security and certification</li><li>5.3 Lightweight crytography and constrained devices</li><li>5.4 Implementation notes<ul><li>5.4.1 Authentication of Clients by the Server</li><li>5.4.2 Authorization of Clients by the Server</li><li>5.4.3 Authentication of the Server by the Client</li><li>5.4.4 Integrity of Application Messages and MQTT Control Packets</li><li>5.4.5 Privacy of Application Messages and MQTT Control Packets</li><li>5.4.6 Non-repudiation of message transmission</li><li>5.4.7 Detecting compromise of Clients and Servers</li><li>5.4.8 Detecting abnormal behaviors</li><li>5.4.9 <a href="#5-4-9-%E5%A4%84%E7%90%86%E7%A6%81%E6%AD%A2%E7%9A%84Unicode%E7%A0%81%E6%AE%B5">处理禁止的Unicode码段</a><ul><li>5.4.9.1 Considerations for the use of Disallowed Unicode code points</li><li>5.4.9.2 Interactions between Publishers and Subscribers</li><li>5.4.9.3 Remedies</li></ul></li><li>5.4.10 Other security considerations</li><li>5.4.11 Use of SOCKS</li><li>5.4.12 Security profiles<ul><li>5.4.12.1 Clear communication profile</li><li>5.4.12.2 Secured network communication profile</li><li>5.4.12.3 Secured transport profile</li><li>5.4.12.4 Industry specific security profiles</li></ul></li></ul></li></ul></li><li>6 <a href="#6-%E4%BD%BF%E7%94%A8WebSocket%E4%BD%9C%E4%B8%BA%E4%BC%A0%E8%BE%93%E5%B1%82">使用WebSocket作为传输层</a><ul><li>6.1 IANA considerations</li></ul></li><li>7 <a href="#7-%E4%B8%80%E8%87%B4%E6%80%A7">一致性</a><ul><li>7.1 Conformance clauses<ul><li>7.1.1 MQTT Server conformance clause</li><li>7.1.2 MQTT Client conformance clause</li></ul></li></ul></li><li>Appendix A. Acknowledgments</li><li>Appendix B. Mandatory normative statement (non-normative)</li><li>附录 C. <a href="#%E9%99%84%E5%BD%95-C-MQTT-v5-0-%E6%96%B0%E7%89%B9%E6%80%A7%E6%B1%87%E6%80%BB%EF%BC%88%E9%9D%9E%E8%A7%84%E8%8C%83%E6%80%A7%EF%BC%89">MQTT v5.0 新特性汇总（非规范性）</a></li></ul><h1 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1 介绍"></a>1 介绍</h1><h2 id="1-0-知识产权政策"><a href="#1-0-知识产权政策" class="headerlink" title="1.0 知识产权政策"></a>1.0 知识产权政策</h2><p>本规范是在 OASIS <a href="https://www.oasis-open.org/policies-guidelines/ipr">知识产权政策</a>的 <a href="https://www.oasis-open.org/policies-guidelines/ipr#Non-Assertion-Mode">Non-Assertion</a>模式下提供的，该模式是技术委员会成立时选择的。关于是否有实施本规范依赖的已经披露的专利信息或是关于任何专利许可条款的信息，请参考技术委员会网站中的知识产权部分(<a href="https://www.oasis-open.org/committees/mqtt/ipr.php)%E3%80%82">https://www.oasis-open.org/committees/mqtt/ipr.php)。</a></p><h2 id="1-1-MQTT规范结构"><a href="#1-1-MQTT规范结构" class="headerlink" title="1.1 MQTT规范结构"></a>1.1 MQTT规范结构</h2><p>本规范分为七个章节：</p><ul><li>第一章 - <a href="#1-%E4%BB%8B%E7%BB%8D">介绍</a></li><li>第二章 - <a href="#2-MQTT%E5%8C%85%E7%BB%93%E6%9E%84">MQTT包格式</a></li><li>第三章 - <a href="#3-MQTT%E5%8C%85">MQTT包</a></li><li>第四章 - <a href="#4-%E6%93%8D%E4%BD%9C%E8%A1%8C%E4%B8%BA">操作行为</a></li><li>第五章 - <a href="#5-%E5%AE%89%E5%85%A8%E6%80%A7%EF%BC%88%E9%9D%9E%E8%A7%84%E8%8C%83%E6%80%A7%EF%BC%89">安全性</a></li><li>第六章 - <a href="#6-%E4%BD%BF%E7%94%A8WebSocket%E4%BD%9C%E4%B8%BA%E4%BC%A0%E8%BE%93%E5%B1%82">使用Websocket作为传输层</a></li><li>第七章 - <a href="#7-%E4%B8%80%E8%87%B4%E6%80%A7">一致性目标</a></li></ul><h2 id="1-2-术语表"><a href="#1-2-术语表" class="headerlink" title="1.2 术语表"></a>1.2 术语表</h2><p>本文档中的关键字 “必须(MUST)”，“必须不(MUST NOT)”，“需要(REQUIRED)”，“应该(SHALL)”，“不应该(SHALL NOT)”，“理应(SHOULD)”，“理应不(SHOULD NOT)”，“推荐(RECOMMENDED)”，“也许(MAY)”，和“可选(OPTIONAL)”按照IETF <a href="#1.3-RFC2119">RFC 2119</a>的定义阐释，除非在此类关键字出现的地方明确被标记为非规范性。</p><p><strong>网络连接:</strong></p><p><strong>由 MQTT 使用的传输协议提供的构造。</strong></p><ul><li>他在客户端与服务器之间提供连接。</li><li>他提供了有序、无丢失、双向传输数据流的能力。</li></ul><p>参考 <a href="#4-2-%E7%BD%91%E7%BB%9C%E8%BF%9E%E6%8E%A5">4.2 网络连接</a> 中提供的非规范性示例。</p><p><strong>应用消息</strong></p><p>提供应用程序使用的通过MQTT协议携带的消息。当应用消息通过MQTT传输时，他包含载荷，服务质量，属性集合和主题名称。</p><p><strong>客户端</strong></p><p>一个使用了 MQTT 的程序或设备。一个客户端往往：</p><ul><li>打开通往服务端的网络连接</li><li>发布其他客户端可能会感兴趣的应用消息</li><li>通过订阅来接收自己感兴趣的应用消息</li><li>通过取消订阅，不再接收应用消息</li><li>关闭通过服务端的网络连接</li></ul><p><strong>服务器</strong></p><p>一个在发布应用消息的客户端和订阅应用消息的客户端之间充当转发中介的程序或设备。一个服务器往往：</p><ul><li>接收来自客户端的网络连接</li><li>接收客户端发布的应用消息</li><li>处理客户端的订阅和取消订阅请求</li><li>根据客户端的订阅情况匹配转发应用消息</li><li>关闭和客户端的网络连接</li></ul><p><strong>会话</strong></p><p>服务器和客户端之间的有状态交互。有些会话仅和单次网络连接持续一样长的时间，有些会话则能够跨越多次连续的网络断开和连接持续保持。</p><p><strong>订阅</strong></p><p>订阅包括了主题过滤器和最大QoS。订阅只关联到一个会话。一个会话可以包括多个订阅。会话中的每个订阅都拥有一个不同的主题过滤器。</p><p><strong>共享订阅</strong></p><p>共享订阅包括了主题过滤器和最大QoS。共享订阅可以与多个会话关联，以便使用更加宽泛的信息交换模式。匹配到共享订阅的应用消息只会发送到被关联的会话其中之一对应的客户端。一个会话可以同时持有多个共享订阅，也可以同时持有共享订阅和普通订阅。</p><p><strong>通配订阅</strong></p><p>通配订阅指的是主题过滤器中包括了一个或多个通配符的订阅。通配订阅允许此订阅匹配多个主题名。参考 <a href="#4-7-%E4%B8%BB%E9%A2%98%E5%90%8D%E5%92%8C%E4%B8%BB%E9%A2%98%E8%BF%87%E6%BB%A4%E5%99%A8">4.7</a> 来了解通配符如何在主题过滤器中起作用。</p><p><strong>主题名</strong></p><p>附加到应用消息的文字标签，用于与服务器已知的订阅相匹配。</p><p><strong>主题过滤器</strong></p><p>订阅中包含的一种表达式，用于指示对一个或多个主题的兴趣。主题过滤器可以包含通配符。</p><p><strong>MQTT包</strong></p><p>通过网络连接发送的数据包。MQTT规范定义了十五中不同类型的MQTT包，例如 <code>发布</code> 包用来承载应用消息。</p><p><strong>格式错误的包</strong></p><p>一个不能通过本规范解析的数据包。参考 <a href="#4-13-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86">4.13</a> 查看关于错误处理的信息。</p><p><strong>协议错误</strong></p><p>数据包被解析后发现的不符合协议规范的数据内容或客户端与服务器状态不一致的数据。参考 <a href="#4-13-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86">4.13</a> 查看关于错误处理的信息。</p><p><strong>遗嘱</strong></p><p>当网络连接非正常关闭后，由服务端发布的应用消息。参考 <a href="#3-1-2-5-%E9%81%97%E5%98%B1%E6%A0%87%E8%AF%86">3.1.2.5</a> 查看关于遗嘱的消息。</p><p><strong>禁止的 Unicode 码段</strong></p><p>在 UTF-8 字符串中不应出现的 Unicode 控制代码和 Unicode 非字符集。参考 <a href="#1-5-4-UTF-8%E5%AD%97%E7%AC%A6%E4%B8%B2">1.5.4</a> 查看更多关于禁止的 Unicode 码段的信息。</p><h2 id="1-3-规范性引用"><a href="#1-3-规范性引用" class="headerlink" title="1.3 规范性引用"></a>1.3 规范性引用</h2><p><span id="1.3-RFC2119" class="bold">[RFC2119]</span></p><p>Bradner, S., “Key words for use in RFCs to Indicate Requirement Levels”, BCP 14, RFC 2119, DOI 10.17487&#x2F;RFC2119, March 1997,</p><p><a href="http://www.rfc-editor.org/info/rfc2119">http://www.rfc-editor.org/info/rfc2119</a></p><p><span id="1.3-RFC3629" class="bold">[RFC3629]</span></p><p>Yergeau, F., “UTF-8, a transformation format of ISO 10646”, STD 63, RFC 3629, DOI 10.17487&#x2F;RFC3629, November 2003,</p><p><a href="http://www.rfc-editor.org/info/rfc3629">http://www.rfc-editor.org/info/rfc3629</a></p><p><span id="1.3-RFC6455" class="bold">[RFC6455]</span></p><p>Fette, I. and A. Melnikov, “The WebSocket Protocol”, RFC 6455, DOI 10.17487&#x2F;RFC6455, December 2011,</p><p><a href="http://www.rfc-editor.org/info/rfc6455">http://www.rfc-editor.org/info/rfc6455</a></p><p><span id="1.3-Unicode" class="bold">[Unicode]</span></p><p>The Unicode Consortium. The Unicode Standard,</p><p><a href="http://www.unicode.org/versions/latest/">http://www.unicode.org/versions/latest/</a></p><h2 id="1-4-非规范性引用"><a href="#1-4-非规范性引用" class="headerlink" title="1.4 非规范性引用"></a>1.4 非规范性引用</h2><p><span id="1.4-RFC0793" class="bold">[RFC0793]</span></p><p>Postel, J., “Transmission Control Protocol”, STD 7, RFC 793, DOI 10.17487&#x2F;RFC0793, September 1981, <a href="http://www.rfc-editor.org/info/rfc793">http://www.rfc-editor.org/info/rfc793</a></p><p><span id="1.4-RFC5246" class="bold">[RFC5246]</span></p><p>Dierks, T. and E. Rescorla, “The Transport Layer Security (TLS) Protocol Version 1.2”, RFC 5246, DOI 10.17487&#x2F;RFC5246, August 2008,</p><p><a href="http://www.rfc-editor.org/info/rfc5246">http://www.rfc-editor.org/info/rfc5246</a></p><p><span id="1.4-AES" class="bold">[AES]</span></p><p>Advanced Encryption Standard (AES) (FIPS PUB 197).</p><p><a href="https://csrc.nist.gov/csrc/media/publications/fips/197/final/documents/fips-197.pdf">https://csrc.nist.gov/csrc/media/publications/fips/197/final/documents/fips-197.pdf</a></p><p><span id="1.4-CHACHA20" class="bold">[CHACHA20]</span></p><p>ChaCha20 and Poly1305 for IETF Protocols</p><p><a href="https://tools.ietf.org/html/rfc7539">https://tools.ietf.org/html/rfc7539</a></p><p><span id="1.4-FIPS1402" class="bold">[FIPS1402]</span></p><p>Security Requirements for Cryptographic Modules (FIPS PUB 140-2)</p><p><a href="https://csrc.nist.gov/csrc/media/publications/fips/140/2/final/documents/fips1402.pdf">https://csrc.nist.gov/csrc/media/publications/fips/140/2/final/documents/fips1402.pdf</a></p><p><span id="1.4-IEEE 802.1AR" class="bold">[IEEE 802.1AR]</span></p><p>IEEE Standard for Local and metropolitan area networks - Secure Device Identity</p><p><a href="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">http://standards.ieee.org/findstds/standard/802.1AR-2009.html</a></p><p><span id="1.4-ISO29192" class="bold">[ISO29192]</span></p><p>ISO&#x2F;IEC 29192-1:2012 Information technology – Security techniques – Lightweight cryptography – Part 1: General</p><p><a href="https://www.iso.org/standard/56425.html">https://www.iso.org/standard/56425.html</a></p><p><span id="1.4-MQTT NIST" class="bold">[MQTT NIST]</span></p><p>MQTT supplemental publication, MQTT and the NIST Framework for Improving Critical Infrastructure Cybersecurity</p><p><a href="http://docs.oasis-open.org/mqtt/mqtt-nist-cybersecurity/v1.0/mqtt-nist-cybersecurity-v1.0.html">http://docs.oasis-open.org/mqtt/mqtt-nist-cybersecurity/v1.0/mqtt-nist-cybersecurity-v1.0.html</a></p><p><span id="1.4-MQTTV311" class="bold">[MQTTV311]</span></p><p>MQTT V3.1.1 Protocol Specification</p><p><a href="http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html">http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html</a></p><p><span id="1.4-ISO20922" class="bold">[ISO20922]</span></p><p>MQTT V3.1.1 ISO Standard (ISO&#x2F;IEC 20922:2016)</p><p><a href="https://www.iso.org/standard/69466.html">https://www.iso.org/standard/69466.html</a></p><p><span id="1.4-NISTCSF" class="bold">[NISTCSF]</span></p><p>Improving Critical Infrastructure Cybersecurity Executive Order 13636</p><p><a href="https://www.nist.gov/sites/default/files/documents/itl/preliminary-cybersecurity-framework.pdf">https://www.nist.gov/sites/default/files/documents/itl/preliminary-cybersecurity-framework.pdf</a></p><p><span id="1.4-NIST7628" class="bold">[NIST7628]</span></p><p>NISTIR 7628 Guidelines for Smart Grid Cyber Security Catalogue</p><p><a href="https://www.nist.gov/sites/default/files/documents/smartgrid/nistir-7628_total.pdf">https://www.nist.gov/sites/default/files/documents/smartgrid/nistir-7628_total.pdf</a></p><p><span id="1.4-NSAB" class="bold">[NSAB]</span></p><p>NSA Suite B Cryptography</p><p><a href="http://www.nsa.gov/ia/programs/suiteb_cryptography/">http://www.nsa.gov/ia/programs/suiteb_cryptography/</a></p><p><span id="1.4-PCIDSS" class="bold">[PCIDSS]</span></p><p>PCI-DSS Payment Card Industry Data Security Standard</p><p><a href="https://www.pcisecuritystandards.org/pci_security/">https://www.pcisecuritystandards.org/pci_security/</a></p><p><span id="1.4-RFC1928" class="bold">[RFC1928]</span></p><p>Leech, M., Ganis, M., Lee, Y., Kuris, R., Koblas, D., and L. Jones, “SOCKS Protocol Version 5”, RFC 1928, DOI 10.17487&#x2F;RFC1928, March 1996,</p><p><a href="http://www.rfc-editor.org/info/rfc1928">http://www.rfc-editor.org/info/rfc1928</a></p><p><span id="1.4-RFC4511" class="bold">[RFC4511]</span></p><p>Sermersheim, J., Ed., “Lightweight Directory Access Protocol (LDAP): The Protocol”, RFC 4511, DOI 10.17487&#x2F;RFC4511, June 2006,</p><p><a href="http://www.rfc-editor.org/info/rfc4511">http://www.rfc-editor.org/info/rfc4511</a></p><p><span id="1.4-RFC5280" class="bold">[RFC5280]</span></p><p>Cooper, D., Santesson, S., Farrell, S., Boeyen, S., Housley, R., and W. Polk, “Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile”, RFC 5280, DOI 10.17487&#x2F;RFC5280, May 2008,</p><p><a href="http://www.rfc-editor.org/info/rfc5280">http://www.rfc-editor.org/info/rfc5280</a></p><p><span id="1.4-RFC6066" class="bold">[RFC6066]</span></p><p>Eastlake 3rd, D., “Transport Layer Security (TLS) Extensions: Extension Definitions”, RFC 6066, DOI 10.17487&#x2F;RFC6066, January 2011,</p><p><a href="http://www.rfc-editor.org/info/rfc6066">http://www.rfc-editor.org/info/rfc6066</a></p><p><span id="1.4-RFC6749" class="bold">[RFC6749]</span></p><p>Hardt, D., Ed., “The OAuth 2.0 Authorization Framework”, RFC 6749, DOI 10.17487&#x2F;RFC6749, October 2012,</p><p><a href="http://www.rfc-editor.org/info/rfc6749">http://www.rfc-editor.org/info/rfc6749</a></p><p><span id="1.4-RFC6960" class="bold">[RFC6960]</span></p><p>Santesson, S., Myers, M., Ankney, R., Malpani, A., Galperin, S., and C. Adams, “X.509 Internet Public Key Infrastructure Online Certificate Status Protocol - OCSP”, RFC 6960, DOI 10.17487&#x2F;RFC6960, June 2013,</p><p><a href="http://www.rfc-editor.org/info/rfc6960">http://www.rfc-editor.org/info/rfc6960</a></p><p><span id="1.4-SARBANES" class="bold">[SARBANES]</span></p><p>Sarbanes-Oxley Act of 2002.</p><p><a href="http://www.gpo.gov/fdsys/pkg/PLAW-107publ204/html/PLAW-107publ204.htm">http://www.gpo.gov/fdsys/pkg/PLAW-107publ204/html/PLAW-107publ204.htm</a></p><p><span id="1.4-USEUPRIVSH" class="bold">[USEUPRIVSH]</span></p><p>U.S.-EU Privacy Shield Framework</p><p><a href="https://www.privacyshield.gov/">https://www.privacyshield.gov</a></p><p><span id="1.4-RFC3986" class="bold">[RFC3986]</span></p><p>Berners-Lee, T., Fielding, R., and L. Masinter, “Uniform Resource Identifier (URI): Generic Syntax”, STD 66, RFC 3986, DOI 10.17487&#x2F;RFC3986, January 2005,</p><p><a href="http://www.rfc-editor.org/info/rfc3986">http://www.rfc-editor.org/info/rfc3986</a></p><p><span id="1.4-RFC1035" class="bold">[RFC1035]</span></p><p>Mockapetris, P., “Domain names - implementation and specification”, STD 13, RFC 1035, DOI 10.17487&#x2F;RFC1035, November 1987,</p><p><a href="http://www.rfc-editor.org/info/rfc1035">http://www.rfc-editor.org/info/rfc1035</a></p><p><span id="1.4-RFC2782" class="bold">[RFC2782]</span></p><p>Gulbrandsen, A., Vixie, P., and L. Esibov, “A DNS RR for specifying the location of services (DNS SRV)”, RFC 2782, DOI 10.17487&#x2F;RFC2782, February 2000,</p><p><a href="http://www.rfc-editor.org/info/rfc2782">http://www.rfc-editor.org/info/rfc2782</a></p><h2 id="1-5-数据表示"><a href="#1-5-数据表示" class="headerlink" title="1.5 数据表示"></a>1.5 数据表示</h2><h3 id="1-5-1-比特位"><a href="#1-5-1-比特位" class="headerlink" title="1.5.1 比特位"></a>1.5.1 比特位</h3><p>字节中的比特位被标记为7-0，最高位为7，最低位为0。</p><h3 id="1-5-2-2字节整数"><a href="#1-5-2-2字节整数" class="headerlink" title="1.5.2 2字节整数"></a>1.5.2 2字节整数</h3><p>2字节整数指16位的大端表示的无符号整数：高位字节在低位字节之前。这意味着在网络中传输的2字节整数先传输高有效字节(MSB)，后传输低有效字节(LSB)。</p><h3 id="1-5-3-4字节整数"><a href="#1-5-3-4字节整数" class="headerlink" title="1.5.3 4字节整数"></a>1.5.3 4字节整数</h3><p>4字节整数指32位的大端表示的无符号整数：高位字节先于连续的低位字节。这意味着在网络中传输的4字节整数先传输最高有效字节(MSB)，再传输次高有效字节(MSB)，再传输次高有效字节(MSB)，最后传输低有效字节(LSB)。</p><h3 id="1-5-4-UTF-8字符串"><a href="#1-5-4-UTF-8字符串" class="headerlink" title="1.5.4 UTF-8字符串"></a>1.5.4 UTF-8字符串</h3><p>MQTT包中使用的文本类型字段均采用 UTF-8 编码。UTF-8 <a href="#1.3-RFC3629">RFC3629</a> 是一种高效的 <a href="#1.3-Unicode">Unicode</a> 编码，他优化了 ACSII 的编码以用来支持基于文本的通信。</p><p>每个 UTF-8 编码的字符串都使用开头的两个字节表示字符串的长度，就像下方的 <span class="vcLinked">图1-1 UTF-8 字符串结构</span> 示意的那样。因此，UTF-8 字符串的最大长度为65535字节。</p><p>除非另有说明，否则所有 UTF-8 编码字符串可以具有 0 到 65,535 字节范围内的任意长度。</p><p>图1-1 UTF-8 字符串结构</p><table>  <thead>    <tr>      <th>Bit</th>      <th>7</th>      <th>6</th>      <th>5</th>      <th>4</th>      <th>3</th>      <th>2</th>      <th>1</th>      <th>0</th>    </tr>  </thead>  <tbody>    <tr>      <td>byte 1</td>      <td colspan="8">字符串长度高字节(MSB)</td>    </tr>    <tr>      <td>byte 2</td>      <td colspan="8">字符串长度低字节(LSB)</td>    </tr>    <tr>      <td>byte 3 ...</td>      <td colspan="8">当长度 > 0 时, UTF-8 编码的字符数据</td>    </tr>  </tbody></table><p><span class="vcMarked">在 UTF-8 编码字符串中的字符必须为 <a href="#1.3-Unicode">[Unicode]</a> 和 <a href="#1.3-RFC3629">[RFC3629]</a> 中所定义的，格式正确的字符编码。尤其不能使用U+D800 至 U+DFFF之间的编码</span> <span class="vcReferred">[MQTT-1.5.4-1]</span>。如果客户端或服务器接收到的 MQTT 包中包括了非法 UTF-8 编码，将其视为一个格式错误的包。参考 <a href="#4-13-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86">4.13</a> 查看关于错误处理的信息。</p><p><span class="vcMarked">UTF-8 编码字符串必须不包含空字符 U+0000</span> <span class="vcReferred">[MQTT-1.5.4-2]</span>。如果一个接收者（服务器或客户端）接收的 MQTT 包其中有空字符 U+0000 ，将其视为一个格式错误的包。参考 <a href="#4-13-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86">4.13</a> 查看关于错误处理的信息。</p><p>数据不应该包括下方列表中的 Unicode 码段，如果一个接收者（服务器或客户端）接受的 MQTT 包其中有此类字符，接收者可以将此包视为一个格式错误的包。这些是禁止使用的 Unicode 码段。参考 <a href="#5-4-9-%E5%A4%84%E7%90%86%E7%A6%81%E6%AD%A2%E7%9A%84Unicode%E7%A0%81%E6%AE%B5">5.4.9</a> 查看关于错误处理的信息。</p><ul><li>U+0001..U+001F 控制字符</li><li>U+007F..U+009F 控制字符</li><li><a href="#1.3-Unicode">Unicode</a> 规范中定义的非文本字符（例如 U+0FFFF）</li></ul><p><span class="vcMarked">无论 UTF-8 编码序列 0xEF 0xBB 0xBF 出现在字符串的何处，他永远被解释为 U+FEFF (0宽无换行空格) 而且不能被数据包的接收者跳过或剥离</span> <span class="vcReferred">[MQTT-1.5.4-3]</span>。</p><p><strong>非规范性示例</strong></p><p>例如，字符串 A𪛔 的第一个字符是拉丁文大写字母A，第二个字符是码点 U+2A6D4 （代表 CJK IDEOGRAPH EXTENSION B 字符），他是这样编码的：</p><p>图1‑2 UTF-8 编码字符串非规范性示例</p><table>  <thead>    <tr>      <th>Bit</th>      <th>7</th>      <th>6</th>      <th>5</th>      <th>4</th>      <th>3</th>      <th>2</th>      <th>1</th>      <th>0</th>    </tr>  </thead>  <tbody>    <tr>      <td>byte 1</td>      <td colspan="8">字符串长度高字节(MSB)(0x00)</td>    </tr>    <tr>      <td></td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <td>byte 2</td>      <td colspan="8">字符串长度低字节(LSB)(0x05)</td>    </tr>    <tr>      <td></td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <td>byte 3</td>      <td colspan="8">‘A’ (0x41)</td>    </tr>    <tr>      <td></td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>    </tr>    <tr>      <td>byte 4</td>      <td colspan="8">(0xF0)</td>    </tr>    <tr>      <td></td>      <td>1</td>      <td>1</td>      <td>1</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <td>byte 5</td>      <td colspan="8">(0xAA)</td>    </tr>    <tr>      <td></td>      <td>1</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>1</td>      <td>0</td>    </tr>    <tr>      <td>byte 6</td>      <td colspan="8">(0x9B)</td>    </tr>    <tr>      <td></td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>1</td>      <td>0</td>      <td>1</td>      <td>1</td>    </tr>    <tr>      <td>byte 7</td>      <td colspan="8">(0x94)</td>    </tr>    <tr>      <td></td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>    </tr>  </tbody></table><h3 id="1-5-5-变长整数"><a href="#1-5-5-变长整数" class="headerlink" title="1.5.5 变长整数"></a>1.5.5 变长整数</h3><p>变长整数中将一个字节的最大值视为 127，更大的值采用如下方式处理。每个字节中较低的七位用来存储数字的值，最高位用来表示是否有后续的字节。因此，每个字节都编码了128个可能的值和一个 “后续位”。变长整数的最大字节数是4。<span class="vcMarked">变长整数编码时必须使用能够表示数字值的最小长度来进行编码</span> <span class="vcReferred">[MQTT-1.5.5-1]</span>。表1-1 中展示了变长整数可以表示的值。</p><p>表1-1 变长整数的值</p><table><thead><tr><th>位数</th><th>最小值</th><th>最大值</th></tr></thead><tbody><tr><td>1</td><td>0 (0x00)</td><td>127 (0x7F)</td></tr><tr><td>2</td><td>128 (0x80, 0x01)</td><td>16,383 (0xFF, 0x7F)</td></tr><tr><td>3</td><td>16,384 (0x80, 0x80, 0x01)</td><td>2,097,151 (0xFF, 0xFF, 0x7F)</td></tr><tr><td>4</td><td>2,097,152 (0x80, 0x80, 0x80, 0x01)</td><td>268,435,455 (0xFF, 0xFF, 0xFF, 0x7F)</td></tr></tbody></table><p><strong>非规范性示例</strong></p><p>将非负整数 X 编码为变长整数的伪代码：</p><figure><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">do   encodedByte = X MOD 128   X = X DIV 128   // if there are more data to encode, set the top bit of this byte   if (X > 0)      encodedByte = encodedByte OR 128   endif   'output' encodedBytewhile (X > 0)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>上例中的 MOD 表示取模（C语言中的 %），DIV表示整数除法（C语言中的 &#x2F;），OR表示位运算中的或（C语言中的 |）。</p><p><strong>非规范性示例</strong></p><p>解码变长整数的伪代码：</p><figure><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">multiplier = 1value = 0do   encodedByte = 'next byte from stream'   value += (encodedByte AND 127) * multiplier   if (multiplier > 128*128*128)      throw Error(Malformed Variable Byte Integer)   multiplier *= 128while ((encodedByte AND 128) != 0)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>上例中的 AND 表示位运算中的且（C语言中的 &amp;）。</p><p>当该算法完成时，value的值即是变长整数表示的值。</p><h3 id="1-5-6-二进制数据"><a href="#1-5-6-二进制数据" class="headerlink" title="1.5.6 二进制数据"></a>1.5.6 二进制数据</h3><p>二进制数据由2字节整数表示的字节流长度加上实际的字节流内容组成。因此，二进制数据的长度范围是 0-65535 字节。</p><h3 id="1-5-7-UTF-8字符串对"><a href="#1-5-7-UTF-8字符串对" class="headerlink" title="1.5.7 UTF-8字符串对"></a>1.5.7 UTF-8字符串对</h3><p>UT-8 字符串对包括两个 UTF-8 编码的字符串。这种数据类型用来存储 键-值 对。第一个字符串表示键，第二个字符串表示值。</p><p><span class="vcMarked">UTF-8字符串对中的两个字符串都必须遵守 UTF-8 字符串的需求</span> <span class="vcReferred">[MQTT-1.5.7-1]</span>。如果一个接收者（客户端或服务器）接收到的键值对没有遵守这些需求，则被视为一个格式错误的数据包。参考 <a href="#4-13-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86">4.13</a> 查看关于错误处理的信息。</p><h2 id="1-6-安全性"><a href="#1-6-安全性" class="headerlink" title="1.6 安全性"></a>1.6 安全性</h2><p>MQTT 的客户端和服务器实现应该提供认证、授权和加密传输选项，这一部分在第五章讨论。强烈建议与关键基础设施、个人身份信息或其他个人或敏感信息相关的应用程序使用这些安全功能。</p><h2 id="1-7-编辑约定"><a href="#1-7-编辑约定" class="headerlink" title="1.7 编辑约定"></a>1.7 编辑约定</h2><p>本规范中以<span class="vcMarked">黄色</span>突出显示的文本标识了一致性声明。每个一致性声明都被分配了一个格式为 <span class="vcReferred">[MQTT-x.x.x-y]</span> 的引用，其中 <span class="vcReferred">x.x.x</span> 是章节序号，<span class="vcReferred">y</span> 是章节内的序号。</p><h2 id="1-8-变更历史"><a href="#1-8-变更历史" class="headerlink" title="1.8 变更历史"></a>1.8 变更历史</h2><h3 id="1-8-1-MQTT-v3-1-1"><a href="#1-8-1-MQTT-v3-1-1" class="headerlink" title="1.8.1 MQTT v3.1.1"></a>1.8.1 MQTT v3.1.1</h3><p>MQTT v3.1.1 是 OASIS 提出的第一个 MQTT 标准 <strong>[MQTTV311]</strong> 。</p><p>MQTT v3.1.1 同时也是 ISO&#x2F;IEC 20922:2016 标准 <a href="#1.4-ISO20922">ISO20922</a>。</p><h3 id="1-8-2-MQTT-v5-0"><a href="#1-8-2-MQTT-v5-0" class="headerlink" title="1.8.2 MQTT v5.0"></a>1.8.2 MQTT v5.0</h3><p>MQTT v5.0 为 MQTT 添加了大量新功能，同时保留了大部分核心功能。主要功能目标是：</p><ul><li>可扩展性和大型系统的增强</li><li>改进错误报告能力</li><li>将常见用法规范化，包括功能发现和请求响应</li><li>包括用户属性在内的拓展机制</li><li>性能改进，增强对小型客户端的支持</li></ul><p>参考 <a href="#%E9%99%84%E5%BD%95-C-MQTT-v5-0-%E6%96%B0%E7%89%B9%E6%80%A7%E6%B1%87%E6%80%BB%EF%BC%88%E9%9D%9E%E8%A7%84%E8%8C%83%E6%80%A7%EF%BC%89">附录 C</a> 查阅 MQTT v5.0 的变更汇总。</p><h1 id="2-MQTT包格式"><a href="#2-MQTT包格式" class="headerlink" title="2 MQTT包格式"></a>2 MQTT包格式</h1><h2 id="2-1-MQTT包结构"><a href="#2-1-MQTT包结构" class="headerlink" title="2.1 MQTT包结构"></a>2.1 MQTT包结构</h2><p>MQTT 协议操作通过一系列的 MQTT 包交互来实现。本章用来描述这些 MQTT 包的结构。</p><p>一个 MQTT 包由三部分构成，顺序固定，参考下图：</p><table>  <tbody>    <tr><td>固定头，所有的 MQTT 包都必须持有</td><tr>    <tr><td>可变头，部分 MQTT 包持有</td></tr>    <tr><td>载荷，部分 MQTT 包持有</td></tr>  </tbody></table><h3 id="2-1-1-固定头"><a href="#2-1-1-固定头" class="headerlink" title="2.1.1 固定头"></a>2.1.1 固定头</h3><p>每个 MQTT 包都包含着一个下图所示的固定头：</p><p>图2-2 固定头格式</p><table>  <thead>    <tr>      <th>Bit</th>      <th>7</th>      <th>6</th>      <th>5</th>      <th>4</th>      <th>3</th>      <th>2</th>      <th>1</th>      <th>0</th>    </tr>  </thead>  <tbody>    <tr>      <td>byte 1</td>      <td colspan="4">MQTT包类型</td>      <td colspan="4">针对不同包类型的控制标识</td>    </tr>    <tr>      <td>byte 2...</td>      <td colspan="8">剩余长度</td>    </tr>  </tbody></table><h3 id="2-1-2-MQTT包类型"><a href="#2-1-2-MQTT包类型" class="headerlink" title="2.1.2 MQTT包类型"></a>2.1.2 MQTT包类型</h3><p><strong>位置：</strong>第一个Byte，比特位7-4。</p><p>表示为 4bit 的无符号整数，数值的含义如下表所示：</p><p>表2-1 MQTT包类型</p><table><thead><tr><th>Name</th><th>Value</th><th>Direction of flow</th><th>Description</th></tr></thead><tbody><tr><td>保留</td><td>0</td><td>禁止</td><td>保留</td></tr><tr><td>CONNECT</td><td>1</td><td>客户端到服务器</td><td>连接请求</td></tr><tr><td>CONNACK</td><td>2</td><td>服务器到客户端</td><td>连接回复</td></tr><tr><td>PUBLISH</td><td>3</td><td>双向</td><td>消息发布</td></tr><tr><td>PUBACK</td><td>4</td><td>双向</td><td>消息回复（QoS1）</td></tr><tr><td>PUBREC</td><td>5</td><td>双向</td><td>消息已接收（QoS2交付第 1 部分）</td></tr><tr><td>PUBREL</td><td>6</td><td>双向</td><td>消息释放（QoS2交付第 2 部分）</td></tr><tr><td>PUBCOMP</td><td>7</td><td>双向</td><td>消息完成（QoS2交付第 3 部分）</td></tr><tr><td>SUBSCRIBE</td><td>8</td><td>客户端到服务器</td><td>订阅请求</td></tr><tr><td>SUBACK</td><td>9</td><td>服务器到客户端</td><td>订阅回复</td></tr><tr><td>UNSUBSCRIBE</td><td>10</td><td>客户端到服务器</td><td>取消订阅请求</td></tr><tr><td>UNSUBACK</td><td>11</td><td>服务器到客户端</td><td>取消订阅回复</td></tr><tr><td>PINGREQ</td><td>12</td><td>客户端到服务器</td><td>PING 请求</td></tr><tr><td>PINGRESP</td><td>13</td><td>服务器到客户端</td><td>PING 响应</td></tr><tr><td>DISCONNECT</td><td>14</td><td>双向</td><td>断开连接通知</td></tr><tr><td>AUTH</td><td>15</td><td>双向</td><td>认证交换</td></tr></tbody></table><h3 id="2-1-3-控制标识"><a href="#2-1-3-控制标识" class="headerlink" title="2.1.3 控制标识"></a>2.1.3 控制标识</h3><p>固定头第一个 byte 中剩下的四个bit [3-0]包括了基于不同 MQTT 包类型的控制标识。<span class="vcMarked">当一个比特位被标记为 “保留” 时，他的意义被保留到未来使用而他的值必须按照下表设置</span> <span class="vcReferred">[MQTT-2.1.3-1]</span>。如果接收到的控制标志不符合规范，则被认为是一个格式错误的数据包。参考 <a href="#4-13-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86">4.13</a> 查看关于错误处理的信息。</p><p>表2‑2 控制标志</p><table>  <thead>    <tr>      <td>MQTT包</td>      <td>控制标志</td>      <td>Bit 3</td>      <td>Bit 2</td>      <td>Bit 1</td>      <td>Bit 0</td>    </tr>  </thead>  <tbody>    <tr>      <td>CONNECT</td>      <td>Reserved</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <td>CONNACK</td>      <td>Reserved</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <td>PUBLISH</td>      <td>MQTT 5.0版本使用</td>      <td>DUP</td>      <td colspan="2">QoS</td>      <td>RETAIN</td>    </tr>    <tr>      <td>PUBACK</td>      <td>Reserved</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <td>PUBREC</td>      <td>Reserved</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <td>PUBREL</td>      <td>Reserved</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>    </tr>    <tr>      <td>PUBCOMP</td>      <td>Reserved</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <td>SUBSCRIBE</td>      <td>Reserved</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>    </tr>    <tr>      <td>SUBACK</td>      <td>Reserved</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <td>UNSUBSCRIBE</td>      <td>Reserved</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>    </tr>    <tr>      <td>UNSUBACK</td>      <td>Reserved</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <td>PINGREQ</td>      <td>Reserved</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <td>PINGRESP</td>      <td>Reserved</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <td>DISCONNECT</td>      <td>Reserved</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <td>AUTH</td>      <td>Reserved</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>  </tbody></table><p>DUP &#x3D; 重复发送的 PUBLISH 包<br>QoS &#x3D; PUBLISH 包的服务质量标识<br>RETAIN &#x3D; PUBLISH 保留消息标识</p><p>参考 <a href="#3-3-1-PUBLISH-%E5%9B%BA%E5%AE%9A%E5%A4%B4">3.3.1</a> 了解更多关于 DUP，QoS 和 RETAIN 标识在 PUBLISH 中的使用方式。</p><h3 id="2-1-4-剩余长度"><a href="#2-1-4-剩余长度" class="headerlink" title="2.1.4 剩余长度"></a>2.1.4 剩余长度</h3><p><strong>位置：</strong>从第二个Byte开始。</p><p>剩余长度是一个变长整数，用来表示当前包剩余的字节数，包括可变头和载荷。剩余长度的值不包括剩余长度自己本身占用的字节数。一个 MQTT 包完整的字节数等于固定头的长度加上剩余长度的值。</p><h2 id="2-2-可变头"><a href="#2-2-可变头" class="headerlink" title="2.2 可变头"></a>2.2 可变头</h2><p>某些类型的 MQTT 包包含可变头。他位于固定头和载荷之间。可变头的内容根据数据包的类型变化。可变头中的包ID字段多种类型的数据包中都存在。</p><h3 id="2-2-1-包ID"><a href="#2-2-1-包ID" class="headerlink" title="2.2.1 包ID"></a>2.2.1 包ID</h3><p>很多类型的 MQTT 包都在其可变头中包含了 2byte 的包ID字段。这些 MQTT 包是 PUBLISH （当 QoS &gt; 0时），PUBACK，PUBREC，PUBREL，PUBCOMP，SUBSCRIBE，SUBACK，UNSUBSCRIBE，UNSUBACK。</p><p>需要包ID的 MQTT 包类型如下表所示：</p><p>表2-3 包含包ID的 MQTT 包类型</p><table><thead><tr><th>MQTT 包</th><th>包ID字段</th></tr></thead><tbody><tr><td>CONNECT</td><td>否</td></tr><tr><td>CONNACK</td><td>否</td></tr><tr><td>PUBLISH</td><td>是（仅当 QoS &gt; 0 时）</td></tr><tr><td>PUBACK</td><td>是</td></tr><tr><td>PUBREC</td><td>是</td></tr><tr><td>PUBREL</td><td>是</td></tr><tr><td>PUBCOMP</td><td>是</td></tr><tr><td>SUBSCRIBE</td><td>是</td></tr><tr><td>SUBACK</td><td>是</td></tr><tr><td>UNSUBSCRIBE</td><td>是</td></tr><tr><td>UNSUBACK</td><td>是</td></tr><tr><td>PINGREQ</td><td>否</td></tr><tr><td>PINGRESP</td><td>否</td></tr><tr><td>DISCONNECT</td><td>否</td></tr><tr><td>AUTH</td><td>否</td></tr></tbody></table><p><span class="vcMarked">当 PUBLISH 包的 QoS 值为 0 时，必须不包含 包ID 字段</span> <span class="vcReferred">[MQTT-2.2.1-2]</span>。</p><p><span class="vcMarked">每当客户端发送新的 SUBSCRIBE包，UNSUBSCRIBE包 或 QoS &gt; 0 的 PUBLISH包，必须携带一个非零且当前未被使用的 包ID</span> <span class="vcReferred">[MQTT-2.2.1-3]</span>。</p><p><span class="vcMarked">每当服务端发送新的 QoS &gt; 0 的 PUBLISH包，必须携带一个非零且当前未被使用的 包ID</span> <span class="vcReferred">[MQTT-2.2.1-4]</span>。</p><p>包ID仅在发送者处理了对应的回复后可重新使用，定义如下。对于 QoS &#x3D; 1 的 PUBLISH，对应的回复是 PUBACK；对于 QoS &#x3D; 2 的PUBLISH，对应的回复是 PUBCOMP 或当原因码为 128 或更大时为 PUBREC。对于 SUBSCRIBE 或 UNSUBSCRIBE，对应的回复是 SUBACK 或 UNSUBACK。</p><p>在一个会话中，客户端与服务器分别使用一个单独、统一的集合用作提供 PUBLISH、SUBSCRIBE 和 UNSUBSCRIBE 的包ID。包ID在任何时候都不能被多个命令使用。</p><p><span class="vcMarked">PUBACK，PUBREC，PUBREL 或 PUBCOMP 包必须携带和 PUBLISH 相同的 包ID</span> <span class="vcReferred">[MQTT-2.2.1-5]</span>。<span class="vcMarked">SUBACK 和 UNSUBACK 必须携带和其对应的 SUBSCRIBE 和 UNSUBSCRIBE 包相同的包ID</span> <span class="vcReferred">[MQTT-2.2.1-6]</span>。</p><p>客户端与服务器各自独立的维护包ID分配。因此，客户端与服务器可以同时使用同样的包ID发送信息。</p><p><strong>非规范性示例</strong></p><p>客户端发送一个包ID为 0x1234 的 PUBLISH 包，之后在其接收到对应的 PUBACK 之前，从服务器接收到一个 包ID 为 0x1234 的 PUBLISH 包。这样的情况是合理而且完全有可能的。</p><figure><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">Client                                                   ServerPUBLISH 包ID=0x1234 ‒→                                                    ←‒ PUBLISH 包ID=0x1234PUBACK 包ID=0x1234 ‒→                                                    ←‒ PUBACK 包ID=0x1234<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="2-2-2-属性集"><a href="#2-2-2-属性集" class="headerlink" title="2.2.2 属性集"></a>2.2.2 属性集</h3><p>在 CONNECT，CONNACK，PUBLISH，PUBACK，PUBREC，PUBREL，PUBCOMP，SUBSCRIBE，SUBACK，UNSUBSCRIBE，UNSUBACK，DISCONNECT 和 AUTH 包的可变头中的最后一个字段是属性集。在 CONNECT 的载荷中也存在着一组可选的遗嘱属性集。</p><p>属性集由属性长度和属性组成。</p><h4 id="2-2-2-1-属性长度"><a href="#2-2-2-1-属性长度" class="headerlink" title="2.2.2.1 属性长度"></a>2.2.2.1 属性长度</h4><p>属性长度是一个变长整数。属性长度的值不包括自己所占用的字节数，但包括了后续所有属性占用的字节数。<span class="vcMarked">如果没有属性，必须明确通过一个0值的属性长度来表示</span> <span class="vcReferred">[MQTT-2.2.2-1]</span>。</p><h4 id="2-2-2-2-属性"><a href="#2-2-2-2-属性" class="headerlink" title="2.2.2.2 属性"></a>2.2.2.2 属性</h4><p>属性由一个标识了其用途和数据类型的ID和一个后续的值组成。属性ID是一个变长整数。当一个数据包使用的属性ID和其包类型不一致，或属性的值和ID指明的类型不一致时，视为一个格式错误的包。如果收到，需使用带有原因码为 0x81 的 CONNACK 或 DISCONNECT 数据包，采用 <a href="#4-13-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86">4.13</a> 描述的方法处理此错误。不同ID的属性没有顺序要求。</p><p>表2-4 属性</p><table>  <thead>    <tr>      <th colspan="2">ID</th>      <th rowspan="2">名称（用途）</th>      <th rowspan="2">数据类型</th>      <th rowspan="2">包类型 / 遗嘱属性</th>    </tr>    <tr>      <th>十进制</th><th>十六进制</th>    </tr>  </thead>  <tbody>    <tr><td>1</td><td>0x01</td><td>载荷格式标识</td><td>单字节</td><td>PUBLISH，Will Properties</td></tr>    <tr><td>2</td><td>0x02</td><td>消息过期间隔</td><td>4字节整数</td><td>PUBLISH，Will Properties</td></tr>    <tr><td>3</td><td>0x03</td><td>内容类型</td><td>UTF-8字符串</td><td>PUBLISH，Will Properties</td></tr>    <tr><td>8</td><td>0x08</td><td>响应主题</td><td>UTF-8字符串</td><td>PUBLISH，Will Properties</td></tr>    <tr><td>9</td><td>0x09</td><td>关联数据</td><td>二进制数据</td><td>PUBLISH，Will Properties</td></tr>    <tr><td>11</td><td>0x0B</td><td>订阅ID</td><td>变长整数</td><td>PUBLISH，SUBSCRIBE</td></tr>    <tr><td>17</td><td>0x11</td><td>会话过期间隔</td><td>4字节整数</td><td>CONNECT，CONNACK，DISCONNECT</td></tr>    <tr><td>18</td><td>0x12</td><td>分配的客户端ID</td><td>UTF-8字符串</td><td>CONNACK</td></tr>    <tr><td>19</td><td>0x13</td><td>服务端保活时间</td><td>2字节整数</td><td>CONNACK</td></tr>    <tr><td>21</td><td>0x15</td><td>认证方式</td><td>UTF-8字符串</td><td>CONNECT，CONNACK，AUTH</td></tr>    <tr><td>22</td><td>0x16</td><td>认证数据</td><td>二进制数据</td><td>CONNECT，CONNACK，AUTH</td></tr>    <tr><td>23</td><td>0x17</td><td>请求问题信息</td><td>单字节</td><td>CONNECT</td></tr>    <tr><td>24</td><td>0x18</td><td>遗嘱延迟间隔</td><td>4字节整数</td><td>Will Properties</td></tr>    <tr><td>25</td><td>0x19</td><td>请求响应信息</td><td>单字节</td><td>CONNECT</td></tr>    <tr><td>26</td><td>0x1A</td><td>响应信息</td><td>UTF-8字符串</td><td>CONNACK</td></tr>    <tr><td>28</td><td>0x1C</td><td>服务引用</td><td>UTF-8字符串</td><td>CONNACK，DISCONNECT</td></tr>    <tr><td>31</td><td>0x1F</td><td>原因字符串</td><td>UTF-8字符串</td><td>CONNACK，PUBACK，PUBREC，PUBREL，PUBCOMP，SUBACK，UNSUBACK，DISCONNECT，AUTH</td></tr>    <tr><td>33</td><td>0x21</td><td>接收最大值</td><td>2字节整数</td><td>CONNECT，CONNACK</td></tr>    <tr><td>34</td><td>0x22</td><td>主题别名最大值</td><td>2字节整数</td><td>CONNECT，CONNACK</td></tr>    <tr><td>35</td><td>0x23</td><td>主题别名</td><td>2字节整数</td><td>PUBLISH</td></tr>    <tr><td>36</td><td>0x24</td><td>QoS最大值</td><td>单字节</td><td>CONNACK</td></tr>    <tr><td>37</td><td>0x25</td><td>保留消息可用</td><td>单字节</td><td>CONNACK</td></tr>    <tr><td>38</td><td>0x26</td><td>用户属性</td><td>UTF-8字符串对</td><td>CONNECT，CONNACK，PUBLISH，Will Properties，PUBACK，PUBREC，PUBREL，PUBCOMP，SUBSCRIBE，SUBACK，UNSUBSCRIBE，UNSUBACK，DISCONNECT，AUTH</td></tr>    <tr><td>39</td><td>0x27</td><td>最大包尺寸</td><td>4字节整数</td><td>CONNECT，CONNACK</td></tr>    <tr><td>40</td><td>0x28</td><td>通配符订阅可用</td><td>单字节</td><td>CONNACK</td></tr>    <tr><td>41</td><td>0x29</td><td>订阅ID可用</td><td>单字节</td><td>CONNACK</td></tr>    <tr><td>42</td><td>0x2A</td><td>共享订阅可用</td><td>单字节</td><td>CONNACK</td></tr>  </tbody></table><p><em>非规范性评论</em></p><p><em>虽然属性ID被定义为一个变长整数，但在规范的此版本中所有的属性ID都只有一个字节的长度。</em></p><h2 id="2-3-载荷"><a href="#2-3-载荷" class="headerlink" title="2.3 载荷"></a>2.3 载荷</h2><p>有些 MQTT 包的尾部是载荷。在 PUBLISH 包中的载荷就是应用消息。</p><p>表2-5 包含载荷的 MQTT 包</p><table><thead><tr><th>MQTT 包</th><th>载荷</th></tr></thead><tbody><tr><td>CONNECT</td><td>有</td></tr><tr><td>CONNACK</td><td>无</td></tr><tr><td>PUBLISH</td><td>可选</td></tr><tr><td>PUBACK</td><td>无</td></tr><tr><td>PUBREC</td><td>无</td></tr><tr><td>PUBREL</td><td>无</td></tr><tr><td>PUBCOMP</td><td>无</td></tr><tr><td>SUBSCRIBE</td><td>有</td></tr><tr><td>SUBACK</td><td>有</td></tr><tr><td>UNSUBSCRIBE</td><td>有</td></tr><tr><td>UNSUBACK</td><td>有</td></tr><tr><td>PINGREQ</td><td>无</td></tr><tr><td>PINGRESP</td><td>无</td></tr><tr><td>DISCONNECT</td><td>无</td></tr><tr><td>AUTH</td><td>无</td></tr></tbody></table><h2 id="2-4-原因码"><a href="#2-4-原因码" class="headerlink" title="2.4 原因码"></a>2.4 原因码</h2><p>原因码是一个单字节的无符号整数值，用来表示一个操作的结果。小于 0x80 的原因码用来表示操作成功，最常见的表示成功的原因码是 0x00。0x80或更大的原因码表示失败。</p><p>在 CONNACK，PUBACK，PUBREC，PUBREL，PUBCOMP，DISCONNECT 和 AUTH 包的可变头中有一个原因码字段。在 SUBACK 和 UNSUBACK 的载荷中包一个列表，其中有一个或多个原因码字段。</p><p>原因码字段值的通用定义如下：</p><p>表2-6 原因码</p><table>  <thead>    <tr>      <th colspan="2">原因码</th>      <th rowspan="2">名称</th>      <th rowspan="2">包类型</th>    </tr>    <tr>      <th>十进制</th><th>十六进制</th>    </tr>  </thead>  <tbody>    <tr><td>0</td><td>0x00</td><td>成功</td><td>CONNACK，PUBACK，PUBREC，PUBREL，PUBCOMP，UNSUBACK，AUTH</td></tr>    <tr><td>0</td><td>0x00</td><td>普通断开</td><td>DISCONNECT</td></tr>    <tr><td>0</td><td>0x00</td><td>授予 QoS 0</td><td>SUBACK</td></tr>    <tr><td>1</td><td>0x01</td><td>授予 QoS 1</td><td>SUBACK</td></tr>    <tr><td>2</td><td>0x02</td><td>授予 QoS 2</td><td>SUBACK</td></tr>    <tr><td>4</td><td>0x04</td><td>携带遗嘱的断开链接</td><td>DISCONNECT</td></tr>    <tr><td>16</td><td>0x16</td><td>没有匹配的订阅者</td><td>PUBACK，PUBREC</td></tr>    <tr><td>17</td><td>0x11</td><td>没有存在的订阅</td><td>UNSUBACK</td></tr>    <tr><td>24</td><td>0x18</td><td>继续认证</td><td>AUTH</td></tr>    <tr><td>25</td><td>0x19</td><td>重新认证</td><td>AUTH</td></tr>    <tr><td>128</td><td>0x80</td><td>未指定错误</td><td>CONNACK，PUBACK，PUBREC，SUBACK，UNSUBACK，DISCONNECT</td></tr>    <tr><td>129</td><td>0x81</td><td>格式错误的包</td><td>CONNACK，DISCONNECT</td></tr>    <tr><td>130</td><td>0x82</td><td>协议错误</td><td>CONNACK，DISCONNECT</td></tr>    <tr><td>131</td><td>0x83</td><td>特定实现错误</td><td>CONNACK，PUBACK，PUBREC，SUBACK，UNSUBACK，DISCONNECT</td></tr>    <tr><td>132</td><td>0x84</td><td>协议版本不支持</td><td>CONNACK</td></tr>    <tr><td>133</td><td>0x85</td><td>客户端ID不可用</td><td>CONNACK</td></tr>    <tr><td>134</td><td>0x86</td><td>用户名或密码错误</td><td>CONNACK</td></tr>    <tr><td>135</td><td>0x87</td><td>未经授权</td><td>CONNACK，PUBACK，PUBREC，SUBACK，UNSUBACK，DISCONNECT</td></tr>    <tr><td>136</td><td>0x88</td><td>服务器不可用</td><td>CONNACK</td></tr>    <tr><td>137</td><td>0x89</td><td>服务器忙</td><td>CONNACK</td></tr>    <tr><td>138</td><td>0x8A</td><td>被禁止</td><td>CONNACK</td></tr>    <tr><td>139</td><td>0x8B</td><td>服务器关闭</td><td>DISCONNECT</td></tr>    <tr><td>140</td><td>0x8C</td><td>认证模式错误</td><td>CONNACK，DISCONNECT</td></tr>    <tr><td>141</td><td>0x8D</td><td>保活超时</td><td>DISCONNECT</td></tr>    <tr><td>142</td><td>0x8E</td><td>会话被接管</td><td>DISCONNECT</td></tr>    <tr><td>143</td><td>0x8F</td><td>主题过滤器不可用</td><td>SUBACK，UNSUBACK，DISCONNECT</td></tr>    <tr><td>144</td><td>0x90</td><td>主题名不可用</td><td>CONNACK，PUBACK，PUBREC，DISCONNECT</td></tr>    <tr><td>145</td><td>0x91</td><td>包ID已被使用</td><td>PUBACK，PUBREC，SUBACK，UNSUBACK</td></tr>    <tr><td>146</td><td>0x92</td><td>包ID未找到</td><td>PUBREL，PUBCOMP</td></tr>    <tr><td>147</td><td>0x93</td><td>超出接收最大值</td><td>DISCONNECT</td></tr>    <tr><td>148</td><td>0x94</td><td>主题别名不可用</td><td>DISCONNECT</td></tr>    <tr><td>149</td><td>0x95</td><td>包过大</td><td>CONNACK，DISCONNECT</td></tr>    <tr><td>150</td><td>0x96</td><td>消息频率过高</td><td>DISCONNECT</td></tr>    <tr><td>151</td><td>0x97</td><td>超限</td><td>CONNACK，PUBACK，PUBREC，SUBACK，DISCONNECT</td></tr>    <tr><td>152</td><td>0x98</td><td>管理员行为</td><td>DISCONNECT</td></tr>    <tr><td>153</td><td>0x99</td><td>载荷格式错误</td><td>CONNACK，PUBACK，PUBREC，DISCONNECT</td></tr>    <tr><td>154</td><td>0x9A</td><td>不支持保留消息</td><td>CONNACK，DISCONNECT</td></tr>    <tr><td>155</td><td>0x9B</td><td>不支持 QoS</td><td>CONNACK，DISCONNECT</td></tr>    <tr><td>156</td><td>0x9C</td><td>临时使用另一台服务器</td><td>CONNACK，DISCONNECT</td></tr>    <tr><td>157</td><td>0x9D</td><td>服务器迁移</td><td>CONNACK，DISCONNECT</td></tr>    <tr><td>158</td><td>0x9E</td><td>不支持共享订阅</td><td>SUBACK，DISCONNECT</td></tr>    <tr><td>159</td><td>0x9F</td><td>连接频率超限</td><td>CONNACK，DISCONNECT</td></tr>    <tr><td>160</td><td>0xA0</td><td>最大连接时间</td><td>DISCONNECT</td></tr>    <tr><td>161</td><td>0xA1</td><td>不支持订阅ID</td><td>SUBACK，DISCONNECT</td></tr>    <tr><td>162</td><td>0xA2</td><td>不支持通配符订阅</td><td>SUBACK，DISCONNECT</td></tr>  </tbody></table><p><em>非规范性评论</em></p><p><em>对于 0x91（包ID已被使用）的原因码，对此的处理应是处理重复状态，或是使用 Clean Start 为 1 的标识重新创建连接来重置会话，或是检查客户端或服务端的实现是否有缺陷。</em></p><h1 id="3-MQTT包"><a href="#3-MQTT包" class="headerlink" title="3 MQTT包"></a>3 MQTT包</h1><h2 id="3-1-CONNECT-连接请求"><a href="#3-1-CONNECT-连接请求" class="headerlink" title="3.1 CONNECT - 连接请求"></a>3.1 CONNECT - 连接请求</h2><p><span class="vcMarked">当客户端和服务器的网络连接建立后，客户端向服务器发送的第一个数据包必须是 CONNECT 包</span> <span class="vcReferred">[MQTT-3.1.0-1]</span>。</p><p>一个客户端在一次网络连接中只能发送一个 CONNECT 包。<span class="vcMarked">服务器必须将客户端发送的第二个 CONNECT 包视为协议错误并关闭网络连接</span> <span class="vcReferred">[MQTT-3.1.0-2]</span>。参考 <a href="#4-13-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86">4.13</a> 查看关于错误处理的信息。</p><p>CONNECT 的载荷包含一个或更多的字段，包括唯一的客户端ID，遗嘱主题，遗嘱载荷，用户名和密码。除了客户端ID以外的字段都可以省略，他们的存在与否根据可变头中的标识确定。</p><h3 id="3-1-1-CONNECT固定头"><a href="#3-1-1-CONNECT固定头" class="headerlink" title="3.1.1 CONNECT固定头"></a>3.1.1 CONNECT固定头</h3><p>图3‑1 CONNECT 包固定头</p><table>  <thead>    <tr><td>Bit</td><td>7</td><td>6</td><td>5</td><td>4</td><td>3</td><td>2</td><td>1</td><td>0</td></tr>  </thead>  <tbody>    <tr><td>byte 1</td><td colspan="4">MQTT包类型（1）</td><td colspan="4">保留</td></tr>    <tr><td></td><td>0</td><td>0</td><td>0</td><td>1</td><td>0</td><td>0</td><td>0</td><td>0</td></tr>    <tr><td>byte 2...</td><td colspan="8">剩余长度</td></tr>  </tbody></table><p><strong>剩余长度</strong></p><p>表示可变头长度和载荷长度的总和，使用变长整数表示。</p><h3 id="3-1-2-CONNECT可变头"><a href="#3-1-2-CONNECT可变头" class="headerlink" title="3.1.2 CONNECT可变头"></a>3.1.2 CONNECT可变头</h3><p>CONNECT 包中的可变头按固定顺序提供下列字段：协议名、协议版本、连接标识、保活时间和属性集。属性集的编码方式请参考 <a href="#2-2-2-%E5%B1%9E%E6%80%A7%E9%9B%86">2.2.2</a>。</p><h4 id="3-1-2-1-协议名"><a href="#3-1-2-1-协议名" class="headerlink" title="3.1.2.1 协议名"></a>3.1.2.1 协议名</h4><p>图3-2 协议名字节</p><table>  <thead>    <tr><td></td><td>描述</td><td>7</td><td>6</td><td>5</td><td>4</td><td>3</td><td>2</td><td>1</td><td>0</td></tr>  </thead>  <tbody>    <tr><td colspan="10">协议名</td></tr>    <tr><td>byte 1</td><td>长度高位（MSB）</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr>    <tr><td>byte 2</td><td>长度低位（LSB）</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>1</td><td>0</td><td>0</td></tr>    <tr><td>byte 3</td><td>'M'</td><td>0</td><td>1</td><td>0</td><td>0</td><td>1</td><td>1</td><td>0</td><td>1</td></tr>    <tr><td>byte 4</td><td>'Q'</td><td>0</td><td>1</td><td>0</td><td>1</td><td>0</td><td>0</td><td>0</td><td>1</td></tr>    <tr><td>byte 5</td><td>'T'</td><td>0</td><td>1</td><td>0</td><td>1</td><td>0</td><td>1</td><td>0</td><td>0</td></tr>    <tr><td>byte 6</td><td>'T'</td><td>0</td><td>1</td><td>0</td><td>1</td><td>0</td><td>1</td><td>0</td><td>0</td></tr>  </tbody></table><p>协议名是 UTF-8字符串表示的大写 “MQTT”，就像上图所示。这个字符串、他的位置和他的长度在未来的 MQTT 规范版本中永远不会改变。</p><p>支持多种协议的服务器可以通过协议名称来判断收到的数据是否是 MQTT 数据。<span class="vcMarked">协议名称必须是 UTF-8字符串表示的 “MQTT”。如果服务器不想接收此连接，同时又想告知客户端服务器是一个 MQTT 服务器，可以发送一个带有 0x84（协议版本不支持）原因码的 CONNACK，随后服务端必须关闭网络连接</span> <span class="vcReferred">[MQTT-3.1.2-1]</span>。</p><p><em>非规范性评论</em></p><p><em>数据包检查器（例如防火墙）可以使用协议名称来识别 MQTT 流量。</em></p><h4 id="3-1-2-2-协议版本"><a href="#3-1-2-2-协议版本" class="headerlink" title="3.1.2.2 协议版本"></a>3.1.2.2 协议版本</h4><p>图3‑3 协议版本字节</p><table>  <thead>    <tr><td></td><td>描述</td><td>7</td><td>6</td><td>5</td><td>4</td><td>3</td><td>2</td><td>1</td><td>0</td></tr>  </thead>  <tbody>    <tr><td colspan="10">协议版本</td></tr>    <tr><td>byte 7</td><td>版本（5）</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>1</td><td>0</td><td>1</td></tr>  </tbody></table><p>此处的单字节无符号值表示了客户端使用的协议的版本。MQTT 5.0 版本的协议版本的值应为 5（0x05）。</p><p>支持多个协议版本的服务器可以通过协议版本字段来判断客户端使用何种版本的 MQTT 协议。<span class="vcMarked">如果客户端使用的协议版本不为 5 而且服务器不想接受此 CONNECT 包，服务器可以发送一个带有 0x84（协议版本不支持）原因码的 CONNACK，随后服务端必须关闭网络连接</span> <span class="vcReferred">[MQTT-3.1.2-2]</span>。</p><h4 id="3-1-2-3-连接标识"><a href="#3-1-2-3-连接标识" class="headerlink" title="3.1.2.3 连接标识"></a>3.1.2.3 连接标识</h4><p>连接标志字节包含了几个指定 MQTT 连接行为的参数。他还用来指示载荷中的某些字段是否存在。</p><p>图3‑4 连接标识位</p><table>  <thead>    <tr><td>Bit</td><td>7</td><td>6</td><td>5</td><td>4</td><td>3</td><td>2</td><td>1</td><td>0</td></tr>  </thead>  <tbody>    <tr><td></td><td>用户名标识</td><td>密码标识</td><td>遗嘱保留消息</td><td colspan="2">遗嘱QoS</td><td>遗嘱标识</td><td>全新开始</td><td>保留</td></tr>    <tr><td>byte 8</td><td>X</td><td>X</td><td>X</td><td>X</td><td>X</td><td>X</td><td>X</td><td>0</td></tr>  </tbody></table><p><span class="vcMarked">服务器必须验证 CONNECT 包中的保留位的值是 0</span> <span class="vcReferred">[MQTT-3.1.2-3]</span>。如果保留位的值非 0，则视为一个格式错误的包，参考 <a href="#4-13-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86">4.13</a> 查看关于错误处理的信息。</p><h4 id="3-1-2-4-全新开始"><a href="#3-1-2-4-全新开始" class="headerlink" title="3.1.2.4 全新开始"></a>3.1.2.4 全新开始</h4><p><strong>位置：</strong>连接标识字节中的比特位 1。</p><p>这个比特位指定了此连接是一个全新的会话还是一个已经存在会话的延续。参考 <a href="#4-1-%E4%BC%9A%E8%AF%9D%E7%8A%B6%E6%80%81">4.1</a> 了解关于会话状态的定义。</p><p><span class="vcMarked">如果接收到全新开始值置为 1 的 CONNECT 包，客户端和服务器必须丢弃任何已经存在的会话并开始一个新的会话</span> <span class="vcReferred">[MQTT-3.1.2-4]</span>。因此，当 CONNECT 包中的全新开始值置为 1 时，对应的 CONNACK 包中的会话存在总是会被至为0。</p><p><span class="vcMarked">如果服务器接收到的 CONNECT 包中的全新开始被置为 0 并且服务器中已经存在和客户端ID关联的会话，服务器必须基于已经存在的会话状态恢复客户端的连接</span> <span class="vcReferred">[MQTT-3.1.2-5]</span>。<span class="vcMarked">如果服务端接收到的 CONNECT 包中的全新开始被置为 0 并且服务器中没有和客户端ID关联的会话，服务器必须创建一个新的会话</span> <span class="vcReferred">[MQTT-3.1.2-6]</span>。</p><h4 id="3-1-2-5-遗嘱标识"><a href="#3-1-2-5-遗嘱标识" class="headerlink" title="3.1.2.5 遗嘱标识"></a>3.1.2.5 遗嘱标识</h4><p><strong>位置：</strong>连接标识字节中的比特位 2。</p><p><span class="vcMarked">如果遗嘱标识被置为 1，则表示遗嘱消息必须被存储在服务器中，并且关联到此会话</span> <span class="vcReferred">[MQTT-3.1.2-7]</span>。遗嘱消息由 CONNECT 载荷中的遗嘱属性集、遗嘱主题和遗嘱载荷组成。<span class="vcMarked">遗嘱消息必须在网络连接断开后的遗嘱延迟间隔时间过期后或会话结束时发布，除非由于服务器接收到一个带有 0x00（普通断开）原因码的 DISCONNECT 包从而删除了遗嘱消息，或是在遗嘱延迟间隔时间过期前接收了一个带有相同客户端ID的连接</span> <span class="vcReferred">[MQTT-3.1.2-8]</span>。</p><p>遗嘱消息被发布的场景包括不限于：</p><ul><li>服务端检测到了 I&#x2F;O 错误或网络故障</li><li>客户端没有成功在保活时间内通信</li><li>客户端在没有发送原因码为 0x00（普通断开）的 DISCONNECT 包的前提下断开网络连接</li><li>服务器在没有收到原因码为 0x00（普通断开）的 DISCONNECT 包的前提下断开网络连接</li></ul><p><span class="vcMarked">当遗嘱标识被置为 1 时，载荷中必须包括遗嘱属性集、遗嘱主题和遗嘱载荷字段</span> <span class="vcReferred">[MQTT-3.1.2-9]</span>。<span class="vcMarked">当服务器发布遗嘱后或服务器从客户端收到了原因码为 0x00（普通断开）的 DISCONNECT 包后，服务器必须从会话状态中删除遗嘱消息</span> <span class="vcReferred">[MQTT-3.1.2-10]</span>。</p><p>服务器应该在下列两种情况中的某一种先发生时发布遗嘱消息：网络连接断开后经过了遗嘱延迟间隔时间、会话结束。如果发生了服务器关闭或故障，服务器也许可以在随后的重启之后发布遗嘱消息。当此种情况发生时，服务器故障发生的时间和遗嘱消息发布的时间之间可能会有延迟。</p><p>参考 <a href="#3-1-3-2-%E9%81%97%E5%98%B1%E5%B1%9E%E6%80%A7%E9%9B%86">3.1.3.2</a> 了解关于遗嘱延迟间隔的消息。</p><p><em>非规范性评论</em></p><p><em>客户端可以设置遗嘱延迟间隔大于会话过期间隔，再发送带有原因码 0x04（携带遗嘱的断开链接）的 DISCONNECT 断开连接。这样可以使用遗嘱消息来通知会话已过期。</em></p><h4 id="3-1-2-6-遗嘱QoS"><a href="#3-1-2-6-遗嘱QoS" class="headerlink" title="3.1.2.6 遗嘱QoS"></a>3.1.2.6 遗嘱QoS</h4><p><strong>位置：</strong>连接标识字节中的比特位 4 和 3。</p><p>这两个比特位指定了发布遗嘱消息时使用的 QoS 等级。</p><p><span class="vcMarked">当遗嘱标识被置为 0 时，遗嘱QoS必须被置为 0（0x00）</span> <span class="vcReferred">[MQTT-3.1.2-11]</span>。</p><p><span class="vcMarked">当遗嘱标识被置为 1 时，遗嘱QoS的值可以是 0（0x00），1（0x01）或 2（0x02）</span> <span class="vcReferred">[MQTT-3.1.2-12]</span>。当值为 3（0x03）时视为格式错误的包，参考 <a href="#4-13-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86">4.13</a> 查看关于错误处理的信息。</p><h4 id="3-1-2-7-遗嘱保留消息"><a href="#3-1-2-7-遗嘱保留消息" class="headerlink" title="3.1.2.7 遗嘱保留消息"></a>3.1.2.7 遗嘱保留消息</h4><p><strong>位置：</strong>连接标识字节中的比特位 5。</p><p>这个比特位指定了当遗嘱消息发布时是否会被保留。</p><p><span class="vcMarked">当遗嘱标识被置为 0 时，遗嘱保留消息的值必须被置为 0</span> <span class="vcReferred">[MQTT-3.1.2-13]</span>。<span class="vcMarked">当遗嘱标识被置为 1 且遗嘱保留消息被置为 0 时，服务器必须将遗嘱消息作为一个非保留消息发布</span> <span class="vcReferred">[MQTT-3.1.2-14]</span>。<span class="vcMarked">当遗嘱标识被置为 1 且遗嘱保留消息被置为 1 时，服务器必须将遗嘱消息作为一个保留消息发布</span> <span class="vcReferred">[MQTT-3.1.2-15]</span>。</p><h4 id="3-1-2-8-用户名标识"><a href="#3-1-2-8-用户名标识" class="headerlink" title="3.1.2.8 用户名标识"></a>3.1.2.8 用户名标识</h4><p><strong>位置：</strong>连接标识字节中的比特位 7。</p><p><span class="vcMarked">当用户名标识被置为 0 时，载荷中必须不能存在用户名</span> <span class="vcReferred">[MQTT-3.1.2-16]</span>。<span class="vcMarked">当用户名标识被置为 1 时，载荷中必须存在用户名</span> <span class="vcReferred">[MQTT-3.1.2-17]</span>。</p><h4 id="3-1-2-9-密码标识"><a href="#3-1-2-9-密码标识" class="headerlink" title="3.1.2.9 密码标识"></a>3.1.2.9 密码标识</h4><p><strong>位置：</strong>连接标识字节中的比特位 6。</p><p><span class="vcMarked">当密码标识被置为 0 时，载荷中必须不能存在密码</span> <span class="vcReferred">[MQTT-3.1.2-18]</span>。<span class="vcMarked">当密码标识被置为 1 时，载荷中必须存在密码</span> <span class="vcReferred">[MQTT-3.1.2-19]</span>。</p><p><em>非规范性评论</em></p><p><em>本版协议允许在不使用用户名时使用密码，和 MQTT v3.1.1 不同。这反映了密码作为密码以外的凭证的常见用途。</em></p><h4 id="3-1-2-10-保活时间"><a href="#3-1-2-10-保活时间" class="headerlink" title="3.1.2.10 保活时间"></a>3.1.2.10 保活时间</h4><p>图3-5 保活时间字节</p><table>  <thead>    <tr><td>Bit</td><td>7</td><td>6</td><td>5</td><td>4</td><td>3</td><td>2</td><td>1</td><td>0</td></tr>  </thead>  <tbody>    <tr><td>byte 9</td><td colspan="8">保活时间高位（MSB）</td></tr>    <tr><td>byte 10</td><td colspan="8">保活时间地位（LSB）</td></tr>  </tbody></table><p>保活时间是一个表示时间间隔秒数的 2字节整数。他是允许客户端在发送一个 MQTT 包后到发送下一个数据包之间的最大时间间隔。客户端有责任确保两个 MQTT 包之间的时间间隔不超过保活时间。<span class="vcMarked">如果保活时间不为 0 且没有任何其他需要发送的数据包，客户端必须发送 PINGREQ 包</span> <span class="vcReferred">[MQTT-3.1.2-20]</span>。</p><p><span class="vcMarked">如果服务端在 CONNACK 中提供了服务端保活时间，则客户端必须采用服务端保活时间的值来替代自己发送的保活时间的值</span> <span class="vcReferred">[MQTT-3.1.2-21]</span>。</p><p>不论保活时间的值如何设置，客户端可以在任何时间发送 PINGREQ，并通过检查相应的 PINGRESP 来确认服务端与网络是否可用。</p><p><span class="vcMarked">如果保活时间为非零值且服务器在 1.5 倍的保活时间内没有收到来自客户端的任何 MQTT 包，服务器必须断开到客户端的网络连接并视为网络连接故障</span> <span class="vcReferred">[MQTT-3.1.2-22]</span>。</p><p>如果客户端在发送 PINGREQ 的合理时间后依然没有收到 PINGRESP，客户端应断开到服务器的网络连接。</p><p>保活时间的值为 0 表示关闭保活机制。当保活时间为 0 时客户端没有义务按任何特定时间发送 MQTT 包。</p><p><em>非规范性评论</em></p><p><em>服务器可能会因为其他原因关闭向客户端的连接，例如服务器关机。设置保活时间并非意味着客户端可以持续保持连接。</em></p><p><em>非规范性评论</em></p><p><em>保活时间的具体值是由应用程序设置的，通常来说，是几分钟。保活时间的最大值 65535 表示 18小时12分钟15秒。</em></p><h4 id="3-1-2-11-CONNECT-属性集"><a href="#3-1-2-11-CONNECT-属性集" class="headerlink" title="3.1.2.11 CONNECT 属性集"></a>3.1.2.11 CONNECT 属性集</h4><h5 id="3-1-2-11-1-属性长度"><a href="#3-1-2-11-1-属性长度" class="headerlink" title="3.1.2.11.1 属性长度"></a>3.1.2.11.1 属性长度</h5><p>CONNECT 包可变头中的属性集长度，使用变长整数编码。</p><h5 id="3-1-2-11-2-会话过期间隔"><a href="#3-1-2-11-2-会话过期间隔" class="headerlink" title="3.1.2.11.2 会话过期间隔"></a>3.1.2.11.2 会话过期间隔</h5><p>会话过期间隔的属性ID是<strong>17 (0x11) Byte</strong>。</p><p>随后跟随 4字节整数 用来表示会话过期间隔，单位为秒。在属性集中出现超过一次会话过期间隔视为协议错误。</p><p>当没有设置会话过期间隔是使用 0 作为默认值。如果会话过期间隔的值为 0 或者没有设置，当网络连接断开时会话立即结束。</p><p>如果会话过期间隔被设置为 0xFFFFFFFF (UINT_MAX)，表示会话不会过期。</p><p><span class="vcMarked">当会话过期间隔的值大于0时，客户端和服务器都必须在网络连接断开后存储会话状态</span> <span class="vcReferred">[MQTT-3.1.2-23]</span>。</p><p><em>非规范性评论</em></p><p><em>客户端或服务器的时钟可能在某些时间内没有运行，例如当客户端或服务器被关闭时。这可能会导致状态被延迟删除。</em></p><p>参考 <a href="#4-1-%E4%BC%9A%E8%AF%9D%E7%8A%B6%E6%80%81">4.1</a> 了解更多关于会话的信息。参考 <a href="#4-1-1-%E5%AD%98%E5%82%A8%E4%BC%9A%E8%AF%9D%E7%8A%B6%E6%80%81">4.1.1</a> 了解更多关于会话状态存储的细节和限制。</p><p>当会话过期时，客户端与服务器不需要自动删除会话状态。</p><p><em>非规范性评论</em></p><p><em>将全新开始标识设置为 1 并将会话过期间隔设置为 0，等同于在 MQTT v3.1.1 规范中将 CleanSession 设置为 1。将全新开始标识设置为 0 且不设置会话过期间隔，等同于在 MQTT v3.1.1 规范中将 CleanSession 设置为 0。</em></p><p><em>非规范性评论</em></p><p><em>一个只想处理其在线时消息的客户端可以将全新开始标识设置为 1 同时将会话过期间隔设置为 0。这样他将不会收到任何在他离线时产生的消息，并且他必须在每次连接后重新订阅所有他需要的主题。</em></p><p><em>非规范性评论</em></p><p><em>当客户端使用一个间歇性可用的网络连接服务器时，客户端可以设置一个较短的会话过期间隔这样每当网络连接可用时他都会重连并继续进行可靠的消息传递。而当客户端没有重连时，允许会话超时，这样应用消息就会丢失。</em></p><p><em>非规范性评论</em></p><p><em>当一个客户端使用较长的会话过期间隔连接服务器时，这意味着他希望服务器能够在他断开连接后的较长时间里维护会话状态。客户端只有在明确的意识到自己会在某个时间点重连时才使用这种较长的会话过期间隔。当一个客户端决定未来不再使用此会话，他应该在断开时将会话过期间隔设置为0。</em></p><p><em>非规范性评论</em></p><p><em>客户端总是应该基于 CONNACK 中的会话存在标识来判断服务器是否保存有该客户端的会话状态。</em></p><p><em>非规范性评论</em></p><p><em>客户端可以依赖服务器返回的会话存在标识来判断会话是否过期，而不必自己实现会话过期机制。如果客户端自己实现了会话过期机制，那么则必须在自己的会话状态中记录何时该会话状态需要被删除。</em></p><h5 id="3-1-2-11-3-接收最大值"><a href="#3-1-2-11-3-接收最大值" class="headerlink" title="3.1.2.11.3 接收最大值"></a>3.1.2.11.3 接收最大值</h5><p>接收最大值的属性ID是<strong>33 (0x21) Byte</strong>。</p><p>随后跟随 2字节整数 用来表示有状态数据接收的最大值。接收最大值在属性集中出现超过一次，或接收最大值的值为0，均为协议错误。</p><p>客户端使用此值限制他同时处理的 QoS1 和 QoS2 包发布动作数量。没有任何机制限制服务端可能尝试的对 QoS0 包的发布。</p><p>接受最大值的值仅对当前网络连接有效。如果没有设置接收最大值那么他的默认值是 65535。</p><p>参考 <a href="#4-9-%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6">4.9 流量控制</a> 了解关于接收最大值的使用细节。</p><h5 id="3-1-2-11-4-最大包尺寸"><a href="#3-1-2-11-4-最大包尺寸" class="headerlink" title="3.1.2.11.4 最大包尺寸"></a>3.1.2.11.4 最大包尺寸</h5><p>最大包尺寸的属性ID是<strong>33 (0x21) Byte</strong>。</p><p>随后跟随 4字节整数 用来表示客户端可以接受的最大包尺寸。如果没有设置最大包尺寸，则其受限于固定头中的剩余长度限制，除此外并没有其他限制。</p><p>在属性集中出现超过一次最大包尺寸或其值为 0 均视为协议错误。</p><p><em>非规范性评论</em></p><p><em>当包的尺寸需要被限制时，应用程序有责任选择一个合适的最大包尺寸的值。</em></p><p>最大包尺寸表示 <strong>MQTT 包完整的字节数</strong>，其定义参考 <a href="#2-1-4-%E5%89%A9%E4%BD%99%E9%95%BF%E5%BA%A6">2.1.4</a>。客户端使用最大包尺寸告知服务端，客户端不会处理超过此尺寸限制的信息。</p><p><span class="vcMarked">服务端必须不向客户端发送超过最大包尺寸的数据包</span> <span class="vcReferred">[MQTT-3.1.2-24]</span>。如果客户端收到了超过其最大包尺寸限制的数据报，这被视为一个协议错误，客户端需要使用带有原因码 0x95（包过大）的 DISCONNECT 包来中断连接，参考 <a href="#4-13-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86">4.13</a> 的描述。</p><p><span class="vcMarked">当一个包因超过最大包尺寸而无法发送，服务器必须将其丢弃，并视为发送成功</span> <span class="vcReferred">[MQTT-3.1.2-25]</span>。</p><p>当某个包的尺寸大于共享订阅中的部分客户端的最大包尺寸，而又可以被另外的某些客户端接收时，服务器可以决定丢弃此包或者将其发送到可以接收此包的客户端。</p><p><em>非规范性评论</em></p><p><em>当一个包未被发送即被丢弃时，服务器可以将其放入“丢包队列”或者提供其他的诊断机制。此类行为实现不属于本规范的范畴。</em></p><h5 id="3-1-2-11-5-主题别名最大值"><a href="#3-1-2-11-5-主题别名最大值" class="headerlink" title="3.1.2.11.5 主题别名最大值"></a>3.1.2.11.5 主题别名最大值</h5><p>主题别名最大值的属性ID是<strong>34 (0x22) Byte</strong>。</p><p>随后跟随 2字节整数 表示主题别名的最大值。在属性集中出现超过一次主题别名最大值视为协议错误。如果主题别名最大值没有设置，则采用默认值 0。</p><p>主题别名最大值表示了客户端可以接受的来自服务器发送的主题别名的最大数量。客户端使用此值来约束他在本次连接中可以持有的主题别名数量。<span class="vcMarked">服务器必须不能发送一个主题别名的值大于客户端设置的主题别名最大值的 PUBLISH 包</span> <span class="vcReferred">[MQTT-3.1.2-26]</span>。主题别名的值为 0 表示客户端在本次连接中不支持任何主题别名。<span class="vcMarked">如果主题别名最大值未设置或值为 0，服务器必须不向客户端发送主题别名</span> <span class="vcReferred">[MQTT-3.1.2-27]</span>。</p><h5 id="3-1-2-11-6-请求响应信息"><a href="#3-1-2-11-6-请求响应信息" class="headerlink" title="3.1.2.11.6 请求响应信息"></a>3.1.2.11.6 请求响应信息</h5><p>请求响应信息的属性ID是<strong>25 (0x19) Byte</strong>。</p><p>随后跟随一个值为 0 或 1 的字节。在属性集中出现超过一次请求响应信息，或其值不为 1 或 0，均视为协议错误。如果请求响应信息没有设置，则采用默认值 0。</p><p>客户端通过此值请求服务器，希望服务器在 CONNACK 中回复响应信息。<span class="vcMarked">此值为 0 表示服务器必须不能在 CONNACK 中回复响应信息</span> <span class="vcReferred">[MQTT-3.1.2-28]</span>。此值为 1 表示服务器可以在 CONNACK 中回复响应信息。</p><p><em>非规范性评论</em></p><p><em>即使客户端请求了，服务器也可以不在 CONNACK 中回复响应信息。</em></p><p>参考 <a href="#4-10-%E8%AF%B7%E6%B1%82-%E5%93%8D%E5%BA%94">4.10</a> 了解关于 请求&#x2F;响应 的更多信息。</p><h5 id="3-1-2-11-7-请求问题信息"><a href="#3-1-2-11-7-请求问题信息" class="headerlink" title="3.1.2.11.7 请求问题信息"></a>3.1.2.11.7 请求问题信息</h5><p>请求问题信息的属性ID是<strong>23 (0x17) Byte</strong>。</p><p>随后跟随一个值为 0 或 1 的字节。在属性集中出现超过一次请求问题信息，或其值不为 1 或 0，均视为协议错误。如果请求问题信息没有设置，则采用默认值 0。</p><p>客户端通过此值表示服务器是是否应该在故障时发送原因字符串或用户属性。</p><p><span class="vcMarked">如果请求问题信息的值为 0，服务器可以在 CONNACK 或 DISCONNECT 包中携带原因字符串或用户属性，但必须不在除 PUBLISH，CONNACK，DISCONNECT 之外的包中携带原因字符串或用户属性</span> <span class="vcReferred">[MQTT-3.1.2-29]</span>。如果请求问题信息的值为 0 且客户端接收到除 PUBLISH，CONNACK，DISCONNECT 之外的包中带有了原因字符串或用户属性，客户端使用带有原因码 0x82（协议错误）的 DISCONNECT 包断开连接，参考 <a href="#4-13-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86">4.13</a> 了解更多信息。</p><p>如果请求问题信息的值为 1，服务器可以在任何允许的包中返回原因字符串或用户属性。</p><h5 id="3-1-2-11-8-用户属性"><a href="#3-1-2-11-8-用户属性" class="headerlink" title="3.1.2.11.8 用户属性"></a>3.1.2.11.8 用户属性</h5><p>用户属性的属性ID是<strong>38 (0x26) Byte</strong>。</p><p>随后跟随 UTF-8字符串对。</p><p>用户属性可以出现多次，用来携带多个 键-值 对。同样的 键 允许出现超过一次。</p><p><em>非规范性评论</em></p><p>CONNECT 包中的用户属性可以用来从客户端向服务器发送连接过程中依赖的属性。这些属性的含义超出了本规范的范围。</p><h5 id="3-1-2-11-9-认证方式"><a href="#3-1-2-11-9-认证方式" class="headerlink" title="3.1.2.11.9 认证方式"></a>3.1.2.11.9 认证方式</h5><p>认证方式的属性ID是<strong>21 (0x15) Byte</strong>。</p><p>随后跟随 UTF-8字符串，其中包括了使用的扩展认证方式的名称。认证方式在属性集中出现超过一次视为协议错误。</p><p>如果没有设置认证方式，将不会执行扩展认证。参考 <a href="#4-12-%E5%A2%9E%E5%BC%BA%E8%AE%A4%E8%AF%81">4.12</a>。</p><p><span class="vcMarked">如果客户端再 CONNECK 包中设置了认证方式，那么在其收到 CONNACK 包之前，客户端必须不能发送除了 AUTH 和 DISCONNECT 包之外的任何类型的包</span> <span class="vcReferred">[MQTT-3.1.2-30]</span>。</p><h5 id="3-1-2-11-10-认证数据"><a href="#3-1-2-11-10-认证数据" class="headerlink" title="3.1.2.11.10 认证数据"></a>3.1.2.11.10 认证数据</h5><p>认证数据的属性ID是<strong>22 (0x16) Byte</strong>。</p><p>随后跟随 二进制数据 其中包括认证数据。当认证方式不存在是提供认证数据，或是在任何情况下提供超过一次的认证数据，均视为协议错误。</p><p>认证数据的内容由认证方式决定。参考 <a href="#4-12-%E5%A2%9E%E5%BC%BA%E8%AE%A4%E8%AF%81">4.12</a> 了解更多关于扩展认证的信息。</p><h4 id="3-1-2-12-可变头非规范性示例"><a href="#3-1-2-12-可变头非规范性示例" class="headerlink" title="3.1.2.12 可变头非规范性示例"></a>3.1.2.12 可变头非规范性示例</h4><p>图3-6 可变头示例</p><table>  <thead>    <tr><td></td><td>描述</td><td>7</td><td>6</td><td>5</td><td>4</td><td>3</td><td>2</td><td>1</td><td>0</td></tr>  </thead>  <tbody>    <tr><td colspan="10">协议名称</td></tr>    <tr>      <td>byte 1</td><td>长度高字节（MSB）（0）</td>      <td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td>    </tr>    <tr>      <td>byte 2</td><td>长度低字节（LSB）（4）</td>      <td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>1</td><td>0</td><td>0</td>    </tr>    <tr>      <td>byte 3</td><td>‘M’</td>      <td>0</td><td>1</td><td>0</td><td>0</td><td>1</td><td>1</td><td>0</td><td>1</td>    </tr>    <tr>      <td>byte 4</td><td>‘Q’</td>      <td>0</td><td>1</td><td>0</td><td>1</td><td>0</td><td>0</td><td>0</td><td>1</td>    </tr>    <tr>      <td>byte 5</td><td>‘T’</td>      <td>0</td><td>1</td><td>0</td><td>1</td><td>0</td><td>1</td><td>0</td><td>0</td>    </tr>    <tr>      <td>byte 6</td><td>‘T’</td>      <td>0</td><td>1</td><td>0</td><td>1</td><td>0</td><td>1</td><td>0</td><td>0</td>    </tr>    <tr><td colspan="10">协议版本</td></tr>    <tr>      <td>byte 7</td><td>版本（5）</td>      <td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>1</td><td>0</td><td>1</td>    </tr>    <tr><td colspan="10">连接标识</td></tr>    <tr>      <td>byte 8</td>      <td>        用户名标识（1）</br>        密码标识（1）</br>        遗嘱保留消息（0）</br>        遗嘱QoS（01）</br>        遗嘱标识（1）</br>        全新开始（1）</br>        保留（0）      </td>      <td>1</td><td>1</td><td>0</td><td>0</td><td>1</td><td>1</td><td>1</td><td>0</td>    </tr>    <tr><td colspan="10">保活时间</td></tr>    <tr>      <td>byte 9</td><td>保活时间高位（MSB）（0）</td>      <td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td>    </tr>    <tr>      <td>byte 10</td><td>保活时间低位（LSB）（10）</td>      <td>0</td><td>0</td><td>0</td><td>0</td><td>1</td><td>0</td><td>1</td><td>0</td>    </tr>    <tr><td colspan="10">属性集</td></tr>    <tr>      <td>byte 11</td><td>长度（5）</td>      <td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>1</td><td>0</td><td>1</td>    </tr>    <tr>      <td>byte 12</td><td>属性ID：会话过期间隔（17）</td>      <td>0</td><td>0</td><td>0</td><td>1</td><td>0</td><td>0</td><td>0</td><td>1</td>    </tr>    <tr>      <td>byte 13</td><td rowspan="4">会话过期间隔（10）</td>      <td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td>    </tr>    <tr>      <td>byte 14</td>      <td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td>    </tr>    <tr>      <td>byte 15</td>      <td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td>    </tr>    <tr>      <td>byte 16</td>      <td>0</td><td>0</td><td>0</td><td>0</td><td>1</td><td>0</td><td>1</td><td>0</td>    </tr>  </tbody></table><h3 id="3-1-3-CONNECT载荷"><a href="#3-1-3-CONNECT载荷" class="headerlink" title="3.1.3 CONNECT载荷"></a>3.1.3 CONNECT载荷</h3><p><span class="vcMarked">CONNECT 中的载荷包含了一个或多个 长度 + 内容 格式的字段，这些字段的存在与否由可变头中的标志位决定。这些字段的顺序是固定的，如果存在的话，必须按照 客户端ID，遗嘱属性集，遗嘱主题，遗嘱载荷，用户名，密码 这样的顺序出现</span> <span class="vcReferred">[MQTT-3.1.3-1]</span>。</p><h4 id="3-1-3-1-客户端ID"><a href="#3-1-3-1-客户端ID" class="headerlink" title="3.1.3.1 客户端ID"></a>3.1.3.1 客户端ID</h4><p>客户端ID用来在服务器端区分不同的客户端。每个连向服务器的客户端都拥有一个唯一的客户端ID。<span class="vcMarked">客户端ID必须被客户端和服务器用于关联客户端和服务器之间的会话状态</span> <span class="vcReferred">[MQTT-3.1.3-2]</span>。参考 <a href="#4-1-%E4%BC%9A%E8%AF%9D%E7%8A%B6%E6%80%81">4.1</a> 了解更多关于会话状态的信息。</p><p><span class="vcMarked">客户端ID必须作为 CONNECT 包载荷中的第一个字段出现</span> <span class="vcReferred">[MQTT-3.1.3-3]</span>。</p><p><span class="vcMarked">客户端ID必须被编码为一个 UTF-8 字符串</span>，该数据类型的定义在 <a href="#1-5-4-UTF-8%E5%AD%97%E7%AC%A6%E4%B8%B2">1.5.4</a> <span class="vcReferred">[MQTT-3.1.3-4]</span>。</p><p><span class="vcMarked">服务器必须允许客户端ID是长度为 1 到 23 个字节之间的 UTF-8 字符串，且仅包含下列字符：“0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ”</span> <span class="vcReferred">[MQTT-3.1.3-5]</span>。</p><p>服务器可以允许客户端ID的长度超过23字节。服务器可以允许客户端ID的内容包含上述以外的内容。</p><p><span class="vcMarked">服务器可以允许客户端传递长度为0的客户端ID，当此情况发生时，服务器必须将此情况作为一个特殊情况对待，并为客户端分配一个唯一的客户端ID</span> <span class="vcReferred">[MQTT-3.1.3-6]</span>。<span class="vcMarked">服务器之后必须正常处理此 CONNECT 包，就如同客户端本身携带了这个唯一的客户端ID一样，而且必须在 CONNACK 包中返回这个分配的客户端ID</span> <span class="vcReferred">[MQTT-3.1.3-7]</span>。</p><p><span class="vcMarked">如果服务器拒绝了客户端ID，服务器可以使用一个带有原因码 0x85（客户端ID不可用）的 CONNACK 包作为对客户端 CONNECT 包的响应，如同 <a href="#4-13-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86">4.13</a> 中描述的那样，之后服务器必须关闭网络连接</span> <span class="vcReferred">[MQTT-3.1.3-8]</span>。</p><p><em>非规范性评论</em></p><p><em>客户端实现可以提供一个方便的生成随机客户端ID的方法。使用这种方法的客户端应该注意避免创建长期存在的孤立会话。</em></p><h4 id="3-1-3-2-遗嘱属性集"><a href="#3-1-3-2-遗嘱属性集" class="headerlink" title="3.1.3.2 遗嘱属性集"></a>3.1.3.2 遗嘱属性集</h4><p>如果遗嘱标识被置为 1，载荷中的下一个字段会是遗嘱属性集。遗嘱属性集决定了当遗嘱消息被发布时所使用的应用消息属性集，还决定了何时发布遗嘱消息。遗嘱属性集包含了属性长度和属性集内容。</p><h5 id="3-1-3-2-1-属性长度"><a href="#3-1-3-2-1-属性长度" class="headerlink" title="3.1.3.2.1 属性长度"></a>3.1.3.2.1 属性长度</h5><p>遗嘱属性集中的属性集长度是一个变长整数。</p><h5 id="3-1-3-2-2-遗嘱延迟间隔"><a href="#3-1-3-2-2-遗嘱延迟间隔" class="headerlink" title="3.1.3.2.2 遗嘱延迟间隔"></a>3.1.3.2.2 遗嘱延迟间隔</h5><p>遗嘱延迟间隔的属性ID是<strong>24 (0x18) Byte</strong>。</p><p>随后跟随 4字节整数，表示遗嘱延迟间隔时间，单位为秒。遗嘱延迟间隔在属性集中出现超过一次视为协议错误。如果遗嘱延迟间隔未设置，默认值为0，表示遗嘱发布前没有间隔时间。</p><p>服务器在遗嘱延迟间隔结束或是会话结束时发布遗嘱，这两种条件以先触发的为准。<span class="vcMarked">如果在遗嘱延迟间隔结束前，该会话被新的网络连接延续，服务器必须不不发遗嘱</span> <span class="vcReferred">[MQTT-3.1.3-9]</span>。</p><p><em>非规范性评论</em></p><p><em>遗嘱延迟间隔的一个作用是，当使用周期性可用的网络进行通信时，客户端使用遗嘱延迟间隔可以在遗嘱发布前重新连接并使用会话，而非每次连接断开后都发布遗嘱。</em></p><p><em>非规范性评论</em></p><p><em>当客户端和服务器的网络连接存在时，如果客户端再次使用相同的客户端ID连接到服务器，现有网络连接的遗嘱消息会被发布，除非新连接将 全新开始 标识置为 0 且遗嘱延迟间隔的值大于 0。如果遗嘱延迟间隔的值为 0，遗嘱消息会因为原有网络连接的关闭而发布，如果 全新开始 标识为 1 ，遗嘱消息会因为原有会话的结束而发布。</em></p><h5 id="3-1-3-2-3-载荷格式标识"><a href="#3-1-3-2-3-载荷格式标识" class="headerlink" title="3.1.3.2.3 载荷格式标识"></a>3.1.3.2.3 载荷格式标识</h5><p>载荷格式标识的属性ID是<strong>1 (0x01) Byte</strong>。</p><p>随后的值表示遗嘱载荷的格式：</p><ul><li>0（0x00）Byte 表示遗嘱消息是未指定的字节流，这等同于没有发送载荷格式标识。</li><li>1（0x01）Byte 表示遗嘱消息是 UTF-8字符串。载荷中的 UTF-8 数据必须符合 <a href="#1.3-Unicode">Unicode</a> 和 <a href="#1.3-RFC3629">RFC3629</a> 规范。</li></ul><p>载荷格式标识在属性集中出现超过一次视为协议错误。服务器可以验证遗嘱消息是否符合载荷格式标识指定的格式，如果不符合则发送一个带有原因码 0x99（载荷格式错误）的 CONNACK 报文，详情参考 4.13。</p><h5 id="3-1-3-2-4-消息过期间隔"><a href="#3-1-3-2-4-消息过期间隔" class="headerlink" title="3.1.3.2.4 消息过期间隔"></a>3.1.3.2.4 消息过期间隔</h5><p>消息过期间隔的属性ID是<strong>2 (0x02) Byte</strong>。</p><p>随后跟随 4字节整数 用来表示消息过期间隔。消息过期间隔在属性集中出现超过一次视为协议错误。</p><p>当消息过期间隔存在时，此四字节的整数表示遗嘱消息的存活时间（单位秒），同时也是服务器发送此遗嘱消息时使用的发布过期时间。</p><p>如果没有设置此值，服务器发布遗嘱消息时不设置消息过期时间。</p><h5 id="3-1-3-2-5-内容类型"><a href="#3-1-3-2-5-内容类型" class="headerlink" title="3.1.3.2.5 内容类型"></a>3.1.3.2.5 内容类型</h5><p>内容类型的属性ID是<strong>3 (0x03) Byte</strong>。</p><p>随后跟随 UTF-8字符串，表示遗嘱消息的内容类型。内容类型在属性集中出现超过一次视为协议错误。内容类型的值由发送方和接收方的应用程序定义。</p><h5 id="3-1-3-2-6-响应主题"><a href="#3-1-3-2-6-响应主题" class="headerlink" title="3.1.3.2.6 响应主题"></a>3.1.3.2.6 响应主题</h5><p>响应主题的属性ID是<strong>8 (0x08) Byte</strong>。</p><p>随后跟随 UTF-8字符串，作为响应消息的主题名称。响应主题在属性集中出现超过一次视为协议错误。响应主题的存在表示将遗嘱消息视为一个请求。</p><p>参考 <a href="#4-10-%E8%AF%B7%E6%B1%82-%E5%93%8D%E5%BA%94">4.10</a> 了解关于 请求&#x2F;响应 的更多信息。</p><h5 id="3-1-3-2-7-关联数据"><a href="#3-1-3-2-7-关联数据" class="headerlink" title="3.1.3.2.7 关联数据"></a>3.1.3.2.7 关联数据</h5><p>关联数据的属性ID是<strong>9 (0x09) Byte</strong>。</p><p>随后跟随 二进制数据。请求消息的发送者使用关联数据来识别接收到的响应消息针对哪个请求。关联数据在属性集中出现超过一次视为协议错误。如果关联数据未设置，请求方无需携带任何关联数据。</p><p>关联数据的值仅对请求消息的发送者和响应消息的接收者有意义。</p><p>参考 <a href="#4-10-%E8%AF%B7%E6%B1%82-%E5%93%8D%E5%BA%94">4.10</a> 了解关于 请求&#x2F;响应 的更多信息。</p><h5 id="3-1-3-2-8-用户属性"><a href="#3-1-3-2-8-用户属性" class="headerlink" title="3.1.3.2.8 用户属性"></a>3.1.3.2.8 用户属性</h5><p>用户属性的属性ID是<strong>38 (0x26) Byte</strong>。</p><p>随后跟随 UTF-8字符串对。用户属性允许出现多次来表示多个键值对。同样的键允许出现多次。</p><p><span class="vcMarked">服务器必须在发布遗嘱消息时维持用户属性的顺序</span> <span class="vcReferred">[MQTT-3.1.3-10]</span>。</p><p><em>非规范性评论</em></p><p><em>这个属性只是提供一种传输键值对的方式，键值对的含义和解释只有负责发送和接收该属性的应用程序了解。</em></p><h4 id="3-1-3-3-遗嘱主题"><a href="#3-1-3-3-遗嘱主题" class="headerlink" title="3.1.3.3 遗嘱主题"></a>3.1.3.3 遗嘱主题</h4><p>如果遗嘱标识被置为 1，载荷中的下一个字段会是遗嘱主题。<span class="vcMarked">遗嘱主题必须是一个 UTF-8字符串</span>，参考 <a href="#1-5-4-UTF-8%E5%AD%97%E7%AC%A6%E4%B8%B2">1.5.4</a> 中的定义<span class="vcReferred">[MQTT-3.1.3-11]</span>。</p><h4 id="3-1-3-4-遗嘱载荷"><a href="#3-1-3-4-遗嘱载荷" class="headerlink" title="3.1.3.4 遗嘱载荷"></a>3.1.3.4 遗嘱载荷</h4><p>如果遗嘱标识被置为 1，载荷中的下一个字段会是遗嘱载荷。如同 <a href="#3-1-2-5-%E9%81%97%E5%98%B1%E6%A0%87%E8%AF%86">3.1.2.5</a> 的定义，遗嘱载荷是会被发布遗嘱主题中的应用消息。遗嘱载荷字段内含有二进制数据。</p><h4 id="3-1-3-5-用户名"><a href="#3-1-3-5-用户名" class="headerlink" title="3.1.3.5 用户名"></a>3.1.3.5 用户名</h4><p>如果用户名标识被置为 1，载荷中的下一个字段会是用户名。<span class="vcMarked">用户名必须是一个 UTF-8字符串</span>，参考 <a href="#1-5-4-UTF-8%E5%AD%97%E7%AC%A6%E4%B8%B2">1.5.4</a> 中的定义<span class="vcReferred">[MQTT-3.1.3-12]</span>。用户名可以被服务器用作认证和授权。</p><h4 id="3-1-3-6-密码"><a href="#3-1-3-6-密码" class="headerlink" title="3.1.3.6 密码"></a>3.1.3.6 密码</h4><p>如果密码标识被置为 1，载荷中的下一个字段会是密码。密码字段内容是 二进制数据。虽然此字段被称为密码，但此字段实际上可以携带任何形式的凭据信息。</p><h3 id="3-1-4-CONNECT动作"><a href="#3-1-4-CONNECT动作" class="headerlink" title="3.1.4 CONNECT动作"></a>3.1.4 CONNECT动作</h3><p>请注意，服务器可以在同一 TCP 端口或其他网络端点上支持多个协议（包括其他版本的 MQTT 协议）。如果服务器确定协议是 MQTT v5.0，则它会按如下方式验证连接尝试。</p><ol><li>如果服务器在客户端的网络连接建立后的一段合理时间内没有收到 CONNECT 包，服务器应该关闭网络连接。</li><li><span class="vcMarked">服务器必须验证 CONNECT 包的格式符合 <a href="#3-1-CONNECT-%E8%BF%9E%E6%8E%A5%E8%AF%B7%E6%B1%82">3.1</a> 中的描述，如不符合则关闭网络连接</span> <span class="vcReferred">[MQTT-3.1.4-1]</span>。服务器可以参考 4.13 在关闭网络连接前使用带有 0x80 或更高值的原因码的 CONNACK 通知客户端。</li><li><span class="vcMarked">服务器可以检查 CONNECT 包中的内容是否满足更进一步的限制要求，并且应该进行认证和授权检查。如果其中任何检查失败，服务器必须关闭网络连接</span> <span class="vcReferred">[MQTT-3.1.4-2]</span>。在关闭网络连接前，服务器可以参考 <a href="#3-2-CONNACK-%E2%80%93-%E8%BF%9E%E6%8E%A5%E5%9B%9E%E5%A4%8D">3.2</a> 和 <a href="#4-13-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86">4.13</a> 发送一个带有 0x80 或更高值的原因码的符合情况的 CONNACK 包。</li></ol><p>如果验证成功，服务器施行下列动作。</p><ol><li><span class="vcMarked">如果客户端ID代表了一个已经连接到服务器的客户端，服务器参考 <a href="#4-13-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86">4.13</a> 发送一个带有原因码 0x8E（会话被接管）的 DISCONNECT 包到当前已有连接的客户端，且必须关闭当前已有连接客户端的网络连接</span> <span class="vcReferred">[MQTT-3.1.4-3]</span>。如果已有连接的客户端包含遗嘱，遗嘱的发布情况参考 3.1.2.5。</li></ol><p><em>非规范性评论</em></p><p><em>如果已有连接的遗嘱延迟间隔值为0且存在遗嘱消息，遗嘱消息会因为网络连接断开的原因发布。当已有连接的会话过期间隔值为0，或是新连接的全新开始标识被置为 1时，如果已有连接存在遗嘱消息，那么遗嘱消息会被发布，因为原有会话已经在接管时结束。</em></p><ol start="2"><li><span class="vcMarked">服务器必须参考 <a href="#3-1-2-4-%E5%85%A8%E6%96%B0%E5%BC%80%E5%A7%8B">3.1.2.4</a> 中的描述处理全新开始标识</span> <span class="vcReferred">[MQTT-3.1.4-4]</span>。</li><li><span class="vcMarked">服务器必须使用带有原因码为 0x00（成功）的 CONNACK 回复 CONNECT 包</span> <span class="vcReferred">[MQTT-3.1.4-5]</span>。</li></ol><p><em>非规范性评论</em></p><p><em>如果服务器用于处理任何形式的业务关键数据，建议执行身份验证和授权检查。如果这些检查通过，服务器会使用带有原因码 0x00（成功）的 CONNACK 回复。如果检查失败，建议服务器根本不发送 CONNACK，因为这可能会提醒潜在攻击者 MQTT 服务器的存在，并鼓励此类攻击者发起拒绝服务或密码猜测攻击。</em></p><ol start="4"><li>启动消息传递和保活监控。</li></ol><p>客户端可以在发送 CONNECT 包之后立刻发送其他 MQTT 包；客户端无需等待接收到来自服务器的 CONNACK 包。<span class="vcMarked">如果服务器决绝了 CONNECT，服务器必须不处理客户端在 CONNECT 包之后发送的任何除了 AUTH 以外的包</span> <span class="vcReferred">[MQTT-3.1.4-6]</span>。</p><p><em>非规范性评论</em></p><p><em>客户端通常会等待 CONNACK 数据包，然而，客户端可以选择在接受 CONNACK 前发送其他 MQTT 数据包，这样做可能会简化客户端实现，因为客户端无需监管连接状态。客户端需要接受在其收到 CONNACK 前，如果服务器拒绝了连接，其发送的数据都不会被服务器处理。</em></p><p><em>非规范性评论</em></p><p><em>在接收 CONNACK 之前发送其他 MQTT 包的客户端将不知道服务器约束以及是否正在使用任何现有会话。</em></p><p><em>非规范性评论</em></p><p><em>如果客户端在认证完成前就发送了过多的数据，服务器可以限制从网络连接读取数据或关闭网络连接。建议将此作为避免拒绝服务攻击的一种方法。</em></p><h2 id="3-2-CONNACK-–-连接回复"><a href="#3-2-CONNACK-–-连接回复" class="headerlink" title="3.2 CONNACK – 连接回复"></a>3.2 CONNACK – 连接回复</h2><h3 id="3-3-1-PUBLISH-固定头"><a href="#3-3-1-PUBLISH-固定头" class="headerlink" title="3.3.1 PUBLISH 固定头"></a>3.3.1 PUBLISH 固定头</h3><h1 id="4-操作行为"><a href="#4-操作行为" class="headerlink" title="4 操作行为"></a>4 操作行为</h1><h2 id="4-1-会话状态"><a href="#4-1-会话状态" class="headerlink" title="4.1 会话状态"></a>4.1 会话状态</h2><h3 id="4-1-1-存储会话状态"><a href="#4-1-1-存储会话状态" class="headerlink" title="4.1.1 存储会话状态"></a>4.1.1 存储会话状态</h3><h2 id="4-2-网络连接"><a href="#4-2-网络连接" class="headerlink" title="4.2 网络连接"></a>4.2 网络连接</h2><h2 id="4-7-主题名和主题过滤器"><a href="#4-7-主题名和主题过滤器" class="headerlink" title="4.7 主题名和主题过滤器"></a>4.7 主题名和主题过滤器</h2><h2 id="4-9-流量控制"><a href="#4-9-流量控制" class="headerlink" title="4.9 流量控制"></a>4.9 流量控制</h2><h2 id="4-10-请求-响应"><a href="#4-10-请求-响应" class="headerlink" title="4.10 请求 &#x2F; 响应"></a>4.10 请求 &#x2F; 响应</h2><h2 id="4-12-增强认证"><a href="#4-12-增强认证" class="headerlink" title="4.12 增强认证"></a>4.12 增强认证</h2><h2 id="4-13-错误处理"><a href="#4-13-错误处理" class="headerlink" title="4.13 错误处理"></a>4.13 错误处理</h2><h1 id="5-安全性（非规范性）"><a href="#5-安全性（非规范性）" class="headerlink" title="5 安全性（非规范性）"></a>5 安全性（非规范性）</h1><h3 id="5-4-9-处理禁止的Unicode码段"><a href="#5-4-9-处理禁止的Unicode码段" class="headerlink" title="5.4.9 处理禁止的Unicode码段"></a>5.4.9 处理禁止的Unicode码段</h3><h1 id="6-使用WebSocket作为传输层"><a href="#6-使用WebSocket作为传输层" class="headerlink" title="6 使用WebSocket作为传输层"></a>6 使用WebSocket作为传输层</h1><h1 id="7-一致性"><a href="#7-一致性" class="headerlink" title="7 一致性"></a>7 一致性</h1><h1 id="附录-C-MQTT-v5-0-新特性汇总（非规范性）"><a href="#附录-C-MQTT-v5-0-新特性汇总（非规范性）" class="headerlink" title="附录 C. MQTT v5.0 新特性汇总（非规范性）"></a>附录 C. MQTT v5.0 新特性汇总（非规范性）</h1>]]></content>
    
    
    <categories>
      
      <category>MQTT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MQTT</tag>
      
      <tag>网络协议</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>go轻量级事件库：gookit-event</title>
    <link href="/2024/01/04/gookit-event.html"/>
    <url>/2024/01/04/gookit-event.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>项目链接 <a href="https://github.com/gookit/event">gookit&#x2F;event</a></p></blockquote><span id="more"></span><p>项目介绍：</p><blockquote><p>Go实现的轻量级的事件管理、调度程序库, 支持设置监听器的优先级, 支持使用通配符来进行一组事件的监听</p><ul><li>支持自定义创建预定义的事件对象</li><li>支持对一个事件添加多个监听器</li><li>支持设置事件监听器的优先级，优先级越高越先触发</li><li>支持通过通配符 * 来进行一组事件的匹配监听.</li><li>ModeSimple - 注册 app.* 事件的监听，触发 app.run app.end 时，都将同时会触发 app.* 监听器</li><li>ModePath - NEW * 只匹配一段非 . 的字符,可以进行更精细的监听; ** 匹配任意多个字符,只能用于开头或结尾</li><li>支持直接使用通配符 * 来监听全部事件的触发</li><li>支持触发事件时投递到 chan, 异步进行消费处理. 触发: Async(), FireAsync()</li><li>完善的单元测试，单元覆盖率 &gt; 95%</li></ul></blockquote><p>我非常喜欢这种类型的项目，小巧、专注、恰到好处的feature。</p><p>当前这个项目可能没有经过足够的检验，可能存在一些bug，但是没有关系，他的代码足够简单，即便他产生了问题也可以轻松修复。</p>]]></content>
    
    
    <categories>
      
      <category>golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
      <tag>库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[翻译]Sol - 从零开始的MQTT broker - 特别篇：重构与事件循环</title>
    <link href="/2024/01/03/translate-sol-bonus.html"/>
    <url>/2024/01/03/translate-sol-bonus.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>原文 <a href="https://codepr.github.io/posts/sol-mqtt-broker-bonus/">Sol - An MQTT broker from scratch. Refactoring &amp; eventloop</a></p></blockquote><span id="more"></span><p><em><strong>更新日期: 2020-02-07</strong></em></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在前面的六个部分中，我们探索了一些常见的 CS 主题，例如网络编程、数据结构，这段短暂的旅程的终点是得到了一个充满了BUG但是勉强可用的MQTT broker。</p><p>由于好奇心，我想测试一下我们的项目离真正的生产项目有多么接近，而且我想对项目进行一些重构，减少一些临时的代码，让项目的结构更加合理，同时关注项目的可移植性。</p><p>我不会把所有的重构过程都写到博客中，因为那会非常无聊，我只会突出一些最重要的部分，剩下的部分你可以直接把 <code>master</code> 分支合并到 <code>tutorial</code> 来查看，或者直接克隆 <code>master</code> 分支。</p><p>首先我按照有限度列出了需要优化的要点：</p><ul><li>低层的 I&#x2F;O 处理器，用以正确处理数据流读写</li><li>对 EPOLL 进行抽象，因为他是 Linux 独有功能，提供一些备选方案</li><li>管理加密消息，实现可用明文消息或加密消息的透明接口</li><li>正确处理客户端会话，实现类似 <code>&#39;+&#39;</code> 通配符之类的其他 MQTT 功能</li></ul><p><em>备注：虽然我们自己做的哈希表运行的不错，但我还是决定选择使用久经沙场的 <code>UTHASH</code> 库。由于他只有一个头文件，集成进我们的项目也非常容易。他的项目文档在<a href="https://troydhanson.github.io/uthash/">这里</a>。</em></p><h1 id="TCP分片问题"><a href="#TCP分片问题" class="headerlink" title="TCP分片问题"></a>TCP分片问题</h1><p>第一个也是最需要被检查的问题是网络通信，在本地进行负载测试时，我发现当负载量较大时程序开始丢包，或者说，内核缓冲区被淹没并开始对数据流进行分片。TCP 作为一个流协议，在处理数据中进行分片是无可厚非的，没有在一开始时就考虑这个问题显然是我比较幼稚，或者说因为我着急写一个可以运行的程序，忽略了底层细节。无论如何，这让程序产生了一些问题，例如解析错误的数据包，或者分片部分被当作数据包的第一个字节，识别成了各种不同的指令等等。</p><p>因此，最重要的修复之一是 <strong>server.c</strong> 模块中的 <code>recv_packet</code> 函数，特别是为每个客户端添加了类似状态机的行为，使其可以正确执行非阻塞读写，而不会阻塞线程。</p><p>我还将应用程序的核心部分，特别是 MQTT 抽象（例如客户端会话和主题）移到了 <code>sol_internal.h</code> 中。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>sol_internal.h</span></div><code class="language-c"><span class="token comment">// 客户端行为可以被视为拥有四个状态的状态机：</span><span class="token comment">// - WAITING_HEADER 基础状态, 等待到来的第一字节数据头</span><span class="token comment">// - WAITING_LENGTH 第二个状态, 收到了头部但还没有收取全部的 remaing data</span><span class="token comment">// - WAITING_DATA 第三个状态, 基于 remaing data 判断还有多少剩余数据</span><span class="token comment">// - SENDING_DATA 最后一个状态, 已经收取了全部的数据包, 接下来判断是否需要返回数据包</span><span class="token keyword">enum</span> <span class="token class-name">client_status</span> <span class="token punctuation">&#123;</span>    WAITING_HEADER<span class="token punctuation">,</span>    WAITING_LENGTH<span class="token punctuation">,</span>    WAITING_DATA<span class="token punctuation">,</span>    SENDING_DATA<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 客户端链接的包装类, 客户端可以是订阅者或发布者, 可以拥有会话</span><span class="token comment">// 现在不再需要为每个客户端申请内存, 我在程序启动时初始化了一个客户端池, 当然, 读写 buffer 是使用时再申请的</span><span class="token comment">// 这是一个可以被哈希的结构, 参考 https://troydhanson.github.io/uthash/userguide.html</span><span class="token keyword">struct</span> <span class="token class-name">client</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">ev_ctx</span> <span class="token operator">*</span>ctx<span class="token punctuation">;</span> <span class="token comment">// 事件循环上下文指针</span>    <span class="token keyword">int</span> rc<span class="token punctuation">;</span>     <span class="token comment">// 持有处理的上一个消息的返回码</span>    <span class="token keyword">int</span> status<span class="token punctuation">;</span> <span class="token comment">// 当前状态</span>    <span class="token keyword">int</span> rpos<span class="token punctuation">;</span>   <span class="token comment">// 表示去除 Fixed Header, 数据包实际开始的位置</span>                <span class="token comment">// 因为收包时需要解析 Fixed Header 中变长的 Remaing Length, 不想在解包时再次解析</span>                <span class="token comment">// 就通过此字段记录</span>    <span class="token class-name">size_t</span> read<span class="token punctuation">;</span>  <span class="token comment">// 已经读取的字节数</span>    <span class="token class-name">size_t</span> toread<span class="token punctuation">;</span><span class="token comment">// 完成此数据包总共需要读取的字节数</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>rbuf<span class="token punctuation">;</span> <span class="token comment">// 读取 buffer</span>    <span class="token class-name">size_t</span> wrote<span class="token punctuation">;</span> <span class="token comment">// 已经写入的字节数</span>    <span class="token class-name">size_t</span> towrite<span class="token punctuation">;</span> <span class="token comment">// 还需写入的字节数</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>wbuf<span class="token punctuation">;</span>  <span class="token comment">// 写入 buffer</span>    <span class="token keyword">char</span> client_id<span class="token punctuation">[</span>MQTT_CLIENT_ID_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// MQTT 规范中的客户端 ID</span>    <span class="token keyword">struct</span> <span class="token class-name">connection</span> conn<span class="token punctuation">;</span> <span class="token comment">// 网络连接封装, 通过抽象接口支持普通连接或TLS连接</span>    <span class="token keyword">struct</span> <span class="token class-name">client_session</span> <span class="token operator">*</span>session<span class="token punctuation">;</span> <span class="token comment">// 客户端会话</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> last_seen<span class="token punctuation">;</span>  <span class="token comment">// 客户端上次活动的时间戳</span>    bool online<span class="token punctuation">;</span>  <span class="token comment">// 在线标识</span>    bool connected<span class="token punctuation">;</span> <span class="token comment">// 是否已经处理 CONNECT 包的标识</span>    bool has_lwt<span class="token punctuation">;</span> <span class="token comment">// 表示 CONNECT 包是否包含遗嘱 LWT（Last Will and Testament）</span>    bool clean_session<span class="token punctuation">;</span> <span class="token comment">// 表示是否设置了 clean_session 标识</span>    UT_hash_handle hh<span class="token punctuation">;</span> <span class="token comment">// UTHASH handle 处理器, 使用 UTHASH 的条件</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 每个客户端都持有一个会话, 用来缓存该客户端订阅的主题、失联时错过的消息(只有当 clean_session 为 false)、还有服务器已经发往客户端但没收到回复的消息(inflight messages)(这些消息都带有 message ID)</span><span class="token comment">// 基于MQTT协议, 最大的 mid (message ID) 数量为 65535, 所以 i_acks, i_msgs 和 in_i_acks 被初始化为这个尺寸</span><span class="token comment">// 这是一个可被哈希的结构体, APP可以追踪他完整的生命周期</span><span class="token keyword">struct</span> <span class="token class-name">client_session</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> next_free_mid<span class="token punctuation">;</span>                    <span class="token comment">// 下一个可用的 mid (message ID)</span>    List <span class="token operator">*</span>subscriptions<span class="token punctuation">;</span>                  <span class="token comment">// 客户端订阅的所有主题, 使用主题结构体存储</span>    List <span class="token operator">*</span>outgoing_msgs<span class="token punctuation">;</span>                  <span class="token comment">// 断开链接期间发往客户端的消息, 使用 mqtt_packet 指针存储</span>    bool has_inflight<span class="token punctuation">;</span>                    <span class="token comment">// 表示是否有 inflight 消息的标识</span>    bool clean_session<span class="token punctuation">;</span>                   <span class="token comment">// clean_session 标识</span>    <span class="token keyword">char</span> session_id<span class="token punctuation">[</span>MQTT_CLIENT_ID_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// session 中引用的 client_id</span>    <span class="token keyword">struct</span> <span class="token class-name">mqtt_packet</span> lwt_msg<span class="token punctuation">;</span>           <span class="token comment">// 遗嘱消息, 由 CONNECT 设置, 可为空</span>    <span class="token keyword">struct</span> <span class="token class-name">inflight_msg</span> <span class="token operator">*</span>i_acks<span class="token punctuation">;</span>          <span class="token comment">// 需要被清理的离线ACK</span>    <span class="token keyword">struct</span> <span class="token class-name">inflight_msg</span> <span class="token operator">*</span>i_msgs<span class="token punctuation">;</span>          <span class="token comment">// 由于发送超时, 需要被重传的离线消息</span>    <span class="token keyword">struct</span> <span class="token class-name">inflight_msg</span> <span class="token operator">*</span>in_i_acks<span class="token punctuation">;</span>       <span class="token comment">// 需要被客户端清理的离线输入ACK</span>    UT_hash_handle hh<span class="token punctuation">;</span>                    <span class="token comment">// UTHASH handle 处理器, 使用 UTHASH 的条件</span>    <span class="token keyword">struct</span> <span class="token class-name">ref</span> refcount<span class="token punctuation">;</span>                  <span class="token comment">// 被引用计数, 用来共享此结构体</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>因此，客户端结构现在更加健壮，它存储每个数据包读写的状态，以便在内核空间出现 <code>EAGAIN</code> 错误时恢复。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>server.c</span></div><code class="language-c"><span class="token comment">// 客户端接收数据包</span><span class="token keyword">static</span> <span class="token class-name">ssize_t</span> <span class="token function">recv_packet</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">client</span> <span class="token operator">*</span>c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ssize_t</span> nread <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> opcode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> pktlen <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    <span class="token comment">// 基础状态, 读头部</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">-></span>status <span class="token operator">==</span> WAITING_HEADER<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 读取最初的2byte, 第一个byte应包含消息类型码</span>        nread <span class="token operator">=</span> <span class="token function">recv_data</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token operator">-></span>conn<span class="token punctuation">,</span> c<span class="token operator">-></span>rbuf <span class="token operator">+</span> c<span class="token operator">-></span>read<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">-</span> c<span class="token operator">-></span>read<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 异常视为断链</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">!=</span> EAGAIN <span class="token operator">&amp;&amp;</span> errno <span class="token operator">!=</span> EWOULDBLOCK <span class="token operator">&amp;&amp;</span> nread <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token operator">-</span>ERRCLIENTDC<span class="token punctuation">;</span>        <span class="token comment">// 不管是否全部读取完成, 记录已经读取的数量</span>        c<span class="token operator">-></span>read <span class="token operator">+=</span> nread<span class="token punctuation">;</span>        <span class="token comment">// 没有完全读取, 返回 EAGAIN</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">==</span> EAGAIN <span class="token operator">&amp;&amp;</span> c<span class="token operator">-></span>read <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token operator">-</span>ERREAGAIN<span class="token punctuation">;</span>        <span class="token comment">// 完成进入下一阶段</span>        c<span class="token operator">-></span>status <span class="token operator">=</span> WAITING_LENGTH<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 头部已经读完, 已经了解消息类型, 接下来我们读取第2-4byte, 从第一个字节之后的三个字节可能会用来存储包长度</span>    <span class="token comment">// 当然, 除了 PINGRESP/PINGREQ 或 DISCONNECT, 他们没有 remaining length</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">-></span>status <span class="token operator">==</span> WAITING_LENGTH<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">-></span>read <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            opcode <span class="token operator">=</span> <span class="token operator">*</span>c<span class="token operator">-></span>rbuf <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">;</span>            <span class="token comment">// 数据包类型错误</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>DISCONNECT <span class="token operator">&lt;</span> opcode <span class="token operator">||</span> CONNECT <span class="token operator">></span> opcode<span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token operator">-</span>ERRPACKETERR<span class="token punctuation">;</span>            <span class="token comment">// 数据包类型是 PINGRESP/PINGREQ 或 DISCONNECT, 无需后续处理(没有 remaining length)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>opcode <span class="token operator">></span> UNSUBSCRIBE<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                c<span class="token operator">-></span>rpos <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>                c<span class="token operator">-></span>toread <span class="token operator">=</span> c<span class="token operator">-></span>read<span class="token punctuation">;</span>                <span class="token keyword">goto</span> exit<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 总共读取至 4 byte</span>        <span class="token comment">// 译者觉得这里应该到 5</span>        nread <span class="token operator">=</span> <span class="token function">recv_data</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token operator">-></span>conn<span class="token punctuation">,</span> c<span class="token operator">-></span>rbuf <span class="token operator">+</span> c<span class="token operator">-></span>read<span class="token punctuation">,</span> <span class="token number">4</span> <span class="token operator">-</span> c<span class="token operator">-></span>read<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">!=</span> EAGAIN <span class="token operator">&amp;&amp;</span> errno <span class="token operator">!=</span> EWOULDBLOCK <span class="token operator">&amp;&amp;</span> nread <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token operator">-</span>ERRCLIENTDC<span class="token punctuation">;</span>        c<span class="token operator">-></span>read <span class="token operator">+=</span> nread<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">==</span> EAGAIN <span class="token operator">&amp;&amp;</span> c<span class="token operator">-></span>read <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token operator">-</span>ERREAGAIN<span class="token punctuation">;</span>        <span class="token comment">// 通过 remaining length 获得剩余部分的长度</span>        pktlen <span class="token operator">=</span> <span class="token function">mqtt_decode_length</span><span class="token punctuation">(</span>c<span class="token operator">-></span>rbuf <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 超长异常</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pktlen <span class="token operator">></span> conf<span class="token operator">-></span>max_request_size<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token operator">-</span>ERRMAXREQSIZE<span class="token punctuation">;</span>        <span class="token comment">// rpos 定位到头部和变长长度之后</span>        c<span class="token operator">-></span>rpos <span class="token operator">=</span> pos <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">// 数据包总大小</span>        c<span class="token operator">-></span>toread <span class="token operator">=</span> pktlen <span class="token operator">+</span> pos <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// pos = bytes used to store length</span>        <span class="token comment">// ACK 包无需继续读取</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pktlen <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">)</span>            <span class="token keyword">goto</span> exit<span class="token punctuation">;</span>        c<span class="token operator">-></span>status <span class="token operator">=</span> WAITING_DATA<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 读取完整的数据包字节</span>    nread <span class="token operator">=</span> <span class="token function">recv_data</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token operator">-></span>conn<span class="token punctuation">,</span> c<span class="token operator">-></span>rbuf <span class="token operator">+</span> c<span class="token operator">-></span>read<span class="token punctuation">,</span> c<span class="token operator">-></span>toread <span class="token operator">-</span> c<span class="token operator">-></span>read<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">!=</span> EAGAIN <span class="token operator">&amp;&amp;</span> errno <span class="token operator">!=</span> EWOULDBLOCK <span class="token operator">&amp;&amp;</span> nread <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token operator">-</span>ERRCLIENTDC<span class="token punctuation">;</span>    c<span class="token operator">-></span>read <span class="token operator">+=</span> nread<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">==</span> EAGAIN <span class="token operator">&amp;&amp;</span> c<span class="token operator">-></span>read <span class="token operator">&lt;</span> c<span class="token operator">-></span>toread<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token operator">-</span>ERREAGAIN<span class="token punctuation">;</span>exit<span class="token operator">:</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 在接收链接或回复消息后使用此函数获取后续客户端输入的数据</span><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">read_data</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">client</span> <span class="token operator">*</span>c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 我们必须接收一个完整的数据包</span>    <span class="token keyword">int</span> err <span class="token operator">=</span> <span class="token function">recv_packet</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 链接断开或收到了错误的数据包</span>    <span class="token comment">// TODO：设置一个处理 ERRMAXREQSIZE 的函数, 显示的提醒客户端故障</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">goto</span> err<span class="token punctuation">;</span>    <span class="token comment">// 表示阻塞, 需要继续读取</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">-></span>read <span class="token operator">&lt;</span> c<span class="token operator">-></span>toread<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token operator">-</span>ERREAGAIN<span class="token punctuation">;</span>    <span class="token comment">// 记录</span>    info<span class="token punctuation">.</span>bytes_recv <span class="token operator">+=</span> c<span class="token operator">-></span>read<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 断开链接或故障</span>err<span class="token operator">:</span>    <span class="token keyword">return</span> err<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 通过网络连接向客户端发送数据流, 持续发送直到所有数据发送完成, 通过 towrite 字段跟踪</span><span class="token comment">// 当阻塞时返回 EAGAIN</span><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">write_data</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">client</span> <span class="token operator">*</span>c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ssize_t</span> wrote <span class="token operator">=</span> <span class="token function">send_data</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token operator">-></span>conn<span class="token punctuation">,</span> c<span class="token operator">-></span>wbuf<span class="token operator">+</span>c<span class="token operator">-></span>wrote<span class="token punctuation">,</span> c<span class="token operator">-></span>towrite<span class="token operator">-</span>c<span class="token operator">-></span>wrote<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">!=</span> EAGAIN <span class="token operator">&amp;&amp;</span> errno <span class="token operator">!=</span> EWOULDBLOCK <span class="token operator">&amp;&amp;</span> wrote <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token operator">-</span>ERRCLIENTDC<span class="token punctuation">;</span>    c<span class="token operator">-></span>wrote <span class="token operator">+=</span> wrote <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> wrote <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">-></span>wrote <span class="token operator">&lt;</span> c<span class="token operator">-></span>towrite <span class="token operator">&amp;&amp;</span> errno <span class="token operator">==</span> EAGAIN<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token operator">-</span>ERREAGAIN<span class="token punctuation">;</span>    <span class="token comment">// 发送成功 更新状态</span>    info<span class="token punctuation">.</span>bytes_sent <span class="token operator">+=</span> c<span class="token operator">-></span>towrite<span class="token punctuation">;</span>    <span class="token comment">// 重置记录数据</span>    c<span class="token operator">-></span>towrite <span class="token operator">=</span> c<span class="token operator">-></span>wrote <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="加密通讯"><a href="#加密通讯" class="headerlink" title="加密通讯"></a>加密通讯</h1><p>需要注意的是，<code>recv_packet</code> 和 <code>write_data</code> 是两个在 <strong>network.h</strong> 模块中定义的函数：</p><ul><li><code>ssize_t send_data(struct connection *, const unsigned char *, size_t)</code></li><li><code>ssize_t recv_data(struct connection *, unsigned char *, size_t)</code></li></ul><p>他们都需要使用 <code>struct connection</code> 作为第一个参数，后面两个参数就是常规的读&#x2F;写 buffer 和读&#x2F;写字节数。</p><p>这个连接结构直接针对了前言中需改进列表内的第三条（明文消息和加密消息的抽象），他是客户端链接的抽象实现，并且提供了管理通信所需的4个基本回调函数：</p><ul><li>accept</li><li>send</li><li>recv</li><li>close</li></ul><p>这个改进允许我们基于选择的类型创建每条链接，不论是普通链接还是TLS链接都使用相同的函数收发数据。</p><p>结构定义如下：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>network.h</span></div><code class="language-c"><span class="token comment">// 链接抽象结构，向外提供统一接口，根据传输层加密与否设置正确的回调函数</span><span class="token comment">// 四个主要的回调函数表示了可以在链接上进行的四种操作：</span><span class="token comment">// - accept</span><span class="token comment">// - read</span><span class="token comment">// - write</span><span class="token comment">// - close</span><span class="token comment">// 同时维护了 ip:port 信息</span><span class="token keyword">struct</span> <span class="token class-name">connection</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> fd<span class="token punctuation">;</span>    SSL <span class="token operator">*</span>ssl<span class="token punctuation">;</span>    SSL_CTX <span class="token operator">*</span>ctx<span class="token punctuation">;</span>    <span class="token keyword">char</span> ip<span class="token punctuation">[</span>INET_ADDRSTRLEN <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>accept<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">connection</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ssize_t</span> <span class="token punctuation">(</span><span class="token operator">*</span>send<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">connection</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token class-name">size_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ssize_t</span> <span class="token punctuation">(</span><span class="token operator">*</span>recv<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">connection</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token class-name">size_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>close<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">connection</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>结构体中存储了 <code>SSL *</code> 和 <code>SSL_CTX *</code>，当我们使用普通链接时他们会为 <code>NULL</code>。</p><h1 id="编解码与辅助函数"><a href="#编解码与辅助函数" class="headerlink" title="编解码与辅助函数"></a>编解码与辅助函数</h1><p>另一个有益的提升是修正了之前错误的编码和解码函数（感谢<a href="https://beej.us/guide/bgnet/html/single/bgnet.html#serialization">beej networking guide</a>，这个教程真的很优秀）并且添加了一些工具函数用来处理整形和bytes的解码。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>pack.c</span></div><code class="language-c"><span class="token comment">// 整数解码</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">unpack_integer</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token keyword">char</span> size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> val <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> <span class="token char">'b'</span><span class="token operator">:</span>            val <span class="token operator">=</span> <span class="token operator">*</span><span class="token operator">*</span>buf<span class="token punctuation">;</span>            <span class="token operator">*</span>buf <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token char">'B'</span><span class="token operator">:</span>            val <span class="token operator">=</span> <span class="token operator">*</span><span class="token operator">*</span>buf<span class="token punctuation">;</span>            <span class="token operator">*</span>buf <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token char">'h'</span><span class="token operator">:</span>            val <span class="token operator">=</span> <span class="token function">unpacki16</span><span class="token punctuation">(</span><span class="token operator">*</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">*</span>buf <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token char">'H'</span><span class="token operator">:</span>            val <span class="token operator">=</span> <span class="token function">unpacku16</span><span class="token punctuation">(</span><span class="token operator">*</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">*</span>buf <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token char">'i'</span><span class="token operator">:</span>            val <span class="token operator">=</span> <span class="token function">unpacki32</span><span class="token punctuation">(</span><span class="token operator">*</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">*</span>buf <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token char">'I'</span><span class="token operator">:</span>            val <span class="token operator">=</span> <span class="token function">unpacku32</span><span class="token punctuation">(</span><span class="token operator">*</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">*</span>buf <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token char">'q'</span><span class="token operator">:</span>            val <span class="token operator">=</span> <span class="token function">unpacki64</span><span class="token punctuation">(</span><span class="token operator">*</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">*</span>buf <span class="token operator">+=</span> <span class="token number">8</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token char">'Q'</span><span class="token operator">:</span>            val <span class="token operator">=</span> <span class="token function">unpacku64</span><span class="token punctuation">(</span><span class="token operator">*</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">*</span>buf <span class="token operator">+=</span> <span class="token number">8</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> val<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">unpack_bytes</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>dest <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>    dest<span class="token punctuation">[</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>    <span class="token operator">*</span>buf <span class="token operator">+=</span> len<span class="token punctuation">;</span>    <span class="token keyword">return</span> dest<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="微型的事件循环：ev"><a href="#微型的事件循环：ev" class="headerlink" title="微型的事件循环：ev"></a>微型的事件循环：ev</h1><p>在单线程环境中抽象主机提供的多路复用API并不是一件困难的事，本质上就是提供一个数据结构，用来持有一组自定义事件。头文件里描述的很清楚，最重要的部分是我们对事件类型的枚举（<code>enum ev_type</code>），自定义事件（<code>struct ev</code>）和持有自定义事件的数组（<code>events_monitored</code>）。这些构成了我们的事件封装（<code>ev_ctx</code>）。</p><p><code>ev_ctx</code> 中使用不透明的 <code>void *</code> 指针可以让我们引用系统提供的任何底层 API，无论是 <code>EPOLL</code>、<code>SELECT</code> 还是 <code>KQUEUE</code>。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>ev.h</span></div><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/time.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">EV_OK</span>  <span class="token expression"><span class="token number">0</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">EV_ERR</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token comment">// 事件类型, 支持或运算</span><span class="token keyword">enum</span> <span class="token class-name">ev_type</span> <span class="token punctuation">&#123;</span>    EV_NONE       <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">,</span>    EV_READ       <span class="token operator">=</span> <span class="token number">0x01</span><span class="token punctuation">,</span>    EV_WRITE      <span class="token operator">=</span> <span class="token number">0x02</span><span class="token punctuation">,</span>    EV_DISCONNECT <span class="token operator">=</span> <span class="token number">0x04</span><span class="token punctuation">,</span>    EV_EVENTFD    <span class="token operator">=</span> <span class="token number">0x08</span><span class="token punctuation">,</span>    EV_TIMERFD    <span class="token operator">=</span> <span class="token number">0x10</span><span class="token punctuation">,</span>    EV_CLOSEFD    <span class="token operator">=</span> <span class="token number">0x20</span>    <span class="token comment">// 停止循环, 关闭服务</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">ev_ctx</span><span class="token punctuation">;</span><span class="token comment">// 自定义事件, 存储与事件上下文的数组中</span><span class="token comment">// 携带有客户端信息, 被触发时执行对应的回调函数</span><span class="token keyword">struct</span> <span class="token class-name">ev</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> fd<span class="token punctuation">;</span>    <span class="token keyword">int</span> mask<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token operator">*</span>rdata<span class="token punctuation">;</span> <span class="token comment">// 读取回调函数参数的不透明指针</span>    <span class="token keyword">void</span> <span class="token operator">*</span>wdata<span class="token punctuation">;</span> <span class="token comment">// 写入回调函数参数的不透明指针</span>    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>rcallback<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ev_ctx</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 读取回调函数</span>    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>wcallback<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ev_ctx</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 写入回调函数</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 事件循环上下文结构, 持有被监视的事件对象和指向后端事件引擎的指针</span><span class="token comment">// 当前我们仍然使用 epoll, 因为现在的线程模型与 select 默认的电平触发机制不是很适配</span><span class="token comment">// 对于单线程场景, 抽象select很容易</span><span class="token comment">// 现在由于 epoll 边缘触发 + 单次触发 机制，我们可以轻松的在多线程场景使用我们的事件循环</span><span class="token keyword">struct</span> <span class="token class-name">ev_ctx</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> events_nr<span class="token punctuation">;</span>    <span class="token keyword">int</span> maxfd<span class="token punctuation">;</span>                          <span class="token comment">// 最大监听fd数, events_monitored 的长度不得小于此数</span>    <span class="token keyword">int</span> stop<span class="token punctuation">;</span>    <span class="token keyword">int</span> maxevents<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> fired_events<span class="token punctuation">;</span>    <span class="token comment">// 被触发事件数</span>    <span class="token keyword">struct</span> <span class="token class-name">ev</span> <span class="token operator">*</span>events_monitored<span class="token punctuation">;</span>        <span class="token comment">// 监控事件列表</span>    <span class="token keyword">void</span> <span class="token operator">*</span>api<span class="token punctuation">;</span>                          <span class="token comment">// 指向基于平台的事件引擎的指针</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">ev_init</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ev_ctx</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">ev_destroy</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ev_ctx</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 轮询 ev_ctx 中的事件, 无限阻塞或超时, 当有事件需要处理时返回</span><span class="token keyword">int</span> <span class="token function">ev_poll</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ev_ctx</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token class-name">time_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 调用 ev_poll 再阻塞中轮询事件, 每轮中执行事件中对应的回调函数</span><span class="token keyword">int</span> <span class="token function">ev_run</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ev_ctx</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 触发停止事件</span><span class="token keyword">void</span> <span class="token function">ev_stop</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ev_ctx</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 向循环队列尾部添加 fd, 和 ev_fire_event 相同只是没有回调函数</span><span class="token comment">// 可以用来添加 socket 监听之类的简单描述符</span><span class="token keyword">int</span> <span class="token function">ev_watch_fd</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ev_ctx</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 在循环中删除 fd, 虽然 close 调用足以从事件引擎中删除 fd, 但是还是用此调用封装来确保所有相关事件都被清理并设置为 EV_NONE</span><span class="token keyword">int</span> <span class="token function">ev_del_fd</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ev_ctx</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 注册一个新事件, 在功能上他和 ev_fire_event 相同但是此函数用于注册一个还未加入事件监听的fd</span><span class="token comment">// 此函数可以被集成到 ev_fire_event 中, 但是我还是倾向于保持语义分离</span><span class="token keyword">int</span> <span class="token function">ev_register_event</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ev_ctx</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span>                      <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>callback<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ev_ctx</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 注册一个周期性事件</span><span class="token keyword">int</span> <span class="token function">ev_register_cron</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ev_ctx</span> <span class="token operator">*</span><span class="token punctuation">,</span>                     <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>callback<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ev_ctx</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                     <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">,</span>                     <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 为下一个循环周期的 FD 注册一个新事件</span><span class="token comment">// 和 ev_watch_fd相同, 但可以携带回调函数和参数</span><span class="token keyword">int</span> <span class="token function">ev_fire_event</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ev_ctx</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span>                  <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>callback<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ev_ctx</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>在服务器初始化时，<code>ev_ctx</code> 会被注册一些基本的周期性事件和服务端口的 <code>on_accpet</code> 事件。之后我们的程序就由事件循环不停驱动，比如当客户端链接建立后，我们会对输入的数据进行监听，触发 <code>read_callback</code>，收到完整的数据包并处理后，决定是否要发送回复。</p><figure><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">                           MAIN THREAD                            [EV_CTX]  ACCEPT_CALLBACK         READ_CALLBACK         WRITE_CALLBACK-------------------    ------------------    --------------------         |                     |                       |      ACCEPT                   |                       |         | ------------------> |                       |         |               READ AND DECODE               |         |                     |                       |         |                     |                       |         |                  PROCESS                    |         |                     |                       |         |                     |                       |         |                     | --------------------> |         |                     |                     WRITE      ACCEPT                   |                       |         | ------------------> | &lt;-------------------- |         |                     |                       |<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>这是一个连接客户端的生命周期，我们有一个 <code>accept</code> 回调函数，他将接入的链接放入事件循环中，并且开启读取监听：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>server.c</span></div><code class="language-c"><span class="token comment">// 处理输入的链接, 创建一个客户端对象并关联到fd</span><span class="token comment">// 设置为 EV_READ 事件并绑定 read_callback 用以处理输入的数据流</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">accept_callback</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ev_ctx</span> <span class="token operator">*</span>ctx<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> serverfd <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 接收一个新的连接, 将ip地址和fd配置给作为参数传入的conn结构</span>        <span class="token keyword">struct</span> <span class="token class-name">connection</span> conn<span class="token punctuation">;</span>        <span class="token function">connection_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>conn<span class="token punctuation">,</span> conf<span class="token operator">-></span>tls <span class="token operator">?</span> server<span class="token punctuation">.</span>ssl_ctx <span class="token operator">:</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">accept_connection</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>conn<span class="token punctuation">,</span> serverfd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">close_connection</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 创建一个客户端结构, 用来持有conn和ev_ctx</span>        <span class="token keyword">struct</span> <span class="token class-name">client</span> <span class="token operator">*</span>c <span class="token operator">=</span> <span class="token function">memorypool_alloc</span><span class="token punctuation">(</span>server<span class="token punctuation">.</span>pool<span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token operator">-></span>conn <span class="token operator">=</span> conn<span class="token punctuation">;</span>        <span class="token function">client_init</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token operator">-></span>ctx <span class="token operator">=</span> ctx<span class="token punctuation">;</span>        <span class="token comment">// 客户端添加到读取循环中</span>        <span class="token function">ev_register_event</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> fd<span class="token punctuation">,</span> EV_READ<span class="token punctuation">,</span> read_callback<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 记录</span>        info<span class="token punctuation">.</span>nclients<span class="token operator">++</span><span class="token punctuation">;</span>        info<span class="token punctuation">.</span>nconnections<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token function">log_info</span><span class="token punctuation">(</span><span class="token string">"[%p] Connection from %s"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> conn<span class="token punctuation">.</span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 读取数据包的回调, 每当客户端发来数据时由事件循环触发此函数</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">read_callback</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ev_ctx</span> <span class="token operator">*</span>ctx<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 客户端传入自身作为回调参数</span>    <span class="token keyword">struct</span> <span class="token class-name">client</span> <span class="token operator">*</span>c <span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token comment">// 状态机校验, 也意味着只要是 WAITING_* 状态都需要继续读取数据</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">-></span>status <span class="token operator">==</span> SENDING_DATA<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token comment">// 从客户端获取数据, 按照协议可了解数据是否已经读取完全</span>    <span class="token keyword">int</span> rc <span class="token operator">=</span> <span class="token function">read_data</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>rc<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>            <span class="token comment">// 记录活跃时间</span>            c<span class="token operator">-></span>last_seen <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 置为 SENDING 状态, 后续根据处理器的处理决定是否要发送数据</span>            c<span class="token operator">-></span>status <span class="token operator">=</span> SENDING_DATA<span class="token punctuation">;</span>            <span class="token comment">// 后续解码 + 处理器处理</span>            <span class="token function">process_message</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token operator">-</span>ERRCLIENTDC<span class="token operator">:</span>        <span class="token keyword">case</span> <span class="token operator">-</span>ERRPACKETERR<span class="token operator">:</span>        <span class="token keyword">case</span> <span class="token operator">-</span>ERRMAXREQSIZE<span class="token operator">:</span>            <span class="token comment">// 客户端断开或数据错误</span>            <span class="token comment">// 断开连接、清理资源</span>            <span class="token function">log_error</span><span class="token punctuation">(</span><span class="token string">"Closing connection with %s (%s): %s"</span><span class="token punctuation">,</span>                      c<span class="token operator">-></span>client_id<span class="token punctuation">,</span> c<span class="token operator">-></span>conn<span class="token punctuation">.</span>ip<span class="token punctuation">,</span> <span class="token function">solerr</span><span class="token punctuation">(</span>rc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 如果有遗嘱则发布遗嘱</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">-></span>has_lwt <span class="token operator">==</span> true<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">char</span> <span class="token operator">*</span>tname <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> c<span class="token operator">-></span>session<span class="token operator">-></span>lwt_msg<span class="token punctuation">.</span>publish<span class="token punctuation">.</span>topic<span class="token punctuation">;</span>                <span class="token keyword">struct</span> <span class="token class-name">topic</span> <span class="token operator">*</span>t <span class="token operator">=</span> <span class="token function">topic_get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>server<span class="token punctuation">,</span> tname<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">publish_message</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token operator">-></span>session<span class="token operator">-></span>lwt_msg<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 清理资源</span>            <span class="token function">ev_del_fd</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> c<span class="token operator">-></span>conn<span class="token punctuation">.</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 从主题中删除订阅</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">-></span>session <span class="token operator">&amp;&amp;</span> <span class="token function">list_size</span><span class="token punctuation">(</span>c<span class="token operator">-></span>session<span class="token operator">-></span>subscriptions<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">struct</span> <span class="token class-name">list</span> <span class="token operator">*</span>subs <span class="token operator">=</span> c<span class="token operator">-></span>session<span class="token operator">-></span>subscriptions<span class="token punctuation">;</span>                <span class="token function">list_foreach</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> subs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token function">log_debug</span><span class="token punctuation">(</span><span class="token string">"Deleting %s from topic %s"</span><span class="token punctuation">,</span>                              c<span class="token operator">-></span>client_id<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">topic</span> <span class="token operator">*</span><span class="token punctuation">)</span> item<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token operator">-></span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">topic_del_subscriber</span><span class="token punctuation">(</span>item<span class="token operator">-></span>data<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token function">client_deactivate</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            info<span class="token punctuation">.</span>nclients<span class="token operator">--</span><span class="token punctuation">;</span>            info<span class="token punctuation">.</span>nconnections<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token operator">-</span>ERREAGAIN<span class="token operator">:</span>            <span class="token function">ev_fire_event</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> c<span class="token operator">-></span>conn<span class="token punctuation">.</span>fd<span class="token punctuation">,</span> EV_READ<span class="token punctuation">,</span> read_callback<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 此函数仅当客户端已经发送符合MQTT协议长度的完整字节流后才被调用</span><span class="token comment">// 此函数使用事件循环基于收到的数据包类型做出反应, 在传入处理器前进行校验。</span><span class="token comment">// 此函数根据处理器的输出结果, 在事件队列中加入回复事件, 或重置客户端继续监听输入事件</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">process_message</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ev_ctx</span> <span class="token operator">*</span>ctx<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">client</span> <span class="token operator">*</span>c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// io.data 是 mqtt_packet 类型</span>    <span class="token keyword">struct</span> <span class="token class-name">io_event</span> io <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span>client <span class="token operator">=</span> c <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// 将收到的数据解码为mqtt包</span>    <span class="token function">mqtt_unpack</span><span class="token punctuation">(</span>c<span class="token operator">-></span>rbuf <span class="token operator">+</span> c<span class="token operator">-></span>rpos<span class="token punctuation">,</span> <span class="token operator">&amp;</span>io<span class="token punctuation">.</span>data<span class="token punctuation">,</span> <span class="token operator">*</span>c<span class="token operator">-></span>rbuf<span class="token punctuation">,</span> c<span class="token operator">-></span>read <span class="token operator">-</span> c<span class="token operator">-></span>rpos<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 重置读取标识</span>    c<span class="token operator">-></span>toread <span class="token operator">=</span> c<span class="token operator">-></span>read <span class="token operator">=</span> c<span class="token operator">-></span>rpos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 使用对应的处理器处理</span>    c<span class="token operator">-></span>rc <span class="token operator">=</span> <span class="token function">handle_command</span><span class="token punctuation">(</span>io<span class="token punctuation">.</span>data<span class="token punctuation">.</span>header<span class="token punctuation">.</span>bits<span class="token punctuation">.</span>type<span class="token punctuation">,</span> <span class="token operator">&amp;</span>io<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>c<span class="token operator">-></span>rc<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 回复处理</span>        <span class="token keyword">case</span> REPLY<span class="token operator">:</span>        <span class="token keyword">case</span> MQTT_NOT_AUTHORIZED<span class="token operator">:</span>        <span class="token keyword">case</span> MQTT_BAD_USERNAME_OR_PASSWORD<span class="token operator">:</span>            <span class="token comment">// 向客户端发送数据</span>            <span class="token function">enqueue_event_write</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 释放资源</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>io<span class="token punctuation">.</span>data<span class="token punctuation">.</span>header<span class="token punctuation">.</span>bits<span class="token punctuation">.</span>type <span class="token operator">!=</span> PUBLISH<span class="token punctuation">)</span>                <span class="token function">mqtt_packet_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>io<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token comment">// 断链处理</span>        <span class="token keyword">case</span> <span class="token operator">-</span>ERRCLIENTDC<span class="token operator">:</span>            <span class="token function">ev_del_fd</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> c<span class="token operator">-></span>conn<span class="token punctuation">.</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">client_deactivate</span><span class="token punctuation">(</span>io<span class="token punctuation">.</span>client<span class="token punctuation">)</span><span class="token punctuation">;</span>            info<span class="token punctuation">.</span>nclients<span class="token operator">--</span><span class="token punctuation">;</span>            info<span class="token punctuation">.</span>nconnections<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token operator">-</span>ERRNOMEM<span class="token operator">:</span>            <span class="token function">log_error</span><span class="token punctuation">(</span><span class="token function">solerr</span><span class="token punctuation">(</span>c<span class="token operator">-></span>rc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            c<span class="token operator">-></span>status <span class="token operator">=</span> WAITING_HEADER<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>io<span class="token punctuation">.</span>data<span class="token punctuation">.</span>header<span class="token punctuation">.</span>bits<span class="token punctuation">.</span>type <span class="token operator">!=</span> PUBLISH<span class="token punctuation">)</span>                <span class="token function">mqtt_packet_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>io<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 写入事件触发的回调函数, 阻塞可重发, 发完后重置状态机, 并加入读取事件监听</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">write_callback</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ev_ctx</span> <span class="token operator">*</span>ctx<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">client</span> <span class="token operator">*</span>client <span class="token operator">=</span> arg<span class="token punctuation">;</span>    <span class="token comment">// 发送数据</span>    <span class="token keyword">int</span> err <span class="token operator">=</span> <span class="token function">write_data</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span> <span class="token comment">// OK</span>            <span class="token comment">// 开启读取监听</span>            client<span class="token operator">-></span>status <span class="token operator">=</span> WAITING_HEADER<span class="token punctuation">;</span>            <span class="token function">ev_fire_event</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> client<span class="token operator">-></span>conn<span class="token punctuation">.</span>fd<span class="token punctuation">,</span> EV_READ<span class="token punctuation">,</span> read_callback<span class="token punctuation">,</span> client<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token comment">// 阻塞重发</span>        <span class="token keyword">case</span> <span class="token operator">-</span>ERREAGAIN<span class="token operator">:</span>            <span class="token function">enqueue_event_write</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            <span class="token function">log_info</span><span class="token punctuation">(</span><span class="token string">"Closing connection with %s (%s): %s %i"</span><span class="token punctuation">,</span>                     client<span class="token operator">-></span>client_id<span class="token punctuation">,</span> client<span class="token operator">-></span>conn<span class="token punctuation">.</span>ip<span class="token punctuation">,</span>                     <span class="token function">solerr</span><span class="token punctuation">(</span>client<span class="token operator">-></span>rc<span class="token punctuation">)</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">ev_del_fd</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> client<span class="token operator">-></span>conn<span class="token punctuation">.</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">client_deactivate</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Update stats</span>            info<span class="token punctuation">.</span>nclients<span class="token operator">--</span><span class="token punctuation">;</span>            info<span class="token punctuation">.</span>nconnections<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>当然，启动的服务器必须进行阻塞调用以启动事件循环，我们也需要一个停止机制。得益于 ev_stop API，添加一个额外的事件例程来在我们想要停止运行的循环时调用变得非常简单。</p><p>现在我们的服务器会使用一个阻塞的循环来提供服务，但是我们也需要一个停止机制。感谢 <code>ev_stop</code> 接口，他这让我们可以简单的停止循环。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>server.c</span></div><code class="language-c"><span class="token comment">// 循环停止事件的回调函数, 由 EV_CLOSEFD 触发</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">stop_handler</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ev_ctx</span> <span class="token operator">*</span>ctx<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> arg<span class="token punctuation">;</span>    <span class="token function">ev_stop</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 事件循环启动函数, 是对 epoll 或者其他多路复用机制的抽象</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">eventloop_start</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> sfd <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">ev_ctx</span> ctx<span class="token punctuation">;</span>    <span class="token function">ev_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ctx<span class="token punctuation">,</span> EVENTLOOP_MAX_EVENTS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 注册停止事件</span>    <span class="token function">ev_register_event</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ctx<span class="token punctuation">,</span> conf<span class="token operator">-></span>run<span class="token punctuation">,</span> EV_CLOSEFD<span class="token operator">|</span>EV_READ<span class="token punctuation">,</span> stop_handler<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 使用网络服务端口注册 accept_callback</span>    <span class="token function">ev_register_event</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ctx<span class="token punctuation">,</span> sfd<span class="token punctuation">,</span> EV_READ<span class="token punctuation">,</span> accept_callback<span class="token punctuation">,</span> <span class="token operator">&amp;</span>sfd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 注册周期性事件</span>    <span class="token function">ev_register_cron</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ctx<span class="token punctuation">,</span> publish_stats<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> conf<span class="token operator">-></span>stats_pub_interval<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ev_register_cron</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ctx<span class="token punctuation">,</span> inflight_msg_check<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">9e8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 开始循环, 阻塞线程</span>    <span class="token function">ev_run</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ev_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 添加一个写入事件监听, 用来向客户端发送数据</span><span class="token keyword">void</span> <span class="token function">enqueue_event_write</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">client</span> <span class="token operator">*</span>c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">ev_fire_event</span><span class="token punctuation">(</span>c<span class="token operator">-></span>ctx<span class="token punctuation">,</span> c<span class="token operator">-></span>conn<span class="token punctuation">.</span>fd<span class="token punctuation">,</span> EV_WRITE<span class="token punctuation">,</span> write_callback<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>最终，我们的 <code>start_server</code> 函数，作为程序的入口，他会监听一个端口，并打开事件循环来提供服务。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>server.c</span></div><code class="language-c"><span class="token comment">// 服务入口, 传入地址和端口开始工作</span><span class="token keyword">int</span> <span class="token function">start_server</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>addr<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>port<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Sol 全局对象初始化</span>    <span class="token function">trie_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>server<span class="token punctuation">.</span>topics<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    server<span class="token punctuation">.</span>authentications <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    server<span class="token punctuation">.</span>pool <span class="token operator">=</span> <span class="token function">memorypool_new</span><span class="token punctuation">(</span>BASE_CLIENTS_NUM<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">client</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    server<span class="token punctuation">.</span>clients_map <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    server<span class="token punctuation">.</span>sessions <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    server<span class="token punctuation">.</span>wildcards <span class="token operator">=</span> <span class="token function">list_new</span><span class="token punctuation">(</span>wildcard_destructor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>conf<span class="token operator">-></span>allow_anonymous <span class="token operator">==</span> false<span class="token punctuation">)</span>        <span class="token function">config_read_passwd_file</span><span class="token punctuation">(</span>conf<span class="token operator">-></span>password_file<span class="token punctuation">,</span> <span class="token operator">&amp;</span>server<span class="token punctuation">.</span>authentications<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 服务器状态主题</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> SYS_TOPICS<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">topic_put</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>server<span class="token punctuation">,</span> <span class="token function">topic_new</span><span class="token punctuation">(</span><span class="token function">xstrdup</span><span class="token punctuation">(</span>sys_topics<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 监听网络端口</span>    <span class="token keyword">int</span> sfd <span class="token operator">=</span> <span class="token function">make_listen</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> port<span class="token punctuation">,</span> conf<span class="token operator">-></span>socket_family<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 初始化SSL</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>conf<span class="token operator">-></span>tls <span class="token operator">==</span> true<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">openssl_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        server<span class="token punctuation">.</span>ssl_ctx <span class="token operator">=</span> <span class="token function">create_ssl_context</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">load_certificates</span><span class="token punctuation">(</span>server<span class="token punctuation">.</span>ssl_ctx<span class="token punctuation">,</span> conf<span class="token operator">-></span>cafile<span class="token punctuation">,</span> conf<span class="token operator">-></span>certfile<span class="token punctuation">,</span> conf<span class="token operator">-></span>keyfile<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">log_info</span><span class="token punctuation">(</span><span class="token string">"Server start"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    info<span class="token punctuation">.</span>start_time <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 开启事件循环</span>    <span class="token function">eventloop_start</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sfd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span>sfd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">AUTH_DESTROY</span><span class="token punctuation">(</span>server<span class="token punctuation">.</span>authentications<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">list_destroy</span><span class="token punctuation">(</span>server<span class="token punctuation">.</span>wildcards<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 释放SSL资源</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>conf<span class="token operator">-></span>tls <span class="token operator">==</span> true<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">SSL_CTX_free</span><span class="token punctuation">(</span>server<span class="token punctuation">.</span>ssl_ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">openssl_cleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">log_info</span><span class="token punctuation">(</span><span class="token string">"Sol v%s exiting"</span><span class="token punctuation">,</span> VERSION<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>正如你看到的，这里有一个用于创建客户端池的 <code>memorypool_new</code>，我们预先分配了一定数量的客户端，并且在断开链接时回收他们。只要我们的客户端内容是懒加载的，特别是他们的读写buffer（可能是 MB 级别）是懒加载的，那么我们这个客户端池就相当划算。</p><p>当然，这只是整个过程的一小部分，但最终我做出了一个相当不错的原型。下一步将是进行一些压力测试，看看它与 Mosquitto 或 Mosca 这些久经考验且无可争议的优秀软件相比如何。我们仍然缺少许多功能，例如用于存储会话的持久层，但先贼发布&#x2F;订阅部分应该是可测试的。希望这个教程可以作为更整洁和精心设计的项目的起点。再见！</p>]]></content>
    
    
    <categories>
      
      <category>MQTT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络编程</tag>
      
      <tag>翻译</tag>
      
      <tag>物联网</tag>
      
      <tag>C</tag>
      
      <tag>MQTT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023年度总结</title>
    <link href="/2024/01/01/review-2023.html"/>
    <url>/2024/01/01/review-2023.html</url>
    
    <content type="html"><![CDATA[<h1 id="2023完成清单"><a href="#2023完成清单" class="headerlink" title="2023完成清单"></a>2023完成清单</h1><ul><li>开通博客</li><li>搭建游戏服务器，服务了200名玩家</li><li>在工作之余学习了一些优秀项目</li></ul><h1 id="2024计划清单"><a href="#2024计划清单" class="headerlink" title="2024计划清单"></a>2024计划清单</h1><ul><li>学习更多的项目</li><li>翻译MQTT5.0协议文档</li><li>启动一个开源项目</li><li>每月更新博客</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>[翻译]Sol - 从零开始的MQTT broker - 第六部分：处理器</title>
    <link href="/2023/12/29/translate-sol-6.html"/>
    <url>/2023/12/29/translate-sol-6.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>原文 <a href="https://codepr.github.io/posts/sol-mqtt-broker-p6/">Sol - An MQTT broker from scratch. Part 6 - Handlers</a></p></blockquote><span id="more"></span><p>这一部分我们会重点关注 <strong>处理器（handler）</strong> 的实现，每种处理器用来处理一种对应的MQTT包。就像我们在第四部分中已经描述的，我们把处理器放在一个固定长度的数组里，每个处理器的索引恰好是包的MQTT类型。</p><h1 id="业务封装"><a href="#业务封装" class="headerlink" title="业务封装"></a>业务封装</h1><p>在我们开始主要工作之前，我们先补充一些前几章缺失的业务代码：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>src/core.h</span></div><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"trie.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"list.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"hashtable.h"</span></span><span class="token keyword">struct</span> <span class="token class-name">topic</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span>    List <span class="token operator">*</span>subscribers<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// sol的主体结构, 服务器运行时会产生一个全局实例</span><span class="token comment">// 包括了所有连接的客户端、闭包和主题树</span><span class="token keyword">struct</span> <span class="token class-name">sol</span> <span class="token punctuation">&#123;</span>    HashTable <span class="token operator">*</span>clients<span class="token punctuation">;</span>    HashTable <span class="token operator">*</span>closures<span class="token punctuation">;</span>    Trie topics<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 在客户端中使用的session, 保存该客户端订阅的所有主题</span><span class="token keyword">struct</span> <span class="token class-name">session</span> <span class="token punctuation">&#123;</span>    List <span class="token operator">*</span>subscriptions<span class="token punctuation">;</span>    <span class="token comment">// TODO add pending confirmed messages</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 客户端包装</span><span class="token keyword">struct</span> <span class="token class-name">sol_client</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>client_id<span class="token punctuation">;</span>    <span class="token keyword">int</span> fd<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">session</span> session<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 将客户端包装成订阅者, 之后由主题保存订阅者列表</span><span class="token keyword">struct</span> <span class="token class-name">subscriber</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">unsigned</span> qos<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">sol_client</span> <span class="token operator">*</span>client<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 主题创建、订阅发布的一系列方法</span><span class="token keyword">struct</span> <span class="token class-name">topic</span> <span class="token operator">*</span><span class="token function">topic_create</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">topic_init</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">topic</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">topic_add_subscriber</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">topic</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">sol_client</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span><span class="token punctuation">,</span> bool<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">topic_del_subscriber</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">topic</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">sol_client</span> <span class="token operator">*</span><span class="token punctuation">,</span> bool<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">sol_topic_put</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sol</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">topic</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">sol_topic_del</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sol</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 通过主题名称获得主题</span><span class="token keyword">struct</span> <span class="token class-name">topic</span> <span class="token operator">*</span><span class="token function">sol_topic_get</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sol</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>这部分主要实现了客户端和服务端交互的各种抽象：</p><ul><li>客户端（client）结构体，用来表示已经建立连接的客户端</li><li>主题（topic）结构体</li><li>订阅者（subscriber）结构体</li><li>会话结（session）构体，表示客户端持有的会话，仅当 <code>clean session</code> 选项为 <code>false</code> 时生效</li><li>sol结构体，全局运行实例，用来持有上述的所有内容</li><li>一些方便的辅助函数</li></ul><p>这里是上述定义的实现：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>src/core.c</span></div><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"core.h"</span></span><span class="token comment">// 传入两个订阅者, 比较其客户端id</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">compare_cid</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>c1<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>c2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">subscriber</span> <span class="token operator">*</span><span class="token punctuation">)</span> c1<span class="token punctuation">)</span><span class="token operator">-></span>client<span class="token operator">-></span>client_id<span class="token punctuation">,</span>                  <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">subscriber</span> <span class="token operator">*</span><span class="token punctuation">)</span> c2<span class="token punctuation">)</span><span class="token operator">-></span>client<span class="token operator">-></span>client_id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 创建一个topic对象</span><span class="token keyword">struct</span> <span class="token class-name">topic</span> <span class="token operator">*</span><span class="token function">topic_create</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">topic</span> <span class="token operator">*</span>t <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">topic_init</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> t<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">topic_init</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">topic</span> <span class="token operator">*</span>t<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    t<span class="token operator">-></span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    t<span class="token operator">-></span>subscribers <span class="token operator">=</span> <span class="token function">list_create</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 向主题对象内添加一个订阅者</span><span class="token keyword">void</span> <span class="token function">topic_add_subscriber</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">topic</span> <span class="token operator">*</span>t<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">sol_client</span> <span class="token operator">*</span>client<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> qos<span class="token punctuation">,</span> bool cleansession<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">subscriber</span> <span class="token operator">*</span>sub <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>sub<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sub<span class="token operator">-></span>client <span class="token operator">=</span> client<span class="token punctuation">;</span>    sub<span class="token operator">-></span>qos <span class="token operator">=</span> qos<span class="token punctuation">;</span>    t<span class="token operator">-></span>subscribers <span class="token operator">=</span> <span class="token function">list_push</span><span class="token punctuation">(</span>t<span class="token operator">-></span>subscribers<span class="token punctuation">,</span> sub<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 如果cleansession置为false，必须将此订阅加入会话</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cleansession<span class="token punctuation">)</span>        client<span class="token operator">-></span>session<span class="token punctuation">.</span>subscriptions <span class="token operator">=</span> <span class="token function">list_push</span><span class="token punctuation">(</span>client<span class="token operator">-></span>session<span class="token punctuation">.</span>subscriptions<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 主题取消客户端订阅</span><span class="token keyword">void</span> <span class="token function">topic_del_subscriber</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">topic</span> <span class="token operator">*</span>t<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">sol_client</span> <span class="token operator">*</span>client<span class="token punctuation">,</span> bool cleansession<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">list_remove_node</span><span class="token punctuation">(</span>t<span class="token operator">-></span>subscribers<span class="token punctuation">,</span> client<span class="token punctuation">,</span> compare_cid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// TODO remomve in case of cleansession == false</span><span class="token punctuation">&#125;</span><span class="token comment">// 向sol设置主题</span><span class="token keyword">void</span> <span class="token function">sol_topic_put</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sol</span> <span class="token operator">*</span>sol<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">topic</span> <span class="token operator">*</span>t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">trie_insert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sol<span class="token operator">-></span>topics<span class="token punctuation">,</span> t<span class="token operator">-></span>name<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 向sol删除主题</span><span class="token keyword">void</span> <span class="token function">sol_topic_del</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sol</span> <span class="token operator">*</span>sol<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">trie_delete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sol<span class="token operator">-></span>topics<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 查询获得一个主题</span><span class="token keyword">struct</span> <span class="token class-name">topic</span> <span class="token operator">*</span><span class="token function">sol_topic_get</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sol</span> <span class="token operator">*</span>sol<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">topic</span> <span class="token operator">*</span>ret_topic<span class="token punctuation">;</span>    <span class="token function">trie_find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sol<span class="token operator">-></span>topics<span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>ret_topic<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ret_topic<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="处理器实现"><a href="#处理器实现" class="headerlink" title="处理器实现"></a>处理器实现</h1><p><code>处理器（Handlers）</code> 是一系列会在 <code>on_read</code> 中被执行的回调函数，就像他们的名称暗示的一样，他们负责处理客户端输入的数据，之后他们选择性的创建或不创建一个回复数据，并且返回一个指示下一步应该如何处理的返回值。返回值可以是：</p><ul><li><code>REARM_W</code>，表示将下一个触发函数设置为 <code>on_write</code>，并提供需要发送到客户端的数据</li><li><code>REARM_R</code>，表示没有需要回复客户端的数据，可以继续将触发函数重置为 <code>on_read</code>，继续等待客户端数据</li><li><code>-REARM_W</code>，这个状态码没有被协议定义，我们在这里用来表示客户端断开链接或者故障发生</li></ul><h2 id="CONNECT-处理器"><a href="#CONNECT-处理器" class="headerlink" title="CONNECT 处理器"></a>CONNECT 处理器</h2><p>按照顺序，我们先来实现 <code>connect_handler</code>，顾名思义，他用来处理客户端完成TCP链接之后发来的第一个数据包，也就是 <code>CONNECT</code> 包。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>src/server.c</span></div><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">connect_handler</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">closure</span> <span class="token operator">*</span>cb<span class="token punctuation">,</span> <span class="token keyword">union</span> mqtt_packet <span class="token operator">*</span>pkt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 当一个已存在的客户端又发送了 CONNECT 包, 被视为违背协议</span>    <span class="token comment">// 因此断开链接</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hashtable_exists</span><span class="token punctuation">(</span>sol<span class="token punctuation">.</span>clients<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> pkt<span class="token operator">-></span>connect<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>client_id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">sol_info</span><span class="token punctuation">(</span><span class="token string">"Received double CONNECT from %s, disconnecting client"</span><span class="token punctuation">,</span>                 pkt<span class="token operator">-></span>connect<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>client_id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 关闭链接, 释放资源</span>        <span class="token function">close</span><span class="token punctuation">(</span>cb<span class="token operator">-></span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 哈希表删除时的回调会负责销毁 client 或者 cb</span>        <span class="token function">hashtable_del</span><span class="token punctuation">(</span>sol<span class="token punctuation">.</span>clients<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> pkt<span class="token operator">-></span>connect<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>client_id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">hashtable_del</span><span class="token punctuation">(</span>sol<span class="token punctuation">.</span>closures<span class="token punctuation">,</span> cb<span class="token operator">-></span>closure_id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 更新状态</span>        info<span class="token punctuation">.</span>nclients<span class="token operator">--</span><span class="token punctuation">;</span>        info<span class="token punctuation">.</span>nconnections<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span>REARM_W<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">sol_info</span><span class="token punctuation">(</span><span class="token string">"New client connected as %s (c%i, k%u)"</span><span class="token punctuation">,</span>             pkt<span class="token operator">-></span>connect<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>client_id<span class="token punctuation">,</span>             pkt<span class="token operator">-></span>connect<span class="token punctuation">.</span>bits<span class="token punctuation">.</span>clean_session<span class="token punctuation">,</span>             pkt<span class="token operator">-></span>connect<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>keepalive<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 添加新链接</span>    <span class="token keyword">struct</span> <span class="token class-name">sol_client</span> <span class="token operator">*</span>new_client <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>new_client<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    new_client<span class="token operator">-></span>fd <span class="token operator">=</span> cb<span class="token operator">-></span>fd<span class="token punctuation">;</span>    <span class="token comment">// 由客户端保证cid的唯一性, 比如可以用mac地址</span>    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>cid <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> pkt<span class="token operator">-></span>connect<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>client_id<span class="token punctuation">;</span>    new_client<span class="token operator">-></span>client_id <span class="token operator">=</span> <span class="token function">strdup</span><span class="token punctuation">(</span>cid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">hashtable_put</span><span class="token punctuation">(</span>sol<span class="token punctuation">.</span>clients<span class="token punctuation">,</span> cid<span class="token punctuation">,</span> new_client<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 将 clinet 绑定到闭包</span>    cb<span class="token operator">-></span>obj <span class="token operator">=</span> new_client<span class="token punctuation">;</span>    <span class="token comment">// 使用 CONNACK回复</span>    <span class="token keyword">union</span> mqtt_packet <span class="token operator">*</span>response <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 高位赋值</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> byte <span class="token operator">=</span> CONNACK_BYTE<span class="token punctuation">;</span>    <span class="token comment">// clean_session == false 表示此链接支持保存 session</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pkt<span class="token operator">-></span>connect<span class="token punctuation">.</span>bits<span class="token punctuation">.</span>clean_session <span class="token operator">==</span> false<span class="token punctuation">)</span>        <span class="token comment">// 所以需要在会话中初始化订阅列表</span>        new_client<span class="token operator">-></span>session<span class="token punctuation">.</span>subscriptions <span class="token operator">=</span> <span class="token function">list_create</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// TODO 处理确实存在session的情况</span>    <span class="token comment">// 这里暂时是简单的返回 session 不存在</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> session_present <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> connect_flags <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">|</span> <span class="token punctuation">(</span>session_present <span class="token operator">&amp;</span> <span class="token number">0x1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> rc <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// 返回 0 表示接收链接</span>    <span class="token comment">// 完成组包</span>    response<span class="token operator">-></span>connack <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">mqtt_packet_connack</span><span class="token punctuation">(</span>byte<span class="token punctuation">,</span> connect_flags<span class="token punctuation">,</span> rc<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 包编码成数据流</span>    cb<span class="token operator">-></span>payload <span class="token operator">=</span> <span class="token function">bytestring_create</span><span class="token punctuation">(</span>MQTT_ACK_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">pack_mqtt_packet</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> CONNACK<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>cb<span class="token operator">-></span>payload<span class="token operator">-></span>data<span class="token punctuation">,</span> p<span class="token punctuation">,</span> MQTT_ACK_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sol_debug</span><span class="token punctuation">(</span><span class="token string">"Sending CONNACK to %s (%u, %u)"</span><span class="token punctuation">,</span>              pkt<span class="token operator">-></span>connect<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>client_id<span class="token punctuation">,</span>              session_present<span class="token punctuation">,</span> rc<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 标记之后发送</span>    <span class="token keyword">return</span> REARM_W<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>我们严格按照协议规范实现了处理器行为，除了 <strong>clean session</strong> 标识的处理，对于有会话的客户端该如何重连这件事我们暂时忽略了。如果一个客户端传入了两次 CONNECT，按照协议规范我们会断开他的链接。正常情况下我们会记录客户端，制作一个 CONNACK 数据流，并且返回 <code>REARM_W</code>，让 <code>on_write</code> 可以把我们的数据流发送回客户端。</p><h2 id="DISCONNECT-处理器"><a href="#DISCONNECT-处理器" class="headerlink" title="DISCONNECT 处理器"></a>DISCONNECT 处理器</h2><p>下一个包，<code>DISCONNECT</code>：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>src/server.c</span></div><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">disconnect_handler</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">closure</span> <span class="token operator">*</span>cb<span class="token punctuation">,</span> <span class="token keyword">union</span> mqtt_packet <span class="token operator">*</span>pkt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 获得客户端</span>    <span class="token keyword">struct</span> <span class="token class-name">sol_client</span> <span class="token operator">*</span>c <span class="token operator">=</span> cb<span class="token operator">-></span>obj<span class="token punctuation">;</span>    <span class="token comment">// 执行删除动作</span>    <span class="token function">sol_debug</span><span class="token punctuation">(</span><span class="token string">"Received DISCONNECT from %s"</span><span class="token punctuation">,</span> c<span class="token operator">-></span>client_id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span>c<span class="token operator">-></span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">hashtable_del</span><span class="token punctuation">(</span>sol<span class="token punctuation">.</span>clients<span class="token punctuation">,</span> c<span class="token operator">-></span>client_id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">hashtable_del</span><span class="token punctuation">(</span>sol<span class="token punctuation">.</span>closures<span class="token punctuation">,</span> cb<span class="token operator">-></span>closure_id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 跟新状态</span>    info<span class="token punctuation">.</span>nclients<span class="token operator">--</span><span class="token punctuation">;</span>    info<span class="token punctuation">.</span>nconnections<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token comment">// TODO 在该客户端订阅的所有主题中删除对其的引用</span>    <span class="token keyword">return</span> <span class="token operator">-</span>REARM_W<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>我们做了最简单的处理：日志记录、关闭 fd、从哈希表中删除、更新信息，然后返回一个负值。</p><h2 id="SUBSCRIBE-UNSUBSCRIBE-处理器"><a href="#SUBSCRIBE-UNSUBSCRIBE-处理器" class="headerlink" title="SUBSCRIBE UNSUBSCRIBE 处理器"></a>SUBSCRIBE UNSUBSCRIBE 处理器</h2><p><code>SUBSCRIBE</code> 的处理器则是一个更加有意思的操作，在这里我们需要用到我们的 <strong>特里树</strong>，大概流程如下：</p><ul><li>迭代传入的主题元组（包括 tpoic，QoS），对每一个主题进行如下操作：<ul><li>如果主题不存在，我们创建该主题</li><li>将客户端加入该主题的订阅者列表</li><li>如果主题以 <code>#</code> 结尾，我们需要让客户端订阅该主题以及该主题所有的下级节点，由于特里树的数据结构设计，这个操作可以轻松的递归处理</li><li>如果 <code>clean_session</code> 标识的值为 <code>false</code>，我们需要给客户端添加一个会话，这里我们还没有完全实现</li></ul></li><li>使用 <code>SUBACK</code> 回应</li></ul><p>在 <code>UNSUBSCRIBE</code> 中也没有什么意外，只要在主题中删除客户端，然后使用 <code>UNSUBACK</code> 回应即可。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>src/server.c</span></div><code class="language-c"><span class="token comment">// 用递归方式来订阅一个节点所有子节点的辅助函数</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">recursive_subscription</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">trie_node</span> <span class="token operator">*</span>node<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node <span class="token operator">||</span> <span class="token operator">!</span>node<span class="token operator">-></span>data<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">list_node</span> <span class="token operator">*</span>child <span class="token operator">=</span> node<span class="token operator">-></span>children<span class="token operator">-></span>head<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> child<span class="token punctuation">;</span> child <span class="token operator">=</span> child<span class="token operator">-></span>next<span class="token punctuation">)</span>        <span class="token function">recursive_subscription</span><span class="token punctuation">(</span>child<span class="token operator">-></span>data<span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">topic</span> <span class="token operator">*</span>t <span class="token operator">=</span> node<span class="token operator">-></span>data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">subscriber</span> <span class="token operator">*</span>s <span class="token operator">=</span> arg<span class="token punctuation">;</span>    t<span class="token operator">-></span>subscribers <span class="token operator">=</span> <span class="token function">list_push</span><span class="token punctuation">(</span>t<span class="token operator">-></span>subscribers<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// SUBSCRIBE 处理器</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">subscribe_handler</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">closure</span> <span class="token operator">*</span>cb<span class="token punctuation">,</span> <span class="token keyword">union</span> mqtt_packet <span class="token operator">*</span>pkt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">sol_client</span> <span class="token operator">*</span>c <span class="token operator">=</span> cb<span class="token operator">-></span>obj<span class="token punctuation">;</span>    bool wildcard <span class="token operator">=</span> false<span class="token punctuation">;</span>          <span class="token comment">// 标记是否通配</span>    bool alloced <span class="token operator">=</span> false<span class="token punctuation">;</span>           <span class="token comment">// 表示有新 malloc 的string, 用完需要释放</span>    <span class="token comment">// 在 SUBACK 中使用和 SUB 同样的主题顺序回复的 QoS List</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> rcs<span class="token punctuation">[</span>pkt<span class="token operator">-></span>subscribe<span class="token punctuation">.</span>tuples_len<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// SUBSCRIBE 包含了主题和QoS的列表, 此处循环处理</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pkt<span class="token operator">-></span>subscribe<span class="token punctuation">.</span>tuples_len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">sol_debug</span><span class="token punctuation">(</span><span class="token string">"Received SUBSCRIBE from %s"</span><span class="token punctuation">,</span> c<span class="token operator">-></span>client_id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获得单个元组的主题字符串和QoS</span>        <span class="token keyword">char</span> <span class="token operator">*</span>topic <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> pkt<span class="token operator">-></span>subscribe<span class="token punctuation">.</span>tuples<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>topic<span class="token punctuation">;</span>        <span class="token function">sol_debug</span><span class="token punctuation">(</span><span class="token string">"\t%s (QoS %i)"</span><span class="token punctuation">,</span> topic<span class="token punctuation">,</span> pkt<span class="token operator">-></span>subscribe<span class="token punctuation">.</span>tuples<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>qos<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 当使用 /# 结尾时, 标记通配</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>topic<span class="token punctuation">[</span>pkt<span class="token operator">-></span>subscribe<span class="token punctuation">.</span>tuples<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>topic_len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'#'</span> <span class="token operator">&amp;&amp;</span>            topic<span class="token punctuation">[</span>pkt<span class="token operator">-></span>subscribe<span class="token punctuation">.</span>tuples<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>topic_len <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'/'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            topic <span class="token operator">=</span> <span class="token function">remove_occur</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> <span class="token char">'#'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            wildcard <span class="token operator">=</span> true<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>topic<span class="token punctuation">[</span>pkt<span class="token operator">-></span>subscribe<span class="token punctuation">.</span>tuples<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>topic_len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">'/'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 如果不以 / 结尾, 添加 /</span>            topic <span class="token operator">=</span> <span class="token function">append_string</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> pkt<span class="token operator">-></span>subscribe<span class="token punctuation">.</span>tuples<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>topic<span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            alloced <span class="token operator">=</span> true<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 通过 topic 字符串找到对象</span>        <span class="token keyword">struct</span> <span class="token class-name">topic</span> <span class="token operator">*</span>t <span class="token operator">=</span> <span class="token function">sol_topic_get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sol<span class="token punctuation">,</span> topic<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 当没有找到对象时, 创建并添加到特里树</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            t <span class="token operator">=</span> <span class="token function">topic_create</span><span class="token punctuation">(</span><span class="token function">strdup</span><span class="token punctuation">(</span>topic<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">sol_topic_put</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sol<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>wildcard <span class="token operator">==</span> true<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">struct</span> <span class="token class-name">subscriber</span> <span class="token operator">*</span>sub <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>sub<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sub<span class="token operator">-></span>client <span class="token operator">=</span> cb<span class="token operator">-></span>obj<span class="token punctuation">;</span>            sub<span class="token operator">-></span>qos <span class="token operator">=</span> pkt<span class="token operator">-></span>subscribe<span class="token punctuation">.</span>tuples<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>qos<span class="token punctuation">;</span>            <span class="token comment">// 让该节点和所有子节点都拥有表示此客户端的 subscriber</span>            <span class="token function">trie_prefix_map_tuple</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sol<span class="token punctuation">.</span>topics<span class="token punctuation">,</span> topic<span class="token punctuation">,</span> recursive_subscription<span class="token punctuation">,</span> sub<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 暂时都使用 cleansession = true</span>        <span class="token comment">// 译者觉得在通配符的情况下这里会到这 topic 对应的节点产生两个 subscriber</span>        <span class="token function">topic_add_subscriber</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> cb<span class="token operator">-></span>obj<span class="token punctuation">,</span> pkt<span class="token operator">-></span>subscribe<span class="token punctuation">.</span>tuples<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>qos<span class="token punctuation">,</span> true<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>alloced<span class="token punctuation">)</span>            <span class="token function">free</span><span class="token punctuation">(</span>topic<span class="token punctuation">)</span><span class="token punctuation">;</span>        rcs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> pkt<span class="token operator">-></span>subscribe<span class="token punctuation">.</span>tuples<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>qos<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 制作 suback</span>    <span class="token keyword">struct</span> <span class="token class-name">mqtt_suback</span> <span class="token operator">*</span>suback <span class="token operator">=</span> <span class="token function">mqtt_packet_suback</span><span class="token punctuation">(</span>SUBACK_BYTE<span class="token punctuation">,</span>                                                    pkt<span class="token operator">-></span>subscribe<span class="token punctuation">.</span>pkt_id<span class="token punctuation">,</span>                                                    rcs<span class="token punctuation">,</span>                                                    pkt<span class="token operator">-></span>subscribe<span class="token punctuation">.</span>tuples_len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 复用pkt</span>    <span class="token function">mqtt_packet_release</span><span class="token punctuation">(</span>pkt<span class="token punctuation">,</span> SUBSCRIBE<span class="token punctuation">)</span><span class="token punctuation">;</span>    pkt<span class="token operator">-></span>suback <span class="token operator">=</span> <span class="token operator">*</span>suback<span class="token punctuation">;</span>    <span class="token comment">// 制作数据流并发出</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>packed <span class="token operator">=</span> <span class="token function">pack_mqtt_packet</span><span class="token punctuation">(</span>pkt<span class="token punctuation">,</span> SUBACK<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">size_t</span> len <span class="token operator">=</span> MQTT_HEADER_LEN <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span><span class="token punctuation">)</span> <span class="token operator">+</span> pkt<span class="token operator">-></span>subscribe<span class="token punctuation">.</span>tuples_len<span class="token punctuation">;</span>    cb<span class="token operator">-></span>payload <span class="token operator">=</span> <span class="token function">bytestring_create</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>cb<span class="token operator">-></span>payload<span class="token operator">-></span>data<span class="token punctuation">,</span> packed<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>packed<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mqtt_packet_release</span><span class="token punctuation">(</span>pkt<span class="token punctuation">,</span> SUBACK<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>suback<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sol_debug</span><span class="token punctuation">(</span><span class="token string">"Sending SUBACK to %s"</span><span class="token punctuation">,</span> c<span class="token operator">-></span>client_id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> REARM_W<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// UNSUBSCRIBE 处理器 这里没做实际处理, 只是正确回复ACK</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">unsubscribe_handler</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">closure</span> <span class="token operator">*</span>cb<span class="token punctuation">,</span> <span class="token keyword">union</span> mqtt_packet <span class="token operator">*</span>pkt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">sol_client</span> <span class="token operator">*</span>c <span class="token operator">=</span> cb<span class="token operator">-></span>obj<span class="token punctuation">;</span>    <span class="token function">sol_debug</span><span class="token punctuation">(</span><span class="token string">"Received UNSUBSCRIBE from %s"</span><span class="token punctuation">,</span> c<span class="token operator">-></span>client_id<span class="token punctuation">)</span><span class="token punctuation">;</span>    pkt<span class="token operator">-></span>ack <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">mqtt_packet_ack</span><span class="token punctuation">(</span>UNSUBACK_BYTE<span class="token punctuation">,</span> pkt<span class="token operator">-></span>unsubscribe<span class="token punctuation">.</span>pkt_id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>packed <span class="token operator">=</span> <span class="token function">pack_mqtt_packet</span><span class="token punctuation">(</span>pkt<span class="token punctuation">,</span> UNSUBACK<span class="token punctuation">)</span><span class="token punctuation">;</span>    cb<span class="token operator">-></span>payload <span class="token operator">=</span> <span class="token function">bytestring_create</span><span class="token punctuation">(</span>MQTT_ACK_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>cb<span class="token operator">-></span>payload<span class="token operator">-></span>data<span class="token punctuation">,</span> packed<span class="token punctuation">,</span> MQTT_ACK_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>packed<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sol_debug</span><span class="token punctuation">(</span><span class="token string">"Sending UNSUBACK to %s"</span><span class="token punctuation">,</span> c<span class="token operator">-></span>client_id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> REARM_W<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="PUBLISH-处理器"><a href="#PUBLISH-处理器" class="headerlink" title="PUBLISH 处理器"></a>PUBLISH 处理器</h2><p>PUBLISH 处理器会比我们前面写的几个内容多一些，但是十分好理解：</p><ul><li>如果发布的主题不存在, 则创建</li><li>基于消息的 QoS 设置，使用正确的 ACK 回复：<ul><li>QoS0：至多一次，不回复</li><li>QoS1：至少一次，使用 PUBACK 回复</li><li>QoS2：确保一次，使用 PUBREC 回复</li></ul></li><li>向该主题的订阅者转发该消息，转发的 QoS 值应该是由消息的 QoS 决定，但不能大于接收方设置的最大 QoS 值</li></ul><p><img src="/2023/12/29/translate-sol-6/QoS2-sample.png" alt="Broker 接收一条 QoS2 的消息，并向 QoS1 的订阅者转发"></p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>src/server.c</span></div><code class="language-c"><span class="token comment">// PUBLISH 处理器</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">publish_handler</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">closure</span> <span class="token operator">*</span>cb<span class="token punctuation">,</span> <span class="token keyword">union</span> mqtt_packet <span class="token operator">*</span>pkt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">sol_client</span> <span class="token operator">*</span>c <span class="token operator">=</span> cb<span class="token operator">-></span>obj<span class="token punctuation">;</span>    <span class="token function">sol_debug</span><span class="token punctuation">(</span><span class="token string">"Received PUBLISH from %s (d%i, q%u, r%i, m%u, %s, ... (%i bytes))"</span><span class="token punctuation">,</span>              c<span class="token operator">-></span>client_id<span class="token punctuation">,</span>              pkt<span class="token operator">-></span>publish<span class="token punctuation">.</span>header<span class="token punctuation">.</span>bits<span class="token punctuation">.</span>dup<span class="token punctuation">,</span> pkt<span class="token operator">-></span>publish<span class="token punctuation">.</span>header<span class="token punctuation">.</span>bits<span class="token punctuation">.</span>qos<span class="token punctuation">,</span>              pkt<span class="token operator">-></span>publish<span class="token punctuation">.</span>header<span class="token punctuation">.</span>bits<span class="token punctuation">.</span>retain<span class="token punctuation">,</span> pkt<span class="token operator">-></span>publish<span class="token punctuation">.</span>pkt_id<span class="token punctuation">,</span>              pkt<span class="token operator">-></span>publish<span class="token punctuation">.</span>topic<span class="token punctuation">,</span> pkt<span class="token operator">-></span>publish<span class="token punctuation">.</span>payloadlen<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 数据记录</span>    info<span class="token punctuation">.</span>messages_recv<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>topic <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> pkt<span class="token operator">-></span>publish<span class="token punctuation">.</span>topic<span class="token punctuation">;</span>    bool alloced <span class="token operator">=</span> false<span class="token punctuation">;</span> <span class="token comment">// 标记字符串空间是分配的</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> qos <span class="token operator">=</span> pkt<span class="token operator">-></span>publish<span class="token punctuation">.</span>header<span class="token punctuation">.</span>bits<span class="token punctuation">.</span>qos<span class="token punctuation">;</span>    <span class="token comment">// 保证所有的主题都是用 / 结尾</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>topic<span class="token punctuation">[</span>pkt<span class="token operator">-></span>publish<span class="token punctuation">.</span>topiclen <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">'/'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        topic <span class="token operator">=</span> <span class="token function">append_string</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> pkt<span class="token operator">-></span>publish<span class="token punctuation">.</span>topic<span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        alloced <span class="token operator">=</span> true<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 获得或创建基于该 kye 的 topic 对象</span>    <span class="token keyword">struct</span> <span class="token class-name">topic</span> <span class="token operator">*</span>t <span class="token operator">=</span> <span class="token function">sol_topic_get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sol<span class="token punctuation">,</span> topic<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        t <span class="token operator">=</span> <span class="token function">topic_create</span><span class="token punctuation">(</span><span class="token function">strdup</span><span class="token punctuation">(</span>topic<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sol_topic_put</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sol<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>alloced <span class="token operator">==</span> true<span class="token punctuation">)</span>        <span class="token function">free</span><span class="token punctuation">(</span>topic<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">size_t</span> publen<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pub<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">list_node</span> <span class="token operator">*</span>cur <span class="token operator">=</span> t<span class="token operator">-></span>subscribers<span class="token operator">-></span>head<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> cur<span class="token punctuation">;</span> cur <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        publen <span class="token operator">=</span> MQTT_HEADER_LEN <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span><span class="token punctuation">)</span> <span class="token operator">+</span>            pkt<span class="token operator">-></span>publish<span class="token punctuation">.</span>topiclen <span class="token operator">+</span> pkt<span class="token operator">-></span>publish<span class="token punctuation">.</span>payloadlen<span class="token punctuation">;</span>        <span class="token keyword">struct</span> <span class="token class-name">subscriber</span> <span class="token operator">*</span>sub <span class="token operator">=</span> cur<span class="token operator">-></span>data<span class="token punctuation">;</span>        <span class="token keyword">struct</span> <span class="token class-name">sol_client</span> <span class="token operator">*</span>sc <span class="token operator">=</span> sub<span class="token operator">-></span>client<span class="token punctuation">;</span>        <span class="token comment">// 将 QoS 设置为订阅者的 QoS （此处为方便设计，并未完全遵循协议）</span>        pkt<span class="token operator">-></span>publish<span class="token punctuation">.</span>header<span class="token punctuation">.</span>bits<span class="token punctuation">.</span>qos <span class="token operator">=</span> sub<span class="token operator">-></span>qos<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pkt<span class="token operator">-></span>publish<span class="token punctuation">.</span>header<span class="token punctuation">.</span>bits<span class="token punctuation">.</span>qos <span class="token operator">></span> AT_MOST_ONCE<span class="token punctuation">)</span>            publen <span class="token operator">+=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> remaininglen_offset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>publen <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0x200000</span><span class="token punctuation">)</span>            remaininglen_offset <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>publen <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0x4000</span><span class="token punctuation">)</span>            remaininglen_offset <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>publen <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0x80</span><span class="token punctuation">)</span>            remaininglen_offset <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        publen <span class="token operator">+=</span> remaininglen_offset<span class="token punctuation">;</span>        <span class="token comment">// 发送给该订阅者的 PUB 包</span>        pub <span class="token operator">=</span> <span class="token function">pack_mqtt_packet</span><span class="token punctuation">(</span>pkt<span class="token punctuation">,</span> PUBLISH<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ssize_t</span> sent<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sent <span class="token operator">=</span> <span class="token function">send_bytes</span><span class="token punctuation">(</span>sc<span class="token operator">-></span>fd<span class="token punctuation">,</span> pub<span class="token punctuation">,</span> publen<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">sol_error</span><span class="token punctuation">(</span><span class="token string">"Error publishing to %s: %s"</span><span class="token punctuation">,</span>                      sc<span class="token operator">-></span>client_id<span class="token punctuation">,</span> <span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 记录信息</span>        info<span class="token punctuation">.</span>bytes_sent <span class="token operator">+=</span> sent<span class="token punctuation">;</span>        <span class="token function">sol_debug</span><span class="token punctuation">(</span><span class="token string">"Sending PUBLISH to %s (d%i, q%u, r%i, m%u, %s, ... (%i bytes))"</span><span class="token punctuation">,</span>                  sc<span class="token operator">-></span>client_id<span class="token punctuation">,</span>                  pkt<span class="token operator">-></span>publish<span class="token punctuation">.</span>header<span class="token punctuation">.</span>bits<span class="token punctuation">.</span>dup<span class="token punctuation">,</span>                  pkt<span class="token operator">-></span>publish<span class="token punctuation">.</span>header<span class="token punctuation">.</span>bits<span class="token punctuation">.</span>qos<span class="token punctuation">,</span>                  pkt<span class="token operator">-></span>publish<span class="token punctuation">.</span>header<span class="token punctuation">.</span>bits<span class="token punctuation">.</span>retain<span class="token punctuation">,</span>                  pkt<span class="token operator">-></span>publish<span class="token punctuation">.</span>pkt_id<span class="token punctuation">,</span>                  pkt<span class="token operator">-></span>publish<span class="token punctuation">.</span>topic<span class="token punctuation">,</span>                  pkt<span class="token operator">-></span>publish<span class="token punctuation">.</span>payloadlen<span class="token punctuation">)</span><span class="token punctuation">;</span>        info<span class="token punctuation">.</span>messages_sent<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>pub<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 至少一次 使用ACK回复</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>qos <span class="token operator">==</span> AT_LEAST_ONCE<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        mqtt_puback <span class="token operator">*</span>puback <span class="token operator">=</span> <span class="token function">mqtt_packet_ack</span><span class="token punctuation">(</span>PUBACK_BYTE<span class="token punctuation">,</span> pkt<span class="token operator">-></span>publish<span class="token punctuation">.</span>pkt_id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">mqtt_packet_release</span><span class="token punctuation">(</span>pkt<span class="token punctuation">,</span> PUBLISH<span class="token punctuation">)</span><span class="token punctuation">;</span>        pkt<span class="token operator">-></span>ack <span class="token operator">=</span> <span class="token operator">*</span>puback<span class="token punctuation">;</span>        <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>packed <span class="token operator">=</span> <span class="token function">pack_mqtt_packet</span><span class="token punctuation">(</span>pkt<span class="token punctuation">,</span> PUBACK<span class="token punctuation">)</span><span class="token punctuation">;</span>        cb<span class="token operator">-></span>payload <span class="token operator">=</span> <span class="token function">bytestring_create</span><span class="token punctuation">(</span>MQTT_ACK_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">memcpy</span><span class="token punctuation">(</span>cb<span class="token operator">-></span>payload<span class="token operator">-></span>data<span class="token punctuation">,</span> packed<span class="token punctuation">,</span> MQTT_ACK_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>packed<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sol_debug</span><span class="token punctuation">(</span><span class="token string">"Sending PUBACK to %s"</span><span class="token punctuation">,</span> c<span class="token operator">-></span>client_id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> REARM_W<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>qos <span class="token operator">==</span> EXACTLY_ONCE<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 确保一次 使用 PUBREC 回复</span>        <span class="token comment">// TODO 需要通过一个哈希表记录已经处于 PUBREC 状态的客户端+包id</span>        mqtt_pubrec <span class="token operator">*</span>pubrec <span class="token operator">=</span> <span class="token function">mqtt_packet_ack</span><span class="token punctuation">(</span>PUBREC_BYTE<span class="token punctuation">,</span> pkt<span class="token operator">-></span>publish<span class="token punctuation">.</span>pkt_id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">mqtt_packet_release</span><span class="token punctuation">(</span>pkt<span class="token punctuation">,</span> PUBLISH<span class="token punctuation">)</span><span class="token punctuation">;</span>        pkt<span class="token operator">-></span>ack <span class="token operator">=</span> <span class="token operator">*</span>pubrec<span class="token punctuation">;</span>        <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>packed <span class="token operator">=</span> <span class="token function">pack_mqtt_packet</span><span class="token punctuation">(</span>pkt<span class="token punctuation">,</span> PUBREC<span class="token punctuation">)</span><span class="token punctuation">;</span>        cb<span class="token operator">-></span>payload <span class="token operator">=</span> <span class="token function">bytestring_create</span><span class="token punctuation">(</span>MQTT_ACK_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">memcpy</span><span class="token punctuation">(</span>cb<span class="token operator">-></span>payload<span class="token operator">-></span>data<span class="token punctuation">,</span> packed<span class="token punctuation">,</span> MQTT_ACK_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>packed<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sol_debug</span><span class="token punctuation">(</span><span class="token string">"Sending PUBREC to %s"</span><span class="token punctuation">,</span> c<span class="token operator">-></span>client_id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> REARM_W<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 至多一次 无需回复</span>    <span class="token function">mqtt_packet_release</span><span class="token punctuation">(</span>pkt<span class="token punctuation">,</span> PUBLISH<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> REARM_R<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="ACK-PINGREQ-处理器"><a href="#ACK-PINGREQ-处理器" class="headerlink" title="ACK PINGREQ 处理器"></a>ACK PINGREQ 处理器</h2><p>只剩下 ACK 处理器了，他们基本上都是一样的。现在我们只做基本的日志和回复，以后我们再来实现基于 QoS 的业务机制。</p><p>还有 PINGREQ 处理器，这是客户端用来确认链接状态的心跳报文，我们只需要用 PINGRESP 回复即可。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>src/server.c</span></div><code class="language-c"><span class="token comment">// PUBACK 处理器</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">puback_handler</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">closure</span> <span class="token operator">*</span>cb<span class="token punctuation">,</span> <span class="token keyword">union</span> mqtt_packet <span class="token operator">*</span>pkt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">sol_debug</span><span class="token punctuation">(</span><span class="token string">"Received PUBACK from %s"</span><span class="token punctuation">,</span>              <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sol_client</span> <span class="token operator">*</span><span class="token punctuation">)</span> cb<span class="token operator">-></span>obj<span class="token punctuation">)</span><span class="token operator">-></span>client_id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// TODO 基于QoS机制, 将该数据移出需重传列表</span>    <span class="token keyword">return</span> REARM_R<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// PUBREC 处理器</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">pubrec_handler</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">closure</span> <span class="token operator">*</span>cb<span class="token punctuation">,</span> <span class="token keyword">union</span> mqtt_packet <span class="token operator">*</span>pkt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">sol_client</span> <span class="token operator">*</span>c <span class="token operator">=</span> cb<span class="token operator">-></span>obj<span class="token punctuation">;</span>    <span class="token function">sol_debug</span><span class="token punctuation">(</span><span class="token string">"Received PUBREC from %s"</span><span class="token punctuation">,</span> c<span class="token operator">-></span>client_id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 按照协议使用 RELEASE 回复 RECIVE</span>    mqtt_pubrel <span class="token operator">*</span>pubrel <span class="token operator">=</span> <span class="token function">mqtt_packet_ack</span><span class="token punctuation">(</span>PUBREL_BYTE<span class="token punctuation">,</span> pkt<span class="token operator">-></span>publish<span class="token punctuation">.</span>pkt_id<span class="token punctuation">)</span><span class="token punctuation">;</span>    pkt<span class="token operator">-></span>ack <span class="token operator">=</span> <span class="token operator">*</span>pubrel<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>packed <span class="token operator">=</span> <span class="token function">pack_mqtt_packet</span><span class="token punctuation">(</span>pkt<span class="token punctuation">,</span> PUBREC<span class="token punctuation">)</span><span class="token punctuation">;</span>    cb<span class="token operator">-></span>payload <span class="token operator">=</span> <span class="token function">bytestring_create</span><span class="token punctuation">(</span>MQTT_ACK_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>cb<span class="token operator">-></span>payload<span class="token operator">-></span>data<span class="token punctuation">,</span> packed<span class="token punctuation">,</span> MQTT_ACK_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>packed<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sol_debug</span><span class="token punctuation">(</span><span class="token string">"Sending PUBREL to %s"</span><span class="token punctuation">,</span> c<span class="token operator">-></span>client_id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> REARM_W<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// PUBREL 处理器</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">pubrel_handler</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">closure</span> <span class="token operator">*</span>cb<span class="token punctuation">,</span> <span class="token keyword">union</span> mqtt_packet <span class="token operator">*</span>pkt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">sol_debug</span><span class="token punctuation">(</span><span class="token string">"Received PUBREL from %s"</span><span class="token punctuation">,</span>              <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sol_client</span> <span class="token operator">*</span><span class="token punctuation">)</span> cb<span class="token operator">-></span>obj<span class="token punctuation">)</span><span class="token operator">-></span>client_id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 按照协议使用 COMPLETE 回复 RELEASE</span>    mqtt_pubcomp <span class="token operator">*</span>pubcomp <span class="token operator">=</span> <span class="token function">mqtt_packet_ack</span><span class="token punctuation">(</span>PUBCOMP_BYTE<span class="token punctuation">,</span> pkt<span class="token operator">-></span>publish<span class="token punctuation">.</span>pkt_id<span class="token punctuation">)</span><span class="token punctuation">;</span>    pkt<span class="token operator">-></span>ack <span class="token operator">=</span> <span class="token operator">*</span>pubcomp<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>packed <span class="token operator">=</span> <span class="token function">pack_mqtt_packet</span><span class="token punctuation">(</span>pkt<span class="token punctuation">,</span> PUBCOMP<span class="token punctuation">)</span><span class="token punctuation">;</span>    cb<span class="token operator">-></span>payload <span class="token operator">=</span> <span class="token function">bytestring_create</span><span class="token punctuation">(</span>MQTT_ACK_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>cb<span class="token operator">-></span>payload<span class="token operator">-></span>data<span class="token punctuation">,</span> packed<span class="token punctuation">,</span> MQTT_ACK_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>packed<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sol_debug</span><span class="token punctuation">(</span><span class="token string">"Sending PUBCOMP to %s"</span><span class="token punctuation">,</span>              <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sol_client</span> <span class="token operator">*</span><span class="token punctuation">)</span> cb<span class="token operator">-></span>obj<span class="token punctuation">)</span><span class="token operator">-></span>client_id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> REARM_W<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// PUBCOMP 处理器</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">pubcomp_handler</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">closure</span> <span class="token operator">*</span>cb<span class="token punctuation">,</span> <span class="token keyword">union</span> mqtt_packet <span class="token operator">*</span>pkt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">sol_debug</span><span class="token punctuation">(</span><span class="token string">"Received PUBCOMP from %s"</span><span class="token punctuation">,</span>              <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sol_client</span> <span class="token operator">*</span><span class="token punctuation">)</span> cb<span class="token operator">-></span>obj<span class="token punctuation">)</span><span class="token operator">-></span>client_id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// TODO 基于 QoS 机制将其从待确认列表移出</span>    <span class="token keyword">return</span> REARM_R<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// PINGREQ 处理器</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">pingreq_handler</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">closure</span> <span class="token operator">*</span>cb<span class="token punctuation">,</span> <span class="token keyword">union</span> mqtt_packet <span class="token operator">*</span>pkt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">sol_debug</span><span class="token punctuation">(</span><span class="token string">"Received PINGREQ from %s"</span><span class="token punctuation">,</span>              <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sol_client</span> <span class="token operator">*</span><span class="token punctuation">)</span> cb<span class="token operator">-></span>obj<span class="token punctuation">)</span><span class="token operator">-></span>client_id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 按照协议使用 PINGRESP 回复</span>    pkt<span class="token operator">-></span>header <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">mqtt_packet_header</span><span class="token punctuation">(</span>PINGRESP_BYTE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>packed <span class="token operator">=</span> <span class="token function">pack_mqtt_packet</span><span class="token punctuation">(</span>pkt<span class="token punctuation">,</span> PINGRESP<span class="token punctuation">)</span><span class="token punctuation">;</span>    cb<span class="token operator">-></span>payload <span class="token operator">=</span> <span class="token function">bytestring_create</span><span class="token punctuation">(</span>MQTT_HEADER_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>cb<span class="token operator">-></span>payload<span class="token operator">-></span>data<span class="token punctuation">,</span> packed<span class="token punctuation">,</span> MQTT_HEADER_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>packed<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sol_debug</span><span class="token punctuation">(</span><span class="token string">"Sending PINGRESP to %s"</span><span class="token punctuation">,</span>              <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sol_client</span> <span class="token operator">*</span><span class="token punctuation">)</span> cb<span class="token operator">-></span>obj<span class="token punctuation">)</span><span class="token operator">-></span>client_id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> REARM_W<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>现在我们的 broker 已经具有基本的功能，很快就可以和其他的 MQTT 工具联调测试，例如使用 <code>mosquitto_sub</code> 和 <code>mosquitto_pub</code> 或 Python 中的 <code>paho-mqtt</code>。</p><h1 id="配置模块"><a href="#配置模块" class="headerlink" title="配置模块"></a>配置模块</h1><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>我们需要一个配置模块来设置各种参数，使用最经典的键值对的方式：</p><figure><div class="code-wrapper"><pre class="line-numbers language-conf" data-language="conf"><div class="caption"><span>conf/sol.conf</span></div><code class="language-conf"># Sol configuration file, uncomment and edit desired configuration# Network configuration# Uncomment ip_address and ip_port to set socket family to TCP, if unix_socket# is set, UNIX family socket will be used# ip_address 127.0.0.1# ip_port 9090unix_socket &#x2F;tmp&#x2F;sol.sock# Logging configuration# Could be either DEBUG, INFO&#x2F;INFORMATION, WARNING, ERRORlog_level DEBUGlog_path &#x2F;tmp&#x2F;sol.log# Max memory to be used, after which the system starts to reclaim memory by# freeing older items storedmax_memory 2GB# Max memory that will be allocated for each requestmax_request_size 50MB# TCP backlog, size of the complete connection queuetcp_backlog 128# Interval of time between one stats publish on $SOL topics and the subsequentstats_publish_interval 10s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="配置模块定义"><a href="#配置模块定义" class="headerlink" title="配置模块定义"></a>配置模块定义</h2><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>src/config.h</span></div><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token comment">// 默认参数</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">VERSION</span>                     <span class="token string">"0.0.1"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DEFAULT_SOCKET_FAMILY</span>       <span class="token expression">INET</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DEFAULT_LOG_LEVEL</span>           <span class="token expression">DEBUG</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DEFAULT_LOG_PATH</span>            <span class="token string">"/tmp/sol.log"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DEFAULT_CONF_PATH</span>           <span class="token string">"/etc/sol/sol.conf"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DEFAULT_HOSTNAME</span>            <span class="token string">"127.0.0.1"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DEFAULT_PORT</span>                <span class="token string">"1883"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DEFAULT_MAX_MEMORY</span>          <span class="token string">"2GB"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DEFAULT_MAX_REQUEST_SIZE</span>    <span class="token string">"2MB"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DEFAULT_STATS_INTERVAL</span>      <span class="token string">"10s"</span></span><span class="token keyword">struct</span> <span class="token class-name">config</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/* Sol version &lt;MAJOR.MINOR.PATCH> */</span>    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>version<span class="token punctuation">;</span>    <span class="token comment">/* Eventfd to break the epoll_wait loop in case of signals */</span>    <span class="token keyword">int</span> run<span class="token punctuation">;</span>    <span class="token comment">/* Logging level, to be set by reading configuration */</span>    <span class="token keyword">int</span> loglevel<span class="token punctuation">;</span>    <span class="token comment">/* Epoll wait timeout, define even the number of times per second that the       system will check for expired keys */</span>    <span class="token keyword">int</span> epoll_timeout<span class="token punctuation">;</span>    <span class="token comment">/* Socket family (Unix domain or TCP) */</span>    <span class="token keyword">int</span> socket_family<span class="token punctuation">;</span>    <span class="token comment">/* Log file path */</span>    <span class="token keyword">char</span> logpath<span class="token punctuation">[</span><span class="token number">0xFF</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">/* Hostname to listen on */</span>    <span class="token keyword">char</span> hostname<span class="token punctuation">[</span><span class="token number">0xFF</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">/* Port to open while listening, only if socket_family is INET,     * otherwise it's ignored */</span>    <span class="token keyword">char</span> port<span class="token punctuation">[</span><span class="token number">0xFF</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">/* Max memory to be used, after which the system starts to reclaim back by     * freeing older items stored */</span>    <span class="token class-name">size_t</span> max_memory<span class="token punctuation">;</span>    <span class="token comment">/* Max memory request can allocate */</span>    <span class="token class-name">size_t</span> max_request_size<span class="token punctuation">;</span>    <span class="token comment">/* TCP backlog size */</span>    <span class="token keyword">int</span> tcp_backlog<span class="token punctuation">;</span>    <span class="token comment">/* Delay between every automatic publish of broker stats on topic */</span>    <span class="token class-name">size_t</span> stats_pub_interval<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 全局配置对象</span><span class="token keyword">extern</span> <span class="token keyword">struct</span> <span class="token class-name">config</span> <span class="token operator">*</span>conf<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">config_set_default</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">config_print</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">config_load</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">time_to_string</span><span class="token punctuation">(</span><span class="token class-name">size_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">memory_to_string</span><span class="token punctuation">(</span><span class="token class-name">size_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>配置项目无需过多解释，都可以通过名称了解其作用。</p><h2 id="配置模块实现"><a href="#配置模块实现" class="headerlink" title="配置模块实现"></a>配置模块实现</h2><p>配置项主要是使用工具将配置文件的字符串信息解析成配置对象的值：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>src/config.c</span></div><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctype.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;assert.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/eventfd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"util.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"config.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"network.h"</span></span><span class="token comment">// 全局对象</span><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">config</span> config<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">config</span> <span class="token operator">*</span>conf<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">llevel</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>lname<span class="token punctuation">;</span>    <span class="token keyword">int</span> loglevel<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">llevel</span> lmap<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#123;</span><span class="token string">"DEBUG"</span><span class="token punctuation">,</span> DEBUG<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span><span class="token string">"WARNING"</span><span class="token punctuation">,</span> WARNING<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span><span class="token string">"ERROR"</span><span class="token punctuation">,</span> ERROR<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span><span class="token string">"INFO"</span><span class="token punctuation">,</span> INFORMATION<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span><span class="token string">"INFORMATION"</span><span class="token punctuation">,</span> INFORMATION<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 解析带单位的内存配置</span><span class="token keyword">static</span> <span class="token class-name">size_t</span> <span class="token function">read_memory_with_mul</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>memory_string<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 解析数字部分</span>    <span class="token class-name">size_t</span> num <span class="token operator">=</span> <span class="token function">parse_int</span><span class="token punctuation">(</span>memory_string<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mul <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">// 指针指向单位</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span><span class="token operator">*</span>memory_string<span class="token punctuation">)</span><span class="token punctuation">)</span> memory_string<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment">// 通过单位获得乘系数</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">STREQ</span><span class="token punctuation">(</span>memory_string<span class="token punctuation">,</span> <span class="token string">"kb"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        mul <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">STREQ</span><span class="token punctuation">(</span>memory_string<span class="token punctuation">,</span> <span class="token string">"mb"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        mul <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">STREQ</span><span class="token punctuation">(</span>memory_string<span class="token punctuation">,</span> <span class="token string">"gb"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        mul <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> num <span class="token operator">*</span> mul<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 解析带单位的时间配置(默认秒)</span><span class="token keyword">static</span> <span class="token class-name">size_t</span> <span class="token function">read_time_with_mul</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>time_string<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">size_t</span> num <span class="token operator">=</span> <span class="token function">parse_int</span><span class="token punctuation">(</span>time_string<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mul <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span><span class="token operator">*</span>time_string<span class="token punctuation">)</span><span class="token punctuation">)</span> time_string<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token operator">*</span>time_string<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> <span class="token char">'m'</span><span class="token operator">:</span>            mul <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token char">'d'</span><span class="token operator">:</span>            mul <span class="token operator">=</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">24</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            mul <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> num <span class="token operator">*</span> mul<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 将内存数字转为人类易读的字符串 例如  1024 => 1Kb</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">memory_to_string</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> memory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> numlen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> translated_memory <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>mstring <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>memory <span class="token operator">&lt;</span> <span class="token number">1024</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        translated_memory <span class="token operator">=</span> memory<span class="token punctuation">;</span>        numlen <span class="token operator">=</span> <span class="token function">number_len</span><span class="token punctuation">(</span>translated_memory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 数字 + 'b'</span>        mstring <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>numlen <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">snprintf</span><span class="token punctuation">(</span>mstring<span class="token punctuation">,</span> numlen <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"%db"</span><span class="token punctuation">,</span> translated_memory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>memory <span class="token operator">&lt;</span> <span class="token number">1048576</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        translated_memory <span class="token operator">=</span> memory <span class="token operator">/</span> <span class="token number">1024</span><span class="token punctuation">;</span>        numlen <span class="token operator">=</span> <span class="token function">number_len</span><span class="token punctuation">(</span>translated_memory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// + "Kb"</span>        mstring <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>numlen <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">snprintf</span><span class="token punctuation">(</span>mstring<span class="token punctuation">,</span> numlen <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"%dKb"</span><span class="token punctuation">,</span> translated_memory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>memory <span class="token operator">&lt;</span> <span class="token number">1073741824</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        translated_memory <span class="token operator">=</span> memory <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        numlen <span class="token operator">=</span> <span class="token function">number_len</span><span class="token punctuation">(</span>translated_memory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// + "Mb"</span>        mstring <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>numlen <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">snprintf</span><span class="token punctuation">(</span>mstring<span class="token punctuation">,</span> numlen <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"%dMb"</span><span class="token punctuation">,</span> translated_memory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        translated_memory <span class="token operator">=</span> memory <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        numlen <span class="token operator">=</span> <span class="token function">number_len</span><span class="token punctuation">(</span>translated_memory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// + "Gb"</span>        mstring <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>numlen <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">snprintf</span><span class="token punctuation">(</span>mstring<span class="token punctuation">,</span> numlen <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"%dGb"</span><span class="token punctuation">,</span> translated_memory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> mstring<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 将时间数字转为人类易读的字符串</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">time_to_string</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> time<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> numlen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> translated_time <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>tstring <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">&lt;</span> <span class="token number">60</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        translated_time <span class="token operator">=</span> time<span class="token punctuation">;</span>        numlen <span class="token operator">=</span> <span class="token function">number_len</span><span class="token punctuation">(</span>translated_time<span class="token punctuation">)</span><span class="token punctuation">;</span>        tstring <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>numlen <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">snprintf</span><span class="token punctuation">(</span>tstring<span class="token punctuation">,</span> numlen <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"%ds"</span><span class="token punctuation">,</span> translated_time<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">&lt;</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        translated_time <span class="token operator">=</span> time <span class="token operator">/</span> <span class="token number">60</span><span class="token punctuation">;</span>        numlen <span class="token operator">=</span> <span class="token function">number_len</span><span class="token punctuation">(</span>translated_time<span class="token punctuation">)</span><span class="token punctuation">;</span>        tstring <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>numlen <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">snprintf</span><span class="token punctuation">(</span>tstring<span class="token punctuation">,</span> numlen <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"%dm"</span><span class="token punctuation">,</span> translated_time<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">&lt;</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">24</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        translated_time <span class="token operator">=</span> time <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        numlen <span class="token operator">=</span> <span class="token function">number_len</span><span class="token punctuation">(</span>translated_time<span class="token punctuation">)</span><span class="token punctuation">;</span>        tstring <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>numlen <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">snprintf</span><span class="token punctuation">(</span>tstring<span class="token punctuation">,</span> numlen <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"%dh"</span><span class="token punctuation">,</span> translated_time<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        translated_time <span class="token operator">=</span> time <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        numlen <span class="token operator">=</span> <span class="token function">number_len</span><span class="token punctuation">(</span>translated_time<span class="token punctuation">)</span><span class="token punctuation">;</span>        tstring <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>numlen <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">snprintf</span><span class="token punctuation">(</span>tstring<span class="token punctuation">,</span> numlen <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"%dd"</span><span class="token punctuation">,</span> translated_time<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> tstring<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 基于读取的 kv, 向配置对象赋值</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">add_config_value</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>key<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">size_t</span> klen <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">size_t</span> vlen <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">STREQ</span><span class="token punctuation">(</span><span class="token string">"log_level"</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> klen<span class="token punctuation">)</span> <span class="token operator">==</span> true<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">STREQ</span><span class="token punctuation">(</span>lmap<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>lname<span class="token punctuation">,</span> value<span class="token punctuation">,</span> vlen<span class="token punctuation">)</span> <span class="token operator">==</span> true<span class="token punctuation">)</span>                config<span class="token punctuation">.</span>loglevel <span class="token operator">=</span> lmap<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>loglevel<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">STREQ</span><span class="token punctuation">(</span><span class="token string">"log_path"</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> klen<span class="token punctuation">)</span> <span class="token operator">==</span> true<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">strcpy</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>logpath<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">STREQ</span><span class="token punctuation">(</span><span class="token string">"unix_socket"</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> klen<span class="token punctuation">)</span> <span class="token operator">==</span> true<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        config<span class="token punctuation">.</span>socket_family <span class="token operator">=</span> UNIX<span class="token punctuation">;</span>        <span class="token function">strcpy</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>hostname<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">STREQ</span><span class="token punctuation">(</span><span class="token string">"ip_address"</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> klen<span class="token punctuation">)</span> <span class="token operator">==</span> true<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        config<span class="token punctuation">.</span>socket_family <span class="token operator">=</span> INET<span class="token punctuation">;</span>        <span class="token function">strcpy</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>hostname<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">STREQ</span><span class="token punctuation">(</span><span class="token string">"ip_port"</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> klen<span class="token punctuation">)</span> <span class="token operator">==</span> true<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">strcpy</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>port<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">STREQ</span><span class="token punctuation">(</span><span class="token string">"max_memory"</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> klen<span class="token punctuation">)</span> <span class="token operator">==</span> true<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        config<span class="token punctuation">.</span>max_memory <span class="token operator">=</span> <span class="token function">read_memory_with_mul</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">STREQ</span><span class="token punctuation">(</span><span class="token string">"max_request_size"</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> klen<span class="token punctuation">)</span> <span class="token operator">==</span> true<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        config<span class="token punctuation">.</span>max_request_size <span class="token operator">=</span> <span class="token function">read_memory_with_mul</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">STREQ</span><span class="token punctuation">(</span><span class="token string">"tcp_backlog"</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> klen<span class="token punctuation">)</span> <span class="token operator">==</span> true<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> tcp_backlog <span class="token operator">=</span> <span class="token function">parse_int</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        config<span class="token punctuation">.</span>tcp_backlog <span class="token operator">=</span> tcp_backlog <span class="token operator">&lt;=</span> SOMAXCONN <span class="token operator">?</span> tcp_backlog <span class="token operator">:</span> SOMAXCONN<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">STREQ</span><span class="token punctuation">(</span><span class="token string">"stats_publish_interval"</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> klen<span class="token punctuation">)</span> <span class="token operator">==</span> true<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        config<span class="token punctuation">.</span>stats_pub_interval <span class="token operator">=</span> <span class="token function">read_time_with_mul</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 去空格</span><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">strip_spaces</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>str<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">*</span>str<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">isspace</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token operator">*</span>str<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span><span class="token operator">*</span>str<span class="token punctuation">)</span> <span class="token operator">++</span><span class="token punctuation">(</span><span class="token operator">*</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">unpack_bytes</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>dest<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>str <span class="token operator">||</span> <span class="token operator">!</span>dest<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isspace</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token operator">*</span>str<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span><span class="token operator">*</span>str<span class="token punctuation">)</span> <span class="token operator">*</span>dest<span class="token operator">++</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>str<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 读取配置</span><span class="token keyword">int</span> <span class="token function">config_load</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>configpath<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>configpath<span class="token punctuation">)</span><span class="token punctuation">;</span>    FILE <span class="token operator">*</span>fh <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>configpath<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fh<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">sol_warning</span><span class="token punctuation">(</span><span class="token string">"WARNING: Unable to open conf file %s"</span><span class="token punctuation">,</span> configpath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sol_warning</span><span class="token punctuation">(</span><span class="token string">"To specify a config file run sol -c /path/to/conf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">char</span> line<span class="token punctuation">[</span><span class="token number">0xff</span><span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token punctuation">[</span><span class="token number">0xff</span><span class="token punctuation">]</span><span class="token punctuation">,</span> value<span class="token punctuation">[</span><span class="token number">0xff</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> linenr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>pline<span class="token punctuation">,</span> <span class="token operator">*</span>pkey<span class="token punctuation">,</span> <span class="token operator">*</span>pval<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">fgets</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> <span class="token number">0xff</span><span class="token punctuation">,</span> fh<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        linenr<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token comment">// 跳过注解</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>line<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'#'</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token comment">// 删除key前的空格</span>        pline <span class="token operator">=</span> line<span class="token punctuation">;</span>        <span class="token function">strip_spaces</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pline<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>pline <span class="token operator">==</span> <span class="token char">'\0'</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token comment">// key</span>        pkey <span class="token operator">=</span> key<span class="token punctuation">;</span>        <span class="token function">unpack_bytes</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pline<span class="token punctuation">,</span> pkey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 删除 key 后空格</span>        <span class="token function">strip_spaces</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pline<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 忽略错误的配置格式并提示</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>line<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'\0'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">sol_warning</span><span class="token punctuation">(</span><span class="token string">"WARNING: Incomplete configuration '%s' at line %d. "</span>                        <span class="token string">"Fallback to default."</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> linenr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 获得值</span>        pval <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token function">unpack_bytes</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pline<span class="token punctuation">,</span> pval<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 赋值</span>        <span class="token function">add_config_value</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 设置默认参数</span><span class="token keyword">void</span> <span class="token function">config_set_default</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 全局配置对象指针</span>    conf <span class="token operator">=</span> <span class="token operator">&amp;</span>config<span class="token punctuation">;</span>    <span class="token comment">// 默认赋值</span>    config<span class="token punctuation">.</span>version <span class="token operator">=</span> VERSION<span class="token punctuation">;</span>    config<span class="token punctuation">.</span>socket_family <span class="token operator">=</span> DEFAULT_SOCKET_FAMILY<span class="token punctuation">;</span>    config<span class="token punctuation">.</span>loglevel <span class="token operator">=</span> DEFAULT_LOG_LEVEL<span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>logpath<span class="token punctuation">,</span> DEFAULT_LOG_PATH<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>hostname<span class="token punctuation">,</span> DEFAULT_HOSTNAME<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>port<span class="token punctuation">,</span> DEFAULT_PORT<span class="token punctuation">)</span><span class="token punctuation">;</span>    config<span class="token punctuation">.</span>epoll_timeout <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    config<span class="token punctuation">.</span>run <span class="token operator">=</span> <span class="token function">eventfd</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> EFD_NONBLOCK<span class="token punctuation">)</span><span class="token punctuation">;</span>    config<span class="token punctuation">.</span>max_memory <span class="token operator">=</span> <span class="token function">read_memory_with_mul</span><span class="token punctuation">(</span>DEFAULT_MAX_MEMORY<span class="token punctuation">)</span><span class="token punctuation">;</span>    config<span class="token punctuation">.</span>max_request_size <span class="token operator">=</span> <span class="token function">read_memory_with_mul</span><span class="token punctuation">(</span>DEFAULT_MAX_REQUEST_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    config<span class="token punctuation">.</span>tcp_backlog <span class="token operator">=</span> SOMAXCONN<span class="token punctuation">;</span>    config<span class="token punctuation">.</span>stats_pub_interval <span class="token operator">=</span> <span class="token function">read_time_with_mul</span><span class="token punctuation">(</span>DEFAULT_STATS_INTERVAL<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 配置输出</span><span class="token keyword">void</span> <span class="token function">config_print</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>loglevel <span class="token operator">&lt;</span> WARNING<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>sfamily <span class="token operator">=</span> config<span class="token punctuation">.</span>socket_family <span class="token operator">==</span> UNIX <span class="token operator">?</span> <span class="token string">"Unix"</span> <span class="token operator">:</span> <span class="token string">"Tcp"</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>llevel <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>lmap<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>loglevel <span class="token operator">==</span> config<span class="token punctuation">.</span>loglevel<span class="token punctuation">)</span>                llevel <span class="token operator">=</span> lmap<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>lname<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">sol_info</span><span class="token punctuation">(</span><span class="token string">"Sol v%s is starting"</span><span class="token punctuation">,</span> VERSION<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sol_info</span><span class="token punctuation">(</span><span class="token string">"Network settings:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sol_info</span><span class="token punctuation">(</span><span class="token string">"\tSocket family: %s"</span><span class="token punctuation">,</span> sfamily<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>socket_family <span class="token operator">==</span> UNIX<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">sol_info</span><span class="token punctuation">(</span><span class="token string">"\tUnix socket: %s"</span><span class="token punctuation">,</span> config<span class="token punctuation">.</span>hostname<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token function">sol_info</span><span class="token punctuation">(</span><span class="token string">"\tAddress: %s"</span><span class="token punctuation">,</span> config<span class="token punctuation">.</span>hostname<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">sol_info</span><span class="token punctuation">(</span><span class="token string">"\tPort: %s"</span><span class="token punctuation">,</span> config<span class="token punctuation">.</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">sol_info</span><span class="token punctuation">(</span><span class="token string">"\tTcp backlog: %d"</span><span class="token punctuation">,</span> config<span class="token punctuation">.</span>tcp_backlog<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>human_rsize <span class="token operator">=</span> <span class="token function">memory_to_string</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>max_request_size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sol_info</span><span class="token punctuation">(</span><span class="token string">"\tMax request size: %s"</span><span class="token punctuation">,</span> human_rsize<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sol_info</span><span class="token punctuation">(</span><span class="token string">"Logging:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sol_info</span><span class="token punctuation">(</span><span class="token string">"\tlevel: %s"</span><span class="token punctuation">,</span> llevel<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sol_info</span><span class="token punctuation">(</span><span class="token string">"\tlogpath: %s"</span><span class="token punctuation">,</span> config<span class="token punctuation">.</span>logpath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>human_memory <span class="token operator">=</span> <span class="token function">memory_to_string</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>max_memory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sol_info</span><span class="token punctuation">(</span><span class="token string">"Max memory: %s"</span><span class="token punctuation">,</span> human_memory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> human_memory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> human_rsize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h1><p>最后的最后，<code>main</code> 函数：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>src/sol.c</span></div><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_POSIX_C_SOURCE</span> <span class="token expression"><span class="token number">2</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"util.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"config.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"server.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>addr <span class="token operator">=</span> DEFAULT_HOSTNAME<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>port <span class="token operator">=</span> DEFAULT_PORT<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>confpath <span class="token operator">=</span> DEFAULT_CONF_PATH<span class="token punctuation">;</span>    <span class="token keyword">int</span> debug <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> opt<span class="token punctuation">;</span>    <span class="token comment">// 使用默认值赋值</span>    <span class="token function">config_set_default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 处理运行参数</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>opt <span class="token operator">=</span> <span class="token function">getopt</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token string">"a:c:p:m:vn:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>opt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> <span class="token char">'a'</span><span class="token operator">:</span>                addr <span class="token operator">=</span> optarg<span class="token punctuation">;</span>                <span class="token function">strcpy</span><span class="token punctuation">(</span>conf<span class="token operator">-></span>hostname<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token char">'c'</span><span class="token operator">:</span>                confpath <span class="token operator">=</span> optarg<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token char">'p'</span><span class="token operator">:</span>                port <span class="token operator">=</span> optarg<span class="token punctuation">;</span>                <span class="token function">strcpy</span><span class="token punctuation">(</span>conf<span class="token operator">-></span>port<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token char">'v'</span><span class="token operator">:</span>                debug <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span>                        <span class="token string">"Usage: %s [-a addr] [-p port] [-c conf] [-v]\n"</span><span class="token punctuation">,</span>                        argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 通过参数设置 debug 等级</span>    conf<span class="token operator">-></span>loglevel <span class="token operator">=</span> debug <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">?</span> DEBUG <span class="token operator">:</span> WARNING<span class="token punctuation">;</span>    <span class="token comment">// 读配置</span>    <span class="token function">config_load</span><span class="token punctuation">(</span>confpath<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sol_log_init</span><span class="token punctuation">(</span>conf<span class="token operator">-></span>logpath<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 打印配置</span>    <span class="token function">config_print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 运行服务</span>    <span class="token function">start_server</span><span class="token punctuation">(</span>conf<span class="token operator">-></span>hostname<span class="token punctuation">,</span> conf<span class="token operator">-></span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sol_log_close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="构建与运行"><a href="#构建与运行" class="headerlink" title="构建与运行"></a>构建与运行</h1><p>我们的 <code>sol</code> 项目运行的所有所需内容都完成了：</p><figure><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">sol/ ├── src/ │    ├── mqtt.h │    ├── mqtt.c │    ├── network.h │    ├── network.c │    ├── list.h │    ├── list.c │    ├── hashtable.h │    ├── hashtable.c │    ├── server.h │    ├── server.c │    ├── trie.h │    ├── trie.c │    ├── util.h │    ├── util.c │    ├── core.h │    ├── core.c │    ├── config.h │    ├── config.c │    ├── pack.h │    ├── pack.c │    └── sol.c ├── conf │    └── sol.conf ├── CHANGELOG ├── CMakeLists.txt ├── COPYING └── README.md<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><code>sol</code> 项目的代码量并不算大，一般这种情况下我会编写 <code>Makefile</code> 用来控制编译。但是这一次，就像上方文件结构中描述的那样，我打算使用 <code>CMakeLists.txt</code> 来控制项目的构建：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cmake_minimum_required<span class="token punctuation">(</span>VERSION <span class="token number">2.8</span><span class="token punctuation">)</span>project<span class="token punctuation">(</span>sol<span class="token punctuation">)</span>OPTION<span class="token punctuation">(</span>DEBUG <span class="token string">"add debug flags"</span> OFF<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG<span class="token punctuation">)</span>    message<span class="token punctuation">(</span>STATUS <span class="token string">"Configuring build for debug"</span><span class="token punctuation">)</span>    set<span class="token punctuation">(</span>CMAKE_C_FLAGS <span class="token string">"<span class="token variable">$&#123;CMAKE_C_FLAGS&#125;</span> -Wall -Wunused -Werror -std=c11 -O3 -pedantic -luuid -ggdb -fsanitize=address -fsanitize=undefined -fno-omit-frame-pointer -pg"</span><span class="token punctuation">)</span><span class="token keyword">else</span> <span class="token punctuation">(</span>DEBUG<span class="token punctuation">)</span>    message<span class="token punctuation">(</span>STATUS <span class="token string">"Configuring build for production"</span><span class="token punctuation">)</span>    set<span class="token punctuation">(</span>CMAKE_C_FLAGS <span class="token string">"<span class="token variable">$&#123;CMAKE_C_FLAGS&#125;</span> -Wall -Wunused -Werror -Wextra -std=c11 -O3 -pedantic -luuid"</span><span class="token punctuation">)</span>endif <span class="token punctuation">(</span>DEBUG<span class="token punctuation">)</span>set<span class="token punctuation">(</span>EXECUTABLE_OUTPUT_PATH <span class="token variable">$&#123;CMAKE_SOURCE_DIR&#125;</span><span class="token punctuation">)</span>file<span class="token punctuation">(</span>GLOB SOURCES src/*.c<span class="token punctuation">)</span>set<span class="token punctuation">(</span>AUTHOR <span class="token string">"Andrea Giacomo Baldan"</span><span class="token punctuation">)</span>set<span class="token punctuation">(</span>LICENSE <span class="token string">"BSD2 license"</span><span class="token punctuation">)</span><span class="token comment"># Executable</span>add_executable<span class="token punctuation">(</span>sol <span class="token variable">$&#123;SOURCES&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>唯一值得注意的就是我添加了 <code>DEBUG</code>  参数，这会产生一个带有监测内存泄漏参数版本的 <code>Makefile</code>。</p><p>所以接下来只需要生成 <code>Makefile</code></p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ cmake <span class="token parameter variable">-DDEBUG</span><span class="token operator">=</span><span class="token number">1</span> <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>然后编译我们的代码</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">make</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>编译后得到名为 <strong>sol</strong> 的可执行程序，我们可以运行他来启动我们的 broker，程序支持我们上面编写的那些参数。</p><p>我们通过 <strong>-v</strong> (verbose) 参数启动程序，这样可以看到 <strong>debug</strong> 级别的日志信息。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ sol <span class="token parameter variable">-v</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>好了，到此为止就是这么多内容，现在我们的代码也许有很多bug，有内存泄露问题，有很多需要修复或者重构的代码，但是软件的框架就是这样子了。第七部分很快就会编写完成，我打算用 <code>paho-mqtt</code> 进行一些测试。接下来你可以看看<a href="https://codepr.github.io/posts/sol-mqtt-broker-bonus/">特别篇</a>，在那里我们会为 <strong>sol</strong> 添加多线程支持。</p>]]></content>
    
    
    <categories>
      
      <category>MQTT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络编程</tag>
      
      <tag>翻译</tag>
      
      <tag>物联网</tag>
      
      <tag>C</tag>
      
      <tag>MQTT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[翻译]Sol - 从零开始的MQTT broker - 第五部分：主题树</title>
    <link href="/2023/12/28/translate-sol-5.html"/>
    <url>/2023/12/28/translate-sol-5.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>原文 <a href="https://codepr.github.io/posts/sol-mqtt-broker-p5/">Sol - An MQTT broker from scratch. Part 5 - Topic abstraction</a></p></blockquote><span id="more"></span><h1 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h1><p>在<a href="%5B../sol-mqtt-broker-p4%5D(https://codepr.github.io/posts/sol-mqtt-broker-p4/)">第四部分</a>中，我们已经实现了两个数据结构，<strong>哈希表</strong>和<strong>列表</strong>。</p><p>在MQTT协议中，有一种名为 <strong>主题(topic)</strong> 的路由方式，主题本质上是一个字符串，用来将消息匹配到符合规则的客户端中。主题使用分层模型，遵守以下规则：</p><ul><li>主题是一个UTF-8编码的字符串，最大长度为65535个字节</li><li><code>/</code> 用来区分不同的层级，就像文件系统一样</li><li><code>*</code> 是多层匹配通配符，例如使用 <strong>foo&#x2F;bar&#x2F;*</strong> 可以匹配下列主题：<ul><li>foo&#x2F;bar</li><li>foo&#x2F;bar&#x2F;baz</li><li>foo&#x2F;bar&#x2F;bat&#x2F;yop</li></ul></li><li><code>+</code> 是单层匹配通配符，例如使用 <strong>foo&#x2F;+&#x2F;baz</strong> 可以匹配下列主题：<ul><li>foo&#x2F;bar&#x2F;baz</li><li>foo&#x2F;zod&#x2F;baz</li><li>foo&#x2F;nop&#x2F;baz</li></ul></li></ul><p>主题和消息队列有一些类似的特性，但是主题更简单，更加轻量级，同时功能也更弱。</p><h1 id="特里树定义"><a href="#特里树定义" class="headerlink" title="特里树定义"></a>特里树定义</h1><p>现在，我们开始定义我们的 <strong>特里树(trie)</strong> ，这将是我们用来存储主题的数据结构。特里树是这样一种结构，他的每一个节点都带有一个字符，从根到节点的所有字符就组成一个key，数据则是关联在key对应的位置上，在最糟糕的情况下，插入和查找的复杂度为 O(m)，其中 m 是键的长度。特里树的主要优点是可以方便的进行前缀匹配。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>src/trie.h</span></div><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdbool.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"list.h"</span></span><span class="token comment">// 向用户提供类型 Trie</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">trie</span> Trie<span class="token punctuation">;</span><span class="token comment">// 树节点, 包括一个子节点列表 children</span><span class="token comment">// 如果是终端节点, 会在data中存储数据</span><span class="token keyword">struct</span> <span class="token class-name">trie_node</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> chr<span class="token punctuation">;</span>    List <span class="token operator">*</span>children<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 特里树类型, 包括根节点和数据数量</span><span class="token keyword">struct</span> <span class="token class-name">trie</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">trie_node</span> <span class="token operator">*</span>root<span class="token punctuation">;</span>    <span class="token class-name">size_t</span> size<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 创建一个新的字符节点</span><span class="token keyword">struct</span> <span class="token class-name">trie_node</span> <span class="token operator">*</span><span class="token function">trie_create_node</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建一个新的特里树</span><span class="token keyword">struct</span> <span class="token class-name">trie</span> <span class="token operator">*</span><span class="token function">trie_create</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 特里树初始化</span><span class="token keyword">void</span> <span class="token function">trie_init</span><span class="token punctuation">(</span>Trie <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 当前大小</span><span class="token class-name">size_t</span> <span class="token function">trie_size</span><span class="token punctuation">(</span><span class="token keyword">const</span> Trie <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* * 叶子代表有关联数据的节点 *           . *          / \ *         h   s: s -> value *        / \ *       e   k: hk -> value *      / *     l: hel -> value * * 上例中有三个键值对： * - s   -> value * - hk  -> value * - hel -> value */</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">trie_insert</span><span class="token punctuation">(</span>Trie <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bool <span class="token function">trie_delete</span><span class="token punctuation">(</span>Trie <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 查找节点, 查找成功时返回 true, 否则 false</span><span class="token comment">// 第三个参数作为返回值, 提供指向查找结果的指针, 未找到时值为NULL</span>bool <span class="token function">trie_find</span><span class="token punctuation">(</span><span class="token keyword">const</span> Trie <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 释放一个节点, 同时更新size</span><span class="token keyword">void</span> <span class="token function">trie_node_free</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">trie_node</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token class-name">size_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">trie_release</span><span class="token punctuation">(</span>Trie <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 通过一个前缀删除所有能匹配的节点</span><span class="token keyword">void</span> <span class="token function">trie_prefix_delete</span><span class="token punctuation">(</span>Trie <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 使用 mapfunc 处理树中的所有节点, 第四个参数是 mapfunc 可使用的参数</span><span class="token keyword">void</span> <span class="token function">trie_prefix_map_tuple</span><span class="token punctuation">(</span>Trie <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>mapfunc<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">trie_node</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="特里树性能"><a href="#特里树性能" class="headerlink" title="特里树性能"></a>特里树性能</h1><p>关于树节点的实现，其实有很多种不同的方法，最简单的一种就是在每一个节点上使用固定长度的数组，数组的大小就是完整的字母表大小，例如这样：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ALPHABET_SIZE</span> <span class="token expression"><span class="token number">94</span></span></span><span class="token comment">// 使用固定数组大小的树节点</span><span class="token keyword">struct</span> <span class="token class-name">trie_node</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">trie_node</span> <span class="token operator">*</span>children<span class="token punctuation">[</span>ALPHABET_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>除了可以对key进行范围查询（用以实现通配符功能）这个最大的优点外，特里树的另一个巨大优点是他基于哈希表或者说 B-Tree 的性能优势，能够在进行插入、删除和搜索时保持最坏为 O(L) 的时间复杂度（L是查询键的长度）。但这是有代价的，最明显的缺陷就是结构体自身的内存消耗。</p><p>在上面的例子中，我们的字母表长度是96，意味着从<code>空格</code> 开始一直到 <code>~</code> 结束的96个代表不同字符的 <code>NULL</code> 指针都会被存在 <code>children</code> 中。在一个64位的机器上，每个指针需要使用8个byte，也就是说一个节点至少需要 96 * 8 &#x3D; 768 个字节的空间。我们举个简单的例子：</p><ul><li>插入一个key <code>foo</code></li><li>插入一个key <code>foot</code></li></ul><p>此时我们的根节点 <code>f</code> 有一个非空指针 <code>o</code>，<code>o</code> 也有一个非空指针 <code>o</code>，这里储存着键 <code>foo</code> 对应的值。第二个 <code>o</code> 还有一个非空指针 <code>t</code>， 他将存储键 <code>foot</code> 对应的值。所以我们总共会有4个节点，这意味着我们会有 4 * 96 &#x3D; 384 个指针，然后只使用了其中的4个，显然造成了很大的空间浪费。</p><p>当然，业界早有解决这个问题的方法，即减少空间浪费又保持着良好的时间复杂度性能，比如压缩特里树（compressed trie）和自适应特里树（adaptive trie）。</p><p>我们不去深入挖掘这些概念，就我们目前情况来看，可以想到三个解决方案：</p><ul><li><p>在特里树结构体本身（非节点）添加一个动态列表，每个节点都必须拥有一个指向该列表的指针，和一个<code>char children_idx[ALPHABET_SIZE]</code>数组，数组中保存了自己的子节点在列表中的索引（这句话译者没有理解，原文：Use a single dynamic array (vector) in the Trie structure, each node must have a pointer to that vector and an array char children_idx[ALPHABET_SIZE] which store the index in the main vector for each children，如果你能理解，请告诉我，感谢）</p></li><li><p>使用基于子节点数量增长存储空间的节点，例如当子节点数量 &lt;&#x3D; 4 时，可以使用固定长度为4的数组，当子节点数量增长时将数组更换为更大的数组并且重新关联子节点。</p></li><li><p>将每个节点上的定长数组更换为 <strong>链表</strong>， 在每次插入操作后保持排序，这样每次搜索的平均性能为 O(n&#x2F;2)，等同于 O(n)。</p></li></ul><p>恰好我们在上个部分中实现了基于链表的列表，接下来就让我们使用第三种方案来实现我们的特里树。</p><h1 id="特里树实现"><a href="#特里树实现" class="headerlink" title="特里树实现"></a>特里树实现</h1><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>src/trie.c</span></div><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;assert.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"list.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"trie.h"</span></span><span class="token comment">// 合并两个输入的链表为一个链表, 并从小到大排序</span><span class="token comment">// 要求输入的两个链表都是已经被从小到大排序</span><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">list_node</span> <span class="token operator">*</span><span class="token function">merge_tnode_list</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">list_node</span> <span class="token operator">*</span>list1<span class="token punctuation">,</span>                                          <span class="token keyword">struct</span> <span class="token class-name">list_node</span> <span class="token operator">*</span>list2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">list_node</span> dummy_head <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token operator">*</span>tail <span class="token operator">=</span> <span class="token operator">&amp;</span>dummy_head<span class="token punctuation">;</span>    <span class="token comment">// 每次都取 l1 或 l2 中较小的那个, 循环操作</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>list1 <span class="token operator">&amp;&amp;</span> list2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 使用char比较大小</span>        <span class="token keyword">char</span> chr1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">trie_node</span> <span class="token operator">*</span><span class="token punctuation">)</span> list1<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token operator">-></span>chr<span class="token punctuation">;</span>        <span class="token keyword">char</span> chr2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">trie_node</span> <span class="token operator">*</span><span class="token punctuation">)</span> list2<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token operator">-></span>chr<span class="token punctuation">;</span>        <span class="token keyword">struct</span> <span class="token class-name">list_node</span> <span class="token operator">*</span><span class="token operator">*</span>min <span class="token operator">=</span> chr1 <span class="token operator">&lt;=</span> chr2 <span class="token operator">?</span> <span class="token operator">&amp;</span>list1 <span class="token operator">:</span> <span class="token operator">&amp;</span>list2<span class="token punctuation">;</span>        <span class="token keyword">struct</span> <span class="token class-name">list_node</span> <span class="token operator">*</span>next <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>min<span class="token punctuation">)</span><span class="token operator">-></span>next<span class="token punctuation">;</span>        tail <span class="token operator">=</span> tail<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token operator">*</span>min<span class="token punctuation">;</span>        <span class="token operator">*</span>min <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    tail<span class="token operator">-></span>next <span class="token operator">=</span> list1 <span class="token operator">?</span> list1 <span class="token operator">:</span> list2<span class="token punctuation">;</span>    <span class="token keyword">return</span> dummy_head<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 被递归调用, 将链表按照从小到大顺序排序</span><span class="token keyword">struct</span> <span class="token class-name">list_node</span> <span class="token operator">*</span><span class="token function">merge_sort_tnode</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">list_node</span> <span class="token operator">*</span>head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">list_node</span> <span class="token operator">*</span>list1 <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>list1 <span class="token operator">||</span> <span class="token operator">!</span>list1<span class="token operator">-></span>next<span class="token punctuation">)</span>        <span class="token keyword">return</span> list1<span class="token punctuation">;</span>    <span class="token comment">// 从中分开</span>    <span class="token keyword">struct</span> <span class="token class-name">list_node</span> <span class="token operator">*</span>list2 <span class="token operator">=</span> <span class="token function">bisect_list</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">merge_tnode_list</span><span class="token punctuation">(</span><span class="token function">merge_sort_tnode</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">merge_sort_tnode</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 通过给定的 val 搜索链表中的 trie_node, 最糟糕情况下的时间复杂度是 O(n)</span><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">list_node</span> <span class="token operator">*</span><span class="token function">linear_search</span><span class="token punctuation">(</span><span class="token keyword">const</span> List <span class="token operator">*</span>list<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>list <span class="token operator">||</span> list<span class="token operator">-></span>len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">list_node</span> <span class="token operator">*</span>cur <span class="token operator">=</span> list<span class="token operator">-></span>head<span class="token punctuation">;</span> cur <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> cur <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">trie_node</span> <span class="token operator">*</span><span class="token punctuation">)</span> cur<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token operator">-></span>chr <span class="token operator">==</span> value<span class="token punctuation">)</span>            <span class="token keyword">return</span> cur<span class="token punctuation">;</span>        <span class="token comment">// 链表内部的节点是按照 chr 排序的，因此当大于 value 时无需继续搜索</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">trie_node</span> <span class="token operator">*</span><span class="token punctuation">)</span> cur<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token operator">-></span>chr <span class="token operator">></span> value<span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 辅助比较函数, 传入两个 list_node, 当其中的 trie_node->chr 相等时返回0, 否则返回1</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">with_char</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg1<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>arg2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">trie_node</span> <span class="token operator">*</span>tn1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">list_node</span> <span class="token operator">*</span><span class="token punctuation">)</span> arg1<span class="token punctuation">)</span><span class="token operator">-></span>data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">trie_node</span> <span class="token operator">*</span>tn2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">list_node</span> <span class="token operator">*</span><span class="token punctuation">)</span> arg2<span class="token punctuation">)</span><span class="token operator">-></span>data<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tn1<span class="token operator">-></span>chr <span class="token operator">==</span> tn2<span class="token operator">-></span>chr<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 判断 trie_node 是否有子节点, 没有则认为 free</span><span class="token keyword">static</span> bool <span class="token function">trie_is_free_node</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">trie_node</span> <span class="token operator">*</span>node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> node<span class="token operator">-></span>children<span class="token operator">-></span>len <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> true <span class="token operator">:</span> false<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 从 node 开始, 通过传入的 prefix, 找到对应的节点</span><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">trie_node</span> <span class="token operator">*</span><span class="token function">trie_node_find</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">trie_node</span> <span class="token operator">*</span>node<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>prefix<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 结果, 最初指向 node</span>    <span class="token keyword">struct</span> <span class="token class-name">trie_node</span> <span class="token operator">*</span>retnode <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">trie_node</span> <span class="token operator">*</span><span class="token punctuation">)</span> node<span class="token punctuation">;</span>    <span class="token comment">// 遍历 prefix 向下查找</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> <span class="token operator">*</span>prefix<span class="token punctuation">;</span> prefix<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// O(n)</span>        <span class="token keyword">struct</span> <span class="token class-name">list_node</span> <span class="token operator">*</span>child <span class="token operator">=</span> <span class="token function">linear_search</span><span class="token punctuation">(</span>retnode<span class="token operator">-></span>children<span class="token punctuation">,</span> <span class="token operator">*</span>prefix<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 没找到</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>child<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        retnode <span class="token operator">=</span> child<span class="token operator">-></span>data<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> retnode<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 创建一个新节点</span><span class="token keyword">struct</span> <span class="token class-name">trie_node</span> <span class="token operator">*</span><span class="token function">trie_create_node</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">trie_node</span> <span class="token operator">*</span>new_node <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>new_node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>new_node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        new_node<span class="token operator">-></span>chr <span class="token operator">=</span> c<span class="token punctuation">;</span>        new_node<span class="token operator">-></span>data <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        new_node<span class="token operator">-></span>children <span class="token operator">=</span> <span class="token function">list_create</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> new_node<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 创建并初始化特里树, 当前 size 0</span>Trie <span class="token operator">*</span><span class="token function">trie_create</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Trie <span class="token operator">*</span>trie <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>trie<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">trie_init</span><span class="token punctuation">(</span>trie<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> trie<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">trie_init</span><span class="token punctuation">(</span>Trie <span class="token operator">*</span>trie<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    trie<span class="token operator">-></span>root <span class="token operator">=</span> <span class="token function">trie_create_node</span><span class="token punctuation">(</span><span class="token char">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    trie<span class="token operator">-></span>size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">size_t</span> <span class="token function">trie_size</span><span class="token punctuation">(</span><span class="token keyword">const</span> Trie <span class="token operator">*</span>trie<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> trie<span class="token operator">-></span>size<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 插入数据, 插入沿途的所有所需节点, 如果目标节点已经有数据则替换</span><span class="token comment">// return 被插入的数据</span><span class="token comment">// root 一般是根节点</span><span class="token comment">// key 插入位置目标键</span><span class="token comment">// data 要插入的数据内容</span><span class="token comment">// size 带入 size, 如新增数据则+1</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">trie_node_insert</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">trie_node</span> <span class="token operator">*</span>root<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>key<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token class-name">size_t</span> <span class="token operator">*</span>size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">trie_node</span> <span class="token operator">*</span>cursor <span class="token operator">=</span> root<span class="token punctuation">;</span>   <span class="token comment">// 上级节点</span>    <span class="token keyword">struct</span> <span class="token class-name">trie_node</span> <span class="token operator">*</span>cur_node <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment">// 当前节点</span>    <span class="token keyword">struct</span> <span class="token class-name">list_node</span> <span class="token operator">*</span>tmp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>      <span class="token comment">// 包裹当前节点的 list_node</span>    <span class="token comment">// 逐字符遍历 key</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> <span class="token operator">*</span>key<span class="token punctuation">;</span> key<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 我们使用一个 O(n) 复杂度的线性搜索器来搜索匹配的节点</span>        tmp <span class="token operator">=</span> <span class="token function">linear_search</span><span class="token punctuation">(</span>cursor<span class="token operator">-></span>children<span class="token punctuation">,</span> <span class="token operator">*</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 如果没有匹配, 我们会添加一个节点, 然后对所有的节点进行排序</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>tmp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            cur_node <span class="token operator">=</span> <span class="token function">trie_create_node</span><span class="token punctuation">(</span><span class="token operator">*</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            cursor<span class="token operator">-></span>children <span class="token operator">=</span> <span class="token function">list_push</span><span class="token punctuation">(</span>cursor<span class="token operator">-></span>children<span class="token punctuation">,</span> cur_node<span class="token punctuation">)</span><span class="token punctuation">;</span>            cursor<span class="token operator">-></span>children<span class="token operator">-></span>head <span class="token operator">=</span> <span class="token function">merge_sort_tnode</span><span class="token punctuation">(</span>cursor<span class="token operator">-></span>children<span class="token operator">-></span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 匹配成功, 进入下一层匹配</span>            <span class="token comment">// 如果此时 key 已经被阅读完, 后续直接使用此节点</span>            cur_node <span class="token operator">=</span> tmp<span class="token operator">-></span>data<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        cursor <span class="token operator">=</span> cur_node<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 如果新节点或此节点没有数据, 则记录size</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cursor<span class="token operator">-></span>data<span class="token punctuation">)</span>        <span class="token punctuation">(</span><span class="token operator">*</span>size<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span>    cursor<span class="token operator">-></span>data <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> data<span class="token punctuation">;</span>    <span class="token keyword">return</span> cursor<span class="token operator">-></span>data<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 删除 key 节点对应的数据, 同时递归的向上删除每一层不需要的节点（指既没有数据也没有子节点）</span><span class="token comment">// return 节点本身是否可被删除(如果没有子节点就可以删除)</span><span class="token comment">// node 寻找的起始节点, 一般用root</span><span class="token comment">// key 匹配键</span><span class="token comment">// size 当前树的大小</span><span class="token comment">// found 返回是否删除成功</span><span class="token keyword">static</span> bool <span class="token function">trie_node_recursive_delete</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">trie_node</span> <span class="token operator">*</span>node<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>key<span class="token punctuation">,</span>                                       <span class="token class-name">size_t</span> <span class="token operator">*</span>size<span class="token punctuation">,</span> bool <span class="token operator">*</span>found<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token comment">// 字符串已经递归到达尾部的情况</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>key <span class="token operator">==</span> <span class="token char">'\0'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-></span>data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 标记成功找到数据</span>            <span class="token operator">*</span>found <span class="token operator">=</span> true<span class="token punctuation">;</span>            <span class="token comment">// 释放资源（以下为作者原代码，译者觉得这里重复操作了）</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-></span>data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">free</span><span class="token punctuation">(</span>node<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                node<span class="token operator">-></span>data <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token function">free</span><span class="token punctuation">(</span>node<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            node<span class="token operator">-></span>data <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>            <span class="token comment">// 记录size</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>size <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token punctuation">(</span><span class="token operator">*</span>size<span class="token punctuation">)</span><span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token comment">// 如果没有子节点, 标记需要被删除</span>            <span class="token keyword">return</span> <span class="token function">trie_is_free_node</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 通过 key 逐字符匹配节点</span>        <span class="token keyword">struct</span> <span class="token class-name">list_node</span> <span class="token operator">*</span>cur <span class="token operator">=</span> <span class="token function">linear_search</span><span class="token punctuation">(</span>node<span class="token operator">-></span>children<span class="token punctuation">,</span> <span class="token operator">*</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cur<span class="token punctuation">)</span>            <span class="token keyword">return</span> false<span class="token punctuation">;</span>        <span class="token keyword">struct</span> <span class="token class-name">trie_node</span> <span class="token operator">*</span>child <span class="token operator">=</span> cur<span class="token operator">-></span>data<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">trie_node_recursive_delete</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> key <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> size<span class="token punctuation">,</span> found<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 从list中删除和当前剩余key后缀相同的节点</span>            <span class="token keyword">struct</span> <span class="token class-name">trie_node</span> t <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token operator">*</span>key<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token keyword">struct</span> <span class="token class-name">list_node</span> tmp <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token operator">&amp;</span>t<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token function">list_remove</span><span class="token punctuation">(</span>node<span class="token operator">-></span>children<span class="token punctuation">,</span> <span class="token operator">&amp;</span>tmp<span class="token punctuation">,</span> with_char<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 把被删除的节点释放掉</span>            <span class="token function">trie_node_free</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 递归, 逐级向上删除可以被删除的节点</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token operator">-></span>data <span class="token operator">&amp;&amp;</span> <span class="token function">trie_is_free_node</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 从根节点开始寻找目标节点, 提供目标节点的数据</span><span class="token comment">// return 是否查询成功</span><span class="token comment">// root 一般传入根节点</span><span class="token comment">// key 查询的键</span><span class="token comment">// ret 返回值 (使用双指针因此当无数据时 *ret 可以为NULL)</span><span class="token keyword">static</span> bool <span class="token function">trie_node_search</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">trie_node</span> <span class="token operator">*</span>root<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>key<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span>ret<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">trie_node</span> <span class="token operator">*</span>cursor <span class="token operator">=</span> <span class="token function">trie_node_find</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>ret <span class="token operator">=</span> <span class="token punctuation">(</span>cursor <span class="token operator">&amp;&amp;</span> cursor<span class="token operator">-></span>data<span class="token punctuation">)</span> <span class="token operator">?</span> cursor<span class="token operator">-></span>data <span class="token operator">:</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">!</span><span class="token operator">*</span>ret <span class="token operator">?</span> false <span class="token operator">:</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 插入数据</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">trie_insert</span><span class="token punctuation">(</span>Trie <span class="token operator">*</span>trie<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>key<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>trie <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">trie_node_insert</span><span class="token punctuation">(</span>trie<span class="token operator">-></span>root<span class="token punctuation">,</span> key<span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token operator">&amp;</span>trie<span class="token operator">-></span>size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 删除某个节点的数据 (会递归的删除上层不需要的节点)</span>bool <span class="token function">trie_delete</span><span class="token punctuation">(</span>Trie <span class="token operator">*</span>trie<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>trie <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    bool found <span class="token operator">=</span> false<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">trie_node_recursive_delete</span><span class="token punctuation">(</span>trie<span class="token operator">-></span>root<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>trie<span class="token operator">-></span>size<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>found<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> found<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 获得数据</span>bool <span class="token function">trie_find</span><span class="token punctuation">(</span><span class="token keyword">const</span> Trie <span class="token operator">*</span>trie<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>key<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span>ret<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>trie <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">trie_node_search</span><span class="token punctuation">(</span>trie<span class="token operator">-></span>root<span class="token punctuation">,</span> key<span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 使用前缀删除所有匹配的内容</span><span class="token comment">// 例如 prefix = "hello"</span><span class="token comment">// 会删除这些内容： hello hellot helloworld</span><span class="token keyword">void</span> <span class="token function">trie_prefix_delete</span><span class="token punctuation">(</span>Trie <span class="token operator">*</span>trie<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>prefix<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>trie <span class="token operator">&amp;&amp;</span> prefix<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 找到前缀对应的节点</span>    <span class="token keyword">struct</span> <span class="token class-name">trie_node</span> <span class="token operator">*</span>cursor <span class="token operator">=</span> <span class="token function">trie_node_find</span><span class="token punctuation">(</span>trie<span class="token operator">-></span>root<span class="token punctuation">,</span> prefix<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cursor<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token comment">// 如果没有子节点, 就直接删除这个节点即可</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cursor<span class="token operator">-></span>children<span class="token operator">-></span>len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">trie_delete</span><span class="token punctuation">(</span>trie<span class="token punctuation">,</span> prefix<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 如果有子节点</span>    <span class="token keyword">struct</span> <span class="token class-name">list_node</span> <span class="token operator">*</span>cur <span class="token operator">=</span> cursor<span class="token operator">-></span>children<span class="token operator">-></span>head<span class="token punctuation">;</span>    <span class="token comment">// 遍历</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> cur<span class="token punctuation">;</span> cur <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 递归的释放所有内容</span>        <span class="token function">trie_node_free</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>data<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>trie<span class="token operator">-></span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 并将子节点指针置空</span>        cur<span class="token operator">-></span>data <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">trie_delete</span><span class="token punctuation">(</span>trie<span class="token punctuation">,</span> prefix<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">list_clear</span><span class="token punctuation">(</span>cursor<span class="token operator">-></span>children<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 使用传入的函数处理每个节点, 将 node 作为首个节点逐层向下遍历, arg 允许作为函数的参数</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">trie_prefix_map_func2</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">trie_node</span> <span class="token operator">*</span>node<span class="token punctuation">,</span>                                  <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>mapfunc<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">trie_node</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">trie_is_free_node</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">mapfunc</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">struct</span> <span class="token class-name">list_node</span> <span class="token operator">*</span>child <span class="token operator">=</span> node<span class="token operator">-></span>children<span class="token operator">-></span>head<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> child<span class="token punctuation">;</span> child <span class="token operator">=</span> child<span class="token operator">-></span>next<span class="token punctuation">)</span>        <span class="token function">trie_prefix_map_func2</span><span class="token punctuation">(</span>child<span class="token operator">-></span>data<span class="token punctuation">,</span> mapfunc<span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// node 本身也会被应用</span>    <span class="token function">mapfunc</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 从前缀对应的节点开始调用 trie_prefix_map_func2</span><span class="token keyword">void</span> <span class="token function">trie_prefix_map_tuple</span><span class="token punctuation">(</span>Trie <span class="token operator">*</span>trie<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>prefix<span class="token punctuation">,</span>                           <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>mapfunc<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">trie_node</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>trie<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>prefix<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">trie_prefix_map_func2</span><span class="token punctuation">(</span>trie<span class="token operator">-></span>root<span class="token punctuation">,</span> mapfunc<span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 找到key对应的节点</span>        <span class="token keyword">struct</span> <span class="token class-name">trie_node</span> <span class="token operator">*</span>node <span class="token operator">=</span> <span class="token function">trie_node_find</span><span class="token punctuation">(</span>trie<span class="token operator">-></span>root<span class="token punctuation">,</span> prefix<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 没有匹配到的节点</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token comment">// 通过递归让node和所有的子节点都应用 mapfunc</span>        <span class="token function">trie_prefix_map_func2</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> mapfunc<span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 递归的, 从node开始向下全部释放并删除</span><span class="token keyword">void</span> <span class="token function">trie_node_free</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">trie_node</span> <span class="token operator">*</span>node<span class="token punctuation">,</span> <span class="token class-name">size_t</span> <span class="token operator">*</span>size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token comment">// 这里的递归处理删除所有子节点</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-></span>children<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">struct</span> <span class="token class-name">list_node</span> <span class="token operator">*</span>cur <span class="token operator">=</span> node<span class="token operator">-></span>children<span class="token operator">-></span>head<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> cur<span class="token punctuation">;</span> cur <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">)</span>            <span class="token function">trie_node_free</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>data<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">list_release</span><span class="token punctuation">(</span>node<span class="token operator">-></span>children<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        node<span class="token operator">-></span>children <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 译者并没有看明白这里？也许是某种编程技巧？</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-></span>data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">free</span><span class="token punctuation">(</span>node<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>size <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">(</span><span class="token operator">*</span>size<span class="token punctuation">)</span><span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-></span>data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">free</span><span class="token punctuation">(</span>node<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>size <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">(</span><span class="token operator">*</span>size<span class="token punctuation">)</span><span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 释放node本身</span>    <span class="token function">free</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 释放整个特里树</span><span class="token keyword">void</span> <span class="token function">trie_release</span><span class="token punctuation">(</span>Trie <span class="token operator">*</span>trie<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>trie<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">trie_node_free</span><span class="token punctuation">(</span>trie<span class="token operator">-></span>root<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>trie<span class="token operator">-></span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>trie<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>写到这里，我们的工具基本上够用了。现在我们的项目又多了三个模块：</p><figure><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">sol/ ├── src/ │    ├── mqtt.h |    ├── mqtt.c │    ├── network.h │    ├── network.c │    ├── list.h │    ├── list.c │    ├── hashtable.h │    ├── hashtable.c │    ├── trie.h │    ├── trie.c │    ├── util.h │    ├── util.c │    ├── pack.h │    └── pack.c ├── CHANGELOG ├── CMakeLists.txt ├── COPYING └── README.md<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>MQTT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络编程</tag>
      
      <tag>翻译</tag>
      
      <tag>物联网</tag>
      
      <tag>C</tag>
      
      <tag>数据结构</tag>
      
      <tag>MQTT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[翻译]Sol - 从零开始的MQTT broker - 第四部分：数据结构</title>
    <link href="/2023/12/27/translate-sol-4.html"/>
    <url>/2023/12/27/translate-sol-4.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>原文 <a href="https://codepr.github.io/posts/sol-mqtt-broker-p4/">Sol - An MQTT broker from scratch. Part 4 - Data structures</a></p></blockquote><span id="more"></span><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在继续实现所有的 <code>handler</code> 之前，我们先设计和实现一些最常用的数据结构，包括 <strong>哈希表(hashtable)<strong>，</strong>列表(list)</strong> 和 **特里树(trie)**。</p><p><strong>特里树</strong> 不是我们当前就用到的东西，但是在我们后续处理 <strong>主题</strong> 时会用到他。</p><p>也许实现这些数据结构这件事情对于我们这个项目来说有点过于底层了，也确实有很多成熟的实现可以拿来用。但是我个人比较喜欢在稍微有些规模的项目中自己实现数据结构，一方面是这样方便于之后随着项目需求对这些数据结构进行改进，另一方面是，实现数据结构的过程也确实是一个非常好的学习和探索的机会。</p><h1 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h1><p>让我们从一个简单的哈希表开始，哈希表本质上是一个数组，他使用哈希值（下图中的Hashval % Bucketsize）作为存储我们信息的索引，并且试图尽可能的减少冲突情况（例如两个key计算出了同样的哈希值）。</p><p><img src="/2023/12/27/translate-sol-4/hashtable.png" alt="哈希表示意"></p><p><code>Buckets</code> 是一个数组，一般情况下会是个动态扩容的数组，他通过 <code>key</code> 来关联存储的数据。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>src/hashtable.h</span></div><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdbool.h></span></span><span class="token comment">// 状态码</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">HASHTABLE_OK</span>   <span class="token expression"><span class="token number">0</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">HASHTABLE_ERR</span>  <span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">HASHTABLE_OOM</span>  <span class="token expression"><span class="token number">2</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">HASHTABLE_FULL</span> <span class="token expression"><span class="token number">3</span></span></span><span class="token comment">// 哈希表条目</span><span class="token comment">// key 键</span><span class="token comment">// val 存储的值</span><span class="token comment">// taken 表示此索引是否已经被占用, 如果是则使用 index + 1 的位置存储</span><span class="token keyword">struct</span> <span class="token class-name">hashtable_entry</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>key<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token operator">*</span>val<span class="token punctuation">;</span>    bool taken<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 哈希表结构体, 包括最大尺寸、当前尺寸以及存储的数据</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">hashtable</span> HashTable<span class="token punctuation">;</span><span class="token comment">// 创建哈希表的函数</span><span class="token comment">// 可以传入一个析构函数指针, 作为删除条目时释放资源的函数</span><span class="token comment">// 如果资源比较简单(基础类型或数据流), 可以传NULL, 可以采用默认函数释放</span>HashTable <span class="token operator">*</span><span class="token function">hashtable_create</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>destructor<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">hashtable_entry</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 通过对每个条目调用 `destructor` 来释放所有资源</span><span class="token keyword">void</span> <span class="token function">hashtable_release</span><span class="token punctuation">(</span>HashTable <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 哈希表当前大小</span><span class="token class-name">size_t</span> <span class="token function">hashtable_size</span><span class="token punctuation">(</span><span class="token keyword">const</span> HashTable <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 查看哈希表中是否已经存在此key</span><span class="token keyword">int</span> <span class="token function">hashtable_exists</span><span class="token punctuation">(</span>HashTable <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 插入数据, const char * 作为 key, void * 作为 value</span><span class="token keyword">int</span> <span class="token function">hashtable_put</span><span class="token punctuation">(</span>HashTable <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 通过 key 获取数据</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">hashtable_get</span><span class="token punctuation">(</span>HashTable <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 通过 key 删除数据</span><span class="token keyword">int</span> <span class="token function">hashtable_del</span><span class="token punctuation">(</span>HashTable <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 迭代所有的键值对, 使用传入的函数指针进行处理</span><span class="token keyword">int</span> <span class="token function">hashtable_map</span><span class="token punctuation">(</span>HashTable <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>func<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">hashtable_entry</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 迭代所有的键值对, 使用传入的函数指针进行处理, 并且可以额外传入一个参数</span><span class="token keyword">int</span> <span class="token function">hashtable_map2</span><span class="token punctuation">(</span>HashTable <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>func<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">hashtable_entry</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>我们通过 <code>typedef struct hashtable HashTable;</code> 这种方式将实际的哈希表的结构封装到的 <code>.c</code> 文件里，这样可以避免哈希表的使用者不使用我们提供的函数，而是直接访问我们的哈希表。这种方式可以被看作是c语言中的私有类。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>src/hashtable.c</span></div><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;assert.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"util.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"hashtable.h"</span></span><span class="token comment">// 哈希表结构</span><span class="token keyword">struct</span> <span class="token class-name">hashtable</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 最大容量</span>    <span class="token class-name">size_t</span> table_size<span class="token punctuation">;</span>    <span class="token comment">// 当前数据量</span>    <span class="token class-name">size_t</span> size<span class="token punctuation">;</span>    <span class="token comment">// 析构函数指针</span>    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>destructor<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">hashtable_entry</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 条目数组</span>    <span class="token keyword">struct</span> <span class="token class-name">hashtable_entry</span> <span class="token operator">*</span>entries<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INITIAL_SIZE <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> MAX_CHAIN_LENGTH <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> KNUTH_PRIME <span class="token operator">=</span> <span class="token number">2654435761</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token function">crc32</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 通过输入的key 计算其在哈希表中的序号</span><span class="token comment">// 此处仅进行数字运算, 不考虑冲突情况</span><span class="token keyword">static</span> <span class="token class-name">uint64_t</span> <span class="token function">hashtable_hash_int</span><span class="token punctuation">(</span>HashTable <span class="token operator">*</span>m<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>keystr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>m <span class="token operator">&amp;&amp;</span> keystr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">uint64_t</span> key <span class="token operator">=</span> <span class="token function">crc32</span><span class="token punctuation">(</span>keystr<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> keystr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* Robert Jenkins' 32 bit Mix Function */</span>    key <span class="token operator">+=</span> <span class="token punctuation">(</span>key <span class="token operator">&lt;&lt;</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    key <span class="token operator">^=</span> <span class="token punctuation">(</span>key <span class="token operator">>></span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    key <span class="token operator">+=</span> <span class="token punctuation">(</span>key <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    key <span class="token operator">^=</span> <span class="token punctuation">(</span>key <span class="token operator">>></span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    key <span class="token operator">+=</span> <span class="token punctuation">(</span>key <span class="token operator">&lt;&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    key <span class="token operator">^=</span> <span class="token punctuation">(</span>key <span class="token operator">>></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    key <span class="token operator">+=</span> <span class="token punctuation">(</span>key <span class="token operator">&lt;&lt;</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    key <span class="token operator">^=</span> <span class="token punctuation">(</span>key <span class="token operator">>></span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* Knuth's Multiplicative Method */</span>    key <span class="token operator">=</span> <span class="token punctuation">(</span>key <span class="token operator">>></span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">*</span> KNUTH_PRIME<span class="token punctuation">;</span>    <span class="token keyword">return</span> key <span class="token operator">%</span> m<span class="token operator">-></span>table_size<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 通过输入的key 计算其在哈希表中的序号</span><span class="token comment">// 此处考虑了冲突情况</span><span class="token comment">// 如果哈希表已经满了, 返回 -HASHTABLE_FULL</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">hashtable_hash</span><span class="token punctuation">(</span>HashTable <span class="token operator">*</span>table<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>table <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 用量超过总额的 1/2 视为满</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>table<span class="token operator">-></span>size <span class="token operator">>=</span> <span class="token punctuation">(</span>table<span class="token operator">-></span>table_size <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token operator">-</span>HASHTABLE_FULL<span class="token punctuation">;</span>    <span class="token comment">// 计算序号</span>    <span class="token class-name">uint64_t</span> curr <span class="token operator">=</span> <span class="token function">hashtable_hash_int</span><span class="token punctuation">(</span>table<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>k<span class="token punctuation">,</span> <span class="token operator">*</span>currk<span class="token punctuation">;</span>    <span class="token comment">// 避免序号冲突的情况</span>    <span class="token comment">// 最大重复 MAX_CHAIN_LENGTH 次</span>    <span class="token comment">// 意味着视冲突情况, key 被保存在 curr ~ curr + MAX_CHAIN_LENGTH 这个范围中某一点</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MAX_CHAIN_LENGTH<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 序号未被占用直接返回</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>table<span class="token operator">-></span>entries<span class="token punctuation">[</span>curr<span class="token punctuation">]</span><span class="token punctuation">.</span>taken <span class="token operator">==</span> false<span class="token punctuation">)</span>            <span class="token keyword">return</span> curr<span class="token punctuation">;</span>        k <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> table<span class="token operator">-></span>entries<span class="token punctuation">[</span>curr<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">;</span>        currk <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> key<span class="token punctuation">;</span>        <span class="token comment">// 传入的 key 已存在的情况, 返回相同 key 的序号</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>table<span class="token operator">-></span>entries<span class="token punctuation">[</span>curr<span class="token punctuation">]</span><span class="token punctuation">.</span>taken <span class="token operator">==</span> true <span class="token operator">&amp;&amp;</span> <span class="token function">STREQ</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> currk<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> true<span class="token punctuation">)</span>            <span class="token keyword">return</span> curr<span class="token punctuation">;</span>        curr <span class="token operator">=</span> <span class="token punctuation">(</span>curr <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> table<span class="token operator">-></span>table_size<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token operator">-</span>HASHTABLE_FULL<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 扩容, 容量 * 2, 重新排布所有的内容</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">hashtable_rehash</span><span class="token punctuation">(</span>HashTable <span class="token operator">*</span>table<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>table<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">size_t</span> old_size<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">hashtable_entry</span> <span class="token operator">*</span>curr<span class="token punctuation">;</span>    <span class="token comment">// 新数组空间</span>    <span class="token keyword">struct</span> <span class="token class-name">hashtable_entry</span> <span class="token operator">*</span>temp <span class="token operator">=</span>        <span class="token function">calloc</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> table<span class="token operator">-></span>table_size<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>temp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>temp<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token operator">-</span>HASHTABLE_ERR<span class="token punctuation">;</span>    <span class="token comment">// 暂存旧数组</span>    curr <span class="token operator">=</span> table<span class="token operator">-></span>entries<span class="token punctuation">;</span>    <span class="token comment">// 指向新数组</span>    table<span class="token operator">-></span>entries <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token comment">// 记录空间扩容</span>    old_size <span class="token operator">=</span> table<span class="token operator">-></span>table_size<span class="token punctuation">;</span>    table<span class="token operator">-></span>table_size <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> table<span class="token operator">-></span>table_size<span class="token punctuation">;</span>    table<span class="token operator">-></span>size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> status<span class="token punctuation">;</span>    <span class="token comment">// 重新排布所有条目</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> old_size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>curr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>taken <span class="token operator">==</span> false<span class="token punctuation">)</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token comment">// 也很简单, 就是直接用 put 重新放一遍</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>status <span class="token operator">=</span> <span class="token function">hashtable_put</span><span class="token punctuation">(</span>table<span class="token punctuation">,</span> curr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">,</span> curr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> HASHTABLE_OK<span class="token punctuation">)</span>            <span class="token keyword">return</span> status<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 释放旧数组</span>    <span class="token function">free</span><span class="token punctuation">(</span>curr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> HASHTABLE_OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 默认的释放条目函数</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">destroy_entry</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">hashtable_entry</span> <span class="token operator">*</span>entry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>entry<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token operator">-</span>HASHTABLE_ERR<span class="token punctuation">;</span>    <span class="token comment">// 释放 key</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>entry<span class="token operator">-></span>key<span class="token punctuation">)</span>        <span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> entry<span class="token operator">-></span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 释放 val</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>entry<span class="token operator">-></span>val<span class="token punctuation">)</span>        <span class="token function">free</span><span class="token punctuation">(</span>entry<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> HASHTABLE_OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 创建一个空的哈希表</span><span class="token comment">// 新创建的哈希表被分配到堆中, 用完后必须手动释放</span>HashTable <span class="token operator">*</span><span class="token function">hashtable_create</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>destructor<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">hashtable_entry</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 创建哈希表</span>    HashTable <span class="token operator">*</span>table <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>HashTable<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>table<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token comment">// 初始化条目数组</span>    table<span class="token operator">-></span>entries <span class="token operator">=</span> <span class="token function">calloc</span><span class="token punctuation">(</span>INITIAL_SIZE<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">hashtable_entry</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>table<span class="token operator">-></span>entries<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">hashtable_release</span><span class="token punctuation">(</span>table<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 选择析构函数</span>    table<span class="token operator">-></span>destructor <span class="token operator">=</span> destructor <span class="token operator">?</span> destructor <span class="token operator">:</span> destroy_entry<span class="token punctuation">;</span>    <span class="token comment">// 初始化数据</span>    table<span class="token operator">-></span>table_size <span class="token operator">=</span> INITIAL_SIZE<span class="token punctuation">;</span>    table<span class="token operator">-></span>size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> table<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 当前数据量</span><span class="token class-name">size_t</span> <span class="token function">hashtable_size</span><span class="token punctuation">(</span><span class="token keyword">const</span> HashTable <span class="token operator">*</span>table<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> table<span class="token operator">-></span>size<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 是否存在 key</span><span class="token keyword">int</span> <span class="token function">hashtable_exists</span><span class="token punctuation">(</span>HashTable <span class="token operator">*</span>table<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token operator">*</span>ret <span class="token operator">=</span> <span class="token function">hashtable_get</span><span class="token punctuation">(</span>table<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">!</span>ret <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 添加数据, 如果 key 的哈希值重复则序号 +1</span><span class="token keyword">int</span> <span class="token function">hashtable_put</span><span class="token punctuation">(</span>HashTable <span class="token operator">*</span>table<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>key<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>table <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 获得可以存储的序号</span>    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">hashtable_hash</span><span class="token punctuation">(</span>table<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token punctuation">)</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 如果满了</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> <span class="token operator">-</span>HASHTABLE_FULL<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 尝试扩容</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hashtable_rehash</span><span class="token punctuation">(</span>table<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span>HASHTABLE_ERR<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token operator">-</span>HASHTABLE_ERR<span class="token punctuation">;</span>        index <span class="token operator">=</span> <span class="token function">hashtable_hash</span><span class="token punctuation">(</span>table<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token punctuation">)</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 放置内容</span>    table<span class="token operator">-></span>entries<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>    table<span class="token operator">-></span>entries<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>    <span class="token comment">// 标记使用, 如果是新增, 还需要添加计数</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>table<span class="token operator">-></span>entries<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>taken <span class="token operator">==</span> false<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        table<span class="token operator">-></span>entries<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>taken <span class="token operator">=</span> true<span class="token punctuation">;</span>        table<span class="token operator">-></span>size<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 译者觉得这里有一个问题, 当 put 使用了重复的 key 时, index会是这个 key 实际存放的索引</span>    <span class="token comment">// 之后对 key 和 val 进行了赋值, 但是如果 key 是存在的, 那么原来 entry 中的 key 和 val 没有被释放</span>    <span class="token keyword">return</span> HASHTABLE_OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 通过key获得val</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">hashtable_get</span><span class="token punctuation">(</span>HashTable <span class="token operator">*</span>table<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>table <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 查 key 哈希值对应的索引</span>    <span class="token class-name">uint64_t</span> curr <span class="token operator">=</span> <span class="token function">hashtable_hash_int</span><span class="token punctuation">(</span>table<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token punctuation">)</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 查 key 实际对应的索引</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MAX_CHAIN_LENGTH<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>table<span class="token operator">-></span>entries<span class="token punctuation">[</span>curr<span class="token punctuation">]</span><span class="token punctuation">.</span>taken <span class="token operator">==</span> true<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">STREQ</span><span class="token punctuation">(</span>table<span class="token operator">-></span>entries<span class="token punctuation">[</span>curr<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> true<span class="token punctuation">)</span>                <span class="token keyword">return</span> table<span class="token operator">-></span>entries<span class="token punctuation">[</span>curr<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        curr <span class="token operator">=</span> <span class="token punctuation">(</span>curr <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> table<span class="token operator">-></span>table_size<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 删除一个条目</span><span class="token keyword">int</span> <span class="token function">hashtable_del</span><span class="token punctuation">(</span>HashTable <span class="token operator">*</span>table<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>table <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 哈希值对应的索引</span>    <span class="token class-name">uint64_t</span> curr <span class="token operator">=</span> <span class="token function">hashtable_hash_int</span><span class="token punctuation">(</span>table<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token punctuation">)</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 找到实际 key 的索引</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MAX_CHAIN_LENGTH<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 有数据</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>table<span class="token operator">-></span>entries<span class="token punctuation">[</span>curr<span class="token punctuation">]</span><span class="token punctuation">.</span>taken <span class="token operator">==</span> true<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 且 key 一致</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">STREQ</span><span class="token punctuation">(</span>table<span class="token operator">-></span>entries<span class="token punctuation">[</span>curr<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> true<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 标记无数据</span>                table<span class="token operator">-></span>entries<span class="token punctuation">[</span>curr<span class="token punctuation">]</span><span class="token punctuation">.</span>taken <span class="token operator">=</span> false<span class="token punctuation">;</span>                <span class="token comment">// 记录尺寸</span>                table<span class="token operator">-></span>size<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token comment">// 使用析构释放</span>                table<span class="token operator">-></span><span class="token function">destructor</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>table<span class="token operator">-></span>entries<span class="token punctuation">[</span>curr<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> HASHTABLE_OK<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        curr <span class="token operator">=</span> <span class="token punctuation">(</span>curr <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> table<span class="token operator">-></span>table_size<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 未找到数据</span>    <span class="token keyword">return</span> <span class="token operator">-</span>HASHTABLE_ERR<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 通过传入的func迭代哈希表中的所有内容</span><span class="token keyword">int</span> <span class="token function">hashtable_map</span><span class="token punctuation">(</span>HashTable <span class="token operator">*</span>table<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>func<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">hashtable_entry</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 空表不处理</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>table <span class="token operator">||</span> table<span class="token operator">-></span>size <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token operator">-</span>HASHTABLE_ERR<span class="token punctuation">;</span>    <span class="token comment">// 就遍历</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> table<span class="token operator">-></span>table_size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>table<span class="token operator">-></span>entries<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>taken <span class="token operator">==</span> true<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 处理data</span>            <span class="token keyword">struct</span> <span class="token class-name">hashtable_entry</span> data <span class="token operator">=</span> table<span class="token operator">-></span>entries<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> status <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 要求传入函数正确时返回 HASHTABLE_OK</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">!=</span> HASHTABLE_OK<span class="token punctuation">)</span>                <span class="token keyword">return</span> status<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> HASHTABLE_OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 另一个迭代器, 支持一个参数</span><span class="token keyword">int</span> <span class="token function">hashtable_map2</span><span class="token punctuation">(</span>HashTable <span class="token operator">*</span>table<span class="token punctuation">,</span>                   <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>func<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">hashtable_entry</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                   <span class="token keyword">void</span> <span class="token operator">*</span>param<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>table <span class="token operator">||</span> table<span class="token operator">-></span>size <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token operator">-</span>HASHTABLE_ERR<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> table<span class="token operator">-></span>table_size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>table<span class="token operator">-></span>entries<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>taken <span class="token operator">==</span> true<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 区别就是带了参数</span>            <span class="token keyword">struct</span> <span class="token class-name">hashtable_entry</span> data <span class="token operator">=</span> table<span class="token operator">-></span>entries<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> status <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>data<span class="token punctuation">,</span> param<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">!=</span> HASHTABLE_OK<span class="token punctuation">)</span>                <span class="token keyword">return</span> status<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> HASHTABLE_OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 使用预定义的析构函数释放哈希表</span><span class="token comment">// 如果没有定义析构函数, 则使用默认函数 destroy_entry</span><span class="token keyword">void</span> <span class="token function">hashtable_release</span><span class="token punctuation">(</span>HashTable <span class="token operator">*</span>table<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>table<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">hashtable_map</span><span class="token punctuation">(</span>table<span class="token punctuation">,</span> table<span class="token operator">-></span>destructor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>table <span class="token operator">||</span> <span class="token operator">!</span>table<span class="token operator">-></span>entries<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>table<span class="token operator">-></span>entries<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>table<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* The implementation here was originally done by Gary S. Brown. Slighltly * modified by Pete Warden, without any imposition on the reuse of the code. */</span><span class="token comment">/* ============================================================= */</span><span class="token comment">/*  COPYRIGHT (C) 1986 Gary S. Brown.  You may use this program, or       */</span><span class="token comment">/*  code or tables extracted from it, as desired without restriction.     */</span><span class="token comment">/*                                                                        */</span><span class="token comment">/*  First, the polynomial itself and its table of feedback terms.  The    */</span><span class="token comment">/*  polynomial is                                                         */</span><span class="token comment">/*  X^32+X^26+X^23+X^22+X^16+X^12+X^11+X^10+X^8+X^7+X^5+X^4+X^2+X^1+X^0   */</span><span class="token comment">/*                                                                        */</span><span class="token comment">/*  Note that we take it "backwards" and put the highest-order term in    */</span><span class="token comment">/*  the lowest-order bit.  The X^32 term is "implied"; the LSB is the     */</span><span class="token comment">/*  X^31 term, etc.  The X^0 term (usually shown as "+1") results in      */</span><span class="token comment">/*  the MSB being 1.                                                      */</span><span class="token comment">/*                                                                        */</span><span class="token comment">/*  Note that the usual hardware shift register implementation, which     */</span><span class="token comment">/*  is what we're using (we're merely optimizing it by doing eight-bit    */</span><span class="token comment">/*  chunks at a time) shifts bits into the lowest-order term.  In our     */</span><span class="token comment">/*  implementation, that means shifting towards the right.  Why do we     */</span><span class="token comment">/*  do it this way?  Because the calculated CRC must be transmitted in    */</span><span class="token comment">/*  order from highest-order term to lowest-order term.  UARTs transmit   */</span><span class="token comment">/*  characters in order from LSB to MSB.  By storing the CRC this way,    */</span><span class="token comment">/*  we hand it to the UART in the order low-byte to high-byte; the UART   */</span><span class="token comment">/*  sends each low-bit to hight-bit; and the result is transmission bit   */</span><span class="token comment">/*  by bit from highest- to lowest-order term without requiring any bit   */</span><span class="token comment">/*  shuffling on our part.  Reception works similarly.                    */</span><span class="token comment">/*                                                                        */</span><span class="token comment">/*  The feedback terms table consists of 256, 32-bit entries.  Notes:     */</span><span class="token comment">/*                                                                        */</span><span class="token comment">/*      The table can be generated at runtime if desired; code to do so   */</span><span class="token comment">/*      is shown later.  It might not be obvious, but the feedback        */</span><span class="token comment">/*      terms simply represent the results of eight shift/xor opera-      */</span><span class="token comment">/*      tions for all combinations of data and CRC register values.       */</span><span class="token comment">/*                                                                        */</span><span class="token comment">/*      The values must be right-shifted by eight bits by the "updcrc"    */</span><span class="token comment">/*      logic; the shift must be unsigned (bring in zeroes).  On some     */</span><span class="token comment">/*      hardware you could probably optimize the shift in assembler by    */</span><span class="token comment">/*      using byte-swap instructions.                                     */</span><span class="token comment">/*      polynomial $edb88320                                              */</span><span class="token comment">/*                                                                        */</span><span class="token comment">/*  --------------------------------------------------------------------  */</span><span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> crc32_tab<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token number">0x00000000L</span><span class="token punctuation">,</span> <span class="token number">0x77073096L</span><span class="token punctuation">,</span> <span class="token number">0xee0e612cL</span><span class="token punctuation">,</span> <span class="token number">0x990951baL</span><span class="token punctuation">,</span> <span class="token number">0x076dc419L</span><span class="token punctuation">,</span>    <span class="token number">0x706af48fL</span><span class="token punctuation">,</span> <span class="token number">0xe963a535L</span><span class="token punctuation">,</span> <span class="token number">0x9e6495a3L</span><span class="token punctuation">,</span> <span class="token number">0x0edb8832L</span><span class="token punctuation">,</span> <span class="token number">0x79dcb8a4L</span><span class="token punctuation">,</span>    <span class="token number">0xe0d5e91eL</span><span class="token punctuation">,</span> <span class="token number">0x97d2d988L</span><span class="token punctuation">,</span> <span class="token number">0x09b64c2bL</span><span class="token punctuation">,</span> <span class="token number">0x7eb17cbdL</span><span class="token punctuation">,</span> <span class="token number">0xe7b82d07L</span><span class="token punctuation">,</span>    <span class="token number">0x90bf1d91L</span><span class="token punctuation">,</span> <span class="token number">0x1db71064L</span><span class="token punctuation">,</span> <span class="token number">0x6ab020f2L</span><span class="token punctuation">,</span> <span class="token number">0xf3b97148L</span><span class="token punctuation">,</span> <span class="token number">0x84be41deL</span><span class="token punctuation">,</span>    <span class="token number">0x1adad47dL</span><span class="token punctuation">,</span> <span class="token number">0x6ddde4ebL</span><span class="token punctuation">,</span> <span class="token number">0xf4d4b551L</span><span class="token punctuation">,</span> <span class="token number">0x83d385c7L</span><span class="token punctuation">,</span> <span class="token number">0x136c9856L</span><span class="token punctuation">,</span>    <span class="token number">0x646ba8c0L</span><span class="token punctuation">,</span> <span class="token number">0xfd62f97aL</span><span class="token punctuation">,</span> <span class="token number">0x8a65c9ecL</span><span class="token punctuation">,</span> <span class="token number">0x14015c4fL</span><span class="token punctuation">,</span> <span class="token number">0x63066cd9L</span><span class="token punctuation">,</span>    <span class="token number">0xfa0f3d63L</span><span class="token punctuation">,</span> <span class="token number">0x8d080df5L</span><span class="token punctuation">,</span> <span class="token number">0x3b6e20c8L</span><span class="token punctuation">,</span> <span class="token number">0x4c69105eL</span><span class="token punctuation">,</span> <span class="token number">0xd56041e4L</span><span class="token punctuation">,</span>    <span class="token number">0xa2677172L</span><span class="token punctuation">,</span> <span class="token number">0x3c03e4d1L</span><span class="token punctuation">,</span> <span class="token number">0x4b04d447L</span><span class="token punctuation">,</span> <span class="token number">0xd20d85fdL</span><span class="token punctuation">,</span> <span class="token number">0xa50ab56bL</span><span class="token punctuation">,</span>    <span class="token number">0x35b5a8faL</span><span class="token punctuation">,</span> <span class="token number">0x42b2986cL</span><span class="token punctuation">,</span> <span class="token number">0xdbbbc9d6L</span><span class="token punctuation">,</span> <span class="token number">0xacbcf940L</span><span class="token punctuation">,</span> <span class="token number">0x32d86ce3L</span><span class="token punctuation">,</span>    <span class="token number">0x45df5c75L</span><span class="token punctuation">,</span> <span class="token number">0xdcd60dcfL</span><span class="token punctuation">,</span> <span class="token number">0xabd13d59L</span><span class="token punctuation">,</span> <span class="token number">0x26d930acL</span><span class="token punctuation">,</span> <span class="token number">0x51de003aL</span><span class="token punctuation">,</span>    <span class="token number">0xc8d75180L</span><span class="token punctuation">,</span> <span class="token number">0xbfd06116L</span><span class="token punctuation">,</span> <span class="token number">0x21b4f4b5L</span><span class="token punctuation">,</span> <span class="token number">0x56b3c423L</span><span class="token punctuation">,</span> <span class="token number">0xcfba9599L</span><span class="token punctuation">,</span>    <span class="token number">0xb8bda50fL</span><span class="token punctuation">,</span> <span class="token number">0x2802b89eL</span><span class="token punctuation">,</span> <span class="token number">0x5f058808L</span><span class="token punctuation">,</span> <span class="token number">0xc60cd9b2L</span><span class="token punctuation">,</span> <span class="token number">0xb10be924L</span><span class="token punctuation">,</span>    <span class="token number">0x2f6f7c87L</span><span class="token punctuation">,</span> <span class="token number">0x58684c11L</span><span class="token punctuation">,</span> <span class="token number">0xc1611dabL</span><span class="token punctuation">,</span> <span class="token number">0xb6662d3dL</span><span class="token punctuation">,</span> <span class="token number">0x76dc4190L</span><span class="token punctuation">,</span>    <span class="token number">0x01db7106L</span><span class="token punctuation">,</span> <span class="token number">0x98d220bcL</span><span class="token punctuation">,</span> <span class="token number">0xefd5102aL</span><span class="token punctuation">,</span> <span class="token number">0x71b18589L</span><span class="token punctuation">,</span> <span class="token number">0x06b6b51fL</span><span class="token punctuation">,</span>    <span class="token number">0x9fbfe4a5L</span><span class="token punctuation">,</span> <span class="token number">0xe8b8d433L</span><span class="token punctuation">,</span> <span class="token number">0x7807c9a2L</span><span class="token punctuation">,</span> <span class="token number">0x0f00f934L</span><span class="token punctuation">,</span> <span class="token number">0x9609a88eL</span><span class="token punctuation">,</span>    <span class="token number">0xe10e9818L</span><span class="token punctuation">,</span> <span class="token number">0x7f6a0dbbL</span><span class="token punctuation">,</span> <span class="token number">0x086d3d2dL</span><span class="token punctuation">,</span> <span class="token number">0x91646c97L</span><span class="token punctuation">,</span> <span class="token number">0xe6635c01L</span><span class="token punctuation">,</span>    <span class="token number">0x6b6b51f4L</span><span class="token punctuation">,</span> <span class="token number">0x1c6c6162L</span><span class="token punctuation">,</span> <span class="token number">0x856530d8L</span><span class="token punctuation">,</span> <span class="token number">0xf262004eL</span><span class="token punctuation">,</span> <span class="token number">0x6c0695edL</span><span class="token punctuation">,</span>    <span class="token number">0x1b01a57bL</span><span class="token punctuation">,</span> <span class="token number">0x8208f4c1L</span><span class="token punctuation">,</span> <span class="token number">0xf50fc457L</span><span class="token punctuation">,</span> <span class="token number">0x65b0d9c6L</span><span class="token punctuation">,</span> <span class="token number">0x12b7e950L</span><span class="token punctuation">,</span>    <span class="token number">0x8bbeb8eaL</span><span class="token punctuation">,</span> <span class="token number">0xfcb9887cL</span><span class="token punctuation">,</span> <span class="token number">0x62dd1ddfL</span><span class="token punctuation">,</span> <span class="token number">0x15da2d49L</span><span class="token punctuation">,</span> <span class="token number">0x8cd37cf3L</span><span class="token punctuation">,</span>    <span class="token number">0xfbd44c65L</span><span class="token punctuation">,</span> <span class="token number">0x4db26158L</span><span class="token punctuation">,</span> <span class="token number">0x3ab551ceL</span><span class="token punctuation">,</span> <span class="token number">0xa3bc0074L</span><span class="token punctuation">,</span> <span class="token number">0xd4bb30e2L</span><span class="token punctuation">,</span>    <span class="token number">0x4adfa541L</span><span class="token punctuation">,</span> <span class="token number">0x3dd895d7L</span><span class="token punctuation">,</span> <span class="token number">0xa4d1c46dL</span><span class="token punctuation">,</span> <span class="token number">0xd3d6f4fbL</span><span class="token punctuation">,</span> <span class="token number">0x4369e96aL</span><span class="token punctuation">,</span>    <span class="token number">0x346ed9fcL</span><span class="token punctuation">,</span> <span class="token number">0xad678846L</span><span class="token punctuation">,</span> <span class="token number">0xda60b8d0L</span><span class="token punctuation">,</span> <span class="token number">0x44042d73L</span><span class="token punctuation">,</span> <span class="token number">0x33031de5L</span><span class="token punctuation">,</span>    <span class="token number">0xaa0a4c5fL</span><span class="token punctuation">,</span> <span class="token number">0xdd0d7cc9L</span><span class="token punctuation">,</span> <span class="token number">0x5005713cL</span><span class="token punctuation">,</span> <span class="token number">0x270241aaL</span><span class="token punctuation">,</span> <span class="token number">0xbe0b1010L</span><span class="token punctuation">,</span>    <span class="token number">0xc90c2086L</span><span class="token punctuation">,</span> <span class="token number">0x5768b525L</span><span class="token punctuation">,</span> <span class="token number">0x206f85b3L</span><span class="token punctuation">,</span> <span class="token number">0xb966d409L</span><span class="token punctuation">,</span> <span class="token number">0xce61e49fL</span><span class="token punctuation">,</span>    <span class="token number">0x5edef90eL</span><span class="token punctuation">,</span> <span class="token number">0x29d9c998L</span><span class="token punctuation">,</span> <span class="token number">0xb0d09822L</span><span class="token punctuation">,</span> <span class="token number">0xc7d7a8b4L</span><span class="token punctuation">,</span> <span class="token number">0x59b33d17L</span><span class="token punctuation">,</span>    <span class="token number">0x2eb40d81L</span><span class="token punctuation">,</span> <span class="token number">0xb7bd5c3bL</span><span class="token punctuation">,</span> <span class="token number">0xc0ba6cadL</span><span class="token punctuation">,</span> <span class="token number">0xedb88320L</span><span class="token punctuation">,</span> <span class="token number">0x9abfb3b6L</span><span class="token punctuation">,</span>    <span class="token number">0x03b6e20cL</span><span class="token punctuation">,</span> <span class="token number">0x74b1d29aL</span><span class="token punctuation">,</span> <span class="token number">0xead54739L</span><span class="token punctuation">,</span> <span class="token number">0x9dd277afL</span><span class="token punctuation">,</span> <span class="token number">0x04db2615L</span><span class="token punctuation">,</span>    <span class="token number">0x73dc1683L</span><span class="token punctuation">,</span> <span class="token number">0xe3630b12L</span><span class="token punctuation">,</span> <span class="token number">0x94643b84L</span><span class="token punctuation">,</span> <span class="token number">0x0d6d6a3eL</span><span class="token punctuation">,</span> <span class="token number">0x7a6a5aa8L</span><span class="token punctuation">,</span>    <span class="token number">0xe40ecf0bL</span><span class="token punctuation">,</span> <span class="token number">0x9309ff9dL</span><span class="token punctuation">,</span> <span class="token number">0x0a00ae27L</span><span class="token punctuation">,</span> <span class="token number">0x7d079eb1L</span><span class="token punctuation">,</span> <span class="token number">0xf00f9344L</span><span class="token punctuation">,</span>    <span class="token number">0x8708a3d2L</span><span class="token punctuation">,</span> <span class="token number">0x1e01f268L</span><span class="token punctuation">,</span> <span class="token number">0x6906c2feL</span><span class="token punctuation">,</span> <span class="token number">0xf762575dL</span><span class="token punctuation">,</span> <span class="token number">0x806567cbL</span><span class="token punctuation">,</span>    <span class="token number">0x196c3671L</span><span class="token punctuation">,</span> <span class="token number">0x6e6b06e7L</span><span class="token punctuation">,</span> <span class="token number">0xfed41b76L</span><span class="token punctuation">,</span> <span class="token number">0x89d32be0L</span><span class="token punctuation">,</span> <span class="token number">0x10da7a5aL</span><span class="token punctuation">,</span>    <span class="token number">0x67dd4accL</span><span class="token punctuation">,</span> <span class="token number">0xf9b9df6fL</span><span class="token punctuation">,</span> <span class="token number">0x8ebeeff9L</span><span class="token punctuation">,</span> <span class="token number">0x17b7be43L</span><span class="token punctuation">,</span> <span class="token number">0x60b08ed5L</span><span class="token punctuation">,</span>    <span class="token number">0xd6d6a3e8L</span><span class="token punctuation">,</span> <span class="token number">0xa1d1937eL</span><span class="token punctuation">,</span> <span class="token number">0x38d8c2c4L</span><span class="token punctuation">,</span> <span class="token number">0x4fdff252L</span><span class="token punctuation">,</span> <span class="token number">0xd1bb67f1L</span><span class="token punctuation">,</span>    <span class="token number">0xa6bc5767L</span><span class="token punctuation">,</span> <span class="token number">0x3fb506ddL</span><span class="token punctuation">,</span> <span class="token number">0x48b2364bL</span><span class="token punctuation">,</span> <span class="token number">0xd80d2bdaL</span><span class="token punctuation">,</span> <span class="token number">0xaf0a1b4cL</span><span class="token punctuation">,</span>    <span class="token number">0x36034af6L</span><span class="token punctuation">,</span> <span class="token number">0x41047a60L</span><span class="token punctuation">,</span> <span class="token number">0xdf60efc3L</span><span class="token punctuation">,</span> <span class="token number">0xa867df55L</span><span class="token punctuation">,</span> <span class="token number">0x316e8eefL</span><span class="token punctuation">,</span>    <span class="token number">0x4669be79L</span><span class="token punctuation">,</span> <span class="token number">0xcb61b38cL</span><span class="token punctuation">,</span> <span class="token number">0xbc66831aL</span><span class="token punctuation">,</span> <span class="token number">0x256fd2a0L</span><span class="token punctuation">,</span> <span class="token number">0x5268e236L</span><span class="token punctuation">,</span>    <span class="token number">0xcc0c7795L</span><span class="token punctuation">,</span> <span class="token number">0xbb0b4703L</span><span class="token punctuation">,</span> <span class="token number">0x220216b9L</span><span class="token punctuation">,</span> <span class="token number">0x5505262fL</span><span class="token punctuation">,</span> <span class="token number">0xc5ba3bbeL</span><span class="token punctuation">,</span>    <span class="token number">0xb2bd0b28L</span><span class="token punctuation">,</span> <span class="token number">0x2bb45a92L</span><span class="token punctuation">,</span> <span class="token number">0x5cb36a04L</span><span class="token punctuation">,</span> <span class="token number">0xc2d7ffa7L</span><span class="token punctuation">,</span> <span class="token number">0xb5d0cf31L</span><span class="token punctuation">,</span>    <span class="token number">0x2cd99e8bL</span><span class="token punctuation">,</span> <span class="token number">0x5bdeae1dL</span><span class="token punctuation">,</span> <span class="token number">0x9b64c2b0L</span><span class="token punctuation">,</span> <span class="token number">0xec63f226L</span><span class="token punctuation">,</span> <span class="token number">0x756aa39cL</span><span class="token punctuation">,</span>    <span class="token number">0x026d930aL</span><span class="token punctuation">,</span> <span class="token number">0x9c0906a9L</span><span class="token punctuation">,</span> <span class="token number">0xeb0e363fL</span><span class="token punctuation">,</span> <span class="token number">0x72076785L</span><span class="token punctuation">,</span> <span class="token number">0x05005713L</span><span class="token punctuation">,</span>    <span class="token number">0x95bf4a82L</span><span class="token punctuation">,</span> <span class="token number">0xe2b87a14L</span><span class="token punctuation">,</span> <span class="token number">0x7bb12baeL</span><span class="token punctuation">,</span> <span class="token number">0x0cb61b38L</span><span class="token punctuation">,</span> <span class="token number">0x92d28e9bL</span><span class="token punctuation">,</span>    <span class="token number">0xe5d5be0dL</span><span class="token punctuation">,</span> <span class="token number">0x7cdcefb7L</span><span class="token punctuation">,</span> <span class="token number">0x0bdbdf21L</span><span class="token punctuation">,</span> <span class="token number">0x86d3d2d4L</span><span class="token punctuation">,</span> <span class="token number">0xf1d4e242L</span><span class="token punctuation">,</span>    <span class="token number">0x68ddb3f8L</span><span class="token punctuation">,</span> <span class="token number">0x1fda836eL</span><span class="token punctuation">,</span> <span class="token number">0x81be16cdL</span><span class="token punctuation">,</span> <span class="token number">0xf6b9265bL</span><span class="token punctuation">,</span> <span class="token number">0x6fb077e1L</span><span class="token punctuation">,</span>    <span class="token number">0x18b74777L</span><span class="token punctuation">,</span> <span class="token number">0x88085ae6L</span><span class="token punctuation">,</span> <span class="token number">0xff0f6a70L</span><span class="token punctuation">,</span> <span class="token number">0x66063bcaL</span><span class="token punctuation">,</span> <span class="token number">0x11010b5cL</span><span class="token punctuation">,</span>    <span class="token number">0x8f659effL</span><span class="token punctuation">,</span> <span class="token number">0xf862ae69L</span><span class="token punctuation">,</span> <span class="token number">0x616bffd3L</span><span class="token punctuation">,</span> <span class="token number">0x166ccf45L</span><span class="token punctuation">,</span> <span class="token number">0xa00ae278L</span><span class="token punctuation">,</span>    <span class="token number">0xd70dd2eeL</span><span class="token punctuation">,</span> <span class="token number">0x4e048354L</span><span class="token punctuation">,</span> <span class="token number">0x3903b3c2L</span><span class="token punctuation">,</span> <span class="token number">0xa7672661L</span><span class="token punctuation">,</span> <span class="token number">0xd06016f7L</span><span class="token punctuation">,</span>    <span class="token number">0x4969474dL</span><span class="token punctuation">,</span> <span class="token number">0x3e6e77dbL</span><span class="token punctuation">,</span> <span class="token number">0xaed16a4aL</span><span class="token punctuation">,</span> <span class="token number">0xd9d65adcL</span><span class="token punctuation">,</span> <span class="token number">0x40df0b66L</span><span class="token punctuation">,</span>    <span class="token number">0x37d83bf0L</span><span class="token punctuation">,</span> <span class="token number">0xa9bcae53L</span><span class="token punctuation">,</span> <span class="token number">0xdebb9ec5L</span><span class="token punctuation">,</span> <span class="token number">0x47b2cf7fL</span><span class="token punctuation">,</span> <span class="token number">0x30b5ffe9L</span><span class="token punctuation">,</span>    <span class="token number">0xbdbdf21cL</span><span class="token punctuation">,</span> <span class="token number">0xcabac28aL</span><span class="token punctuation">,</span> <span class="token number">0x53b39330L</span><span class="token punctuation">,</span> <span class="token number">0x24b4a3a6L</span><span class="token punctuation">,</span> <span class="token number">0xbad03605L</span><span class="token punctuation">,</span>    <span class="token number">0xcdd70693L</span><span class="token punctuation">,</span> <span class="token number">0x54de5729L</span><span class="token punctuation">,</span> <span class="token number">0x23d967bfL</span><span class="token punctuation">,</span> <span class="token number">0xb3667a2eL</span><span class="token punctuation">,</span> <span class="token number">0xc4614ab8L</span><span class="token punctuation">,</span>    <span class="token number">0x5d681b02L</span><span class="token punctuation">,</span> <span class="token number">0x2a6f2b94L</span><span class="token punctuation">,</span> <span class="token number">0xb40bbe37L</span><span class="token punctuation">,</span> <span class="token number">0xc30c8ea1L</span><span class="token punctuation">,</span> <span class="token number">0x5a05df1bL</span><span class="token punctuation">,</span>    <span class="token number">0x2d02ef8dL</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 根据输入的字符串计算一个 64 位的 CRC</span><span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token function">crc32</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token class-name">uint64_t</span> crc32val<span class="token punctuation">;</span>    crc32val <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span>  i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        crc32val <span class="token operator">=</span> crc32_tab<span class="token punctuation">[</span><span class="token punctuation">(</span>crc32val <span class="token operator">^</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token punctuation">(</span>crc32val <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> crc32val<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>我们的哈希表使用 <code>knuth multiplicative</code> 方法将字符串转为CRC，另一个可用的方法是 <code>Murmur3</code>，但是我也不清楚什么才是最佳的哈希算法。</p><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><p>接下来我们会用到列表 <code>list</code>，虽然 <code>vector</code> 可以通过他的缓存友好性来提升一些性能，但是对于我们的需求来说也没有太大的收益。O(1)的数据插入复杂度对于我们来说完全足够使用了。我们的列表会基于一个单向链表，带有头部和尾部的指针，这样可以保证我们从两侧插入时的复杂度都为O(1)。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>src/list.h</span></div><code class="language-c"><span class="token comment">// 节点</span><span class="token keyword">struct</span> <span class="token class-name">list_node</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">list_node</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 列表</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">list</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">list_node</span> <span class="token operator">*</span>head<span class="token punctuation">;</span> <span class="token comment">// 头指针</span>    <span class="token keyword">struct</span> <span class="token class-name">list_node</span> <span class="token operator">*</span>tail<span class="token punctuation">;</span> <span class="token comment">// 尾指针</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> len<span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>destructor<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">list_node</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> List<span class="token punctuation">;</span><span class="token comment">// 比较函数接口, 用来比较两个节点</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>compare_func<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建列表</span>List <span class="token operator">*</span><span class="token function">list_create</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>destructor<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">list_node</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 释放链表, 通过一个 int 的标志来决定释放深度</span><span class="token comment">// 例如：判断是否需要释放所有的节点中的数据</span><span class="token keyword">void</span> <span class="token function">list_release</span><span class="token punctuation">(</span>List <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 当前大小</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token function">list_size</span><span class="token punctuation">(</span><span class="token keyword">const</span> List <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 清空链表, 但保留链表本身, 根据 int 判断是否释放节点中的数据</span><span class="token keyword">void</span> <span class="token function">list_clear</span><span class="token punctuation">(</span>List <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 在头部插入数据</span>List <span class="token operator">*</span><span class="token function">list_push</span><span class="token punctuation">(</span>List <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 在尾部插入数据</span>List <span class="token operator">*</span><span class="token function">list_push_back</span><span class="token punctuation">(</span>List <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 通过传入的比较函数, 删除和第二参数相同的节点</span><span class="token keyword">void</span> <span class="token function">list_remove</span><span class="token punctuation">(</span>List <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">list_node</span> <span class="token operator">*</span><span class="token punctuation">,</span> compare_func<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 删除一个节点并返回被删除的节点</span><span class="token keyword">struct</span> <span class="token class-name">list_node</span> <span class="token operator">*</span><span class="token function">list_remove_node</span><span class="token punctuation">(</span>List <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">,</span> compare_func<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 另一个比较函数接口, 用来进行合并或排序</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 再 cmp_func 计算的位置插入一个节点</span><span class="token keyword">struct</span> <span class="token class-name">list_node</span> <span class="token operator">*</span><span class="token function">list_sort_insert</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">list_node</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">list_node</span> <span class="token operator">*</span><span class="token punctuation">,</span> compare_func<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 将 list 从中间分为两份</span><span class="token keyword">struct</span> <span class="token class-name">list_node</span> <span class="token operator">*</span><span class="token function">bisect_list</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">list_node</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>src/list.c</span></div><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"list.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token comment">// 私有的删除节点函数</span><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">list_node</span> <span class="token operator">*</span><span class="token function">list_node_remove</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">list_node</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">list_node</span> <span class="token operator">*</span><span class="token punctuation">,</span> compare_func<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建列表</span>List <span class="token operator">*</span><span class="token function">list_create</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>destructor<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">list_node</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    List <span class="token operator">*</span>l <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>List<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>l<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token comment">// 默认值</span>    l<span class="token operator">-></span>head <span class="token operator">=</span> l<span class="token operator">-></span>tail <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    l<span class="token operator">-></span>len <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span>    <span class="token comment">// TODO 默认析构</span>    l<span class="token operator">-></span>destructor <span class="token operator">=</span> destructor<span class="token punctuation">;</span>    <span class="token keyword">return</span> l<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 释放列表</span><span class="token keyword">void</span> <span class="token function">list_release</span><span class="token punctuation">(</span>List <span class="token operator">*</span>l<span class="token punctuation">,</span> <span class="token keyword">int</span> deep<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>l<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">list_node</span> <span class="token operator">*</span>h <span class="token operator">=</span> l<span class="token operator">-></span>head<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">list_node</span> <span class="token operator">*</span>tmp<span class="token punctuation">;</span>    <span class="token comment">// 释放所有节点</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>l<span class="token operator">-></span>len<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        tmp <span class="token operator">=</span> h<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l<span class="token operator">-></span>destructor<span class="token punctuation">)</span>            l<span class="token operator">-></span><span class="token function">destructor</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>h<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 如果需要释放数据</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>h<span class="token operator">-></span>data <span class="token operator">&amp;&amp;</span> deep <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>                    <span class="token function">free</span><span class="token punctuation">(</span>h<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">free</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        h <span class="token operator">=</span> tmp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 释放列表本身</span>    <span class="token function">free</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token function">list_size</span><span class="token punctuation">(</span><span class="token keyword">const</span> List <span class="token operator">*</span>list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> list<span class="token operator">-></span>len<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 清空链表, 但保留链表本身, 根据 int 判断是否释放节点中的数据</span><span class="token keyword">void</span> <span class="token function">list_clear</span><span class="token punctuation">(</span>List <span class="token operator">*</span>l<span class="token punctuation">,</span> <span class="token keyword">int</span> deep<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>l <span class="token operator">||</span> <span class="token operator">!</span>l<span class="token operator">-></span>head<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">list_node</span> <span class="token operator">*</span>h <span class="token operator">=</span> l<span class="token operator">-></span>head<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">list_node</span> <span class="token operator">*</span>tmp<span class="token punctuation">;</span>    <span class="token comment">// 释放所有节点</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>l<span class="token operator">-></span>len<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        tmp <span class="token operator">=</span> h<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>h<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>h<span class="token operator">-></span>data <span class="token operator">&amp;&amp;</span> deep <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token function">free</span><span class="token punctuation">(</span>h<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">free</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        h <span class="token operator">=</span> tmp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    l<span class="token operator">-></span>head <span class="token operator">=</span> l<span class="token operator">-></span>tail <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    l<span class="token operator">-></span>len <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 插入一个数据到头部</span>List <span class="token operator">*</span><span class="token function">list_push</span><span class="token punctuation">(</span>List <span class="token operator">*</span>l<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">list_node</span> <span class="token operator">*</span>new_node <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">list_node</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>new_node<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    new_node<span class="token operator">-></span>data <span class="token operator">=</span> val<span class="token punctuation">;</span>    <span class="token comment">// 第一个数据即使头也是尾</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l<span class="token operator">-></span>len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        l<span class="token operator">-></span>head <span class="token operator">=</span> l<span class="token operator">-></span>tail <span class="token operator">=</span> new_node<span class="token punctuation">;</span>        new_node<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token comment">// 插入为头部</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        new_node<span class="token operator">-></span>next <span class="token operator">=</span> l<span class="token operator">-></span>head<span class="token punctuation">;</span>        l<span class="token operator">-></span>head <span class="token operator">=</span> new_node<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    l<span class="token operator">-></span>len<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> l<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 插入一个数据到尾部</span>List <span class="token operator">*</span><span class="token function">list_push_back</span><span class="token punctuation">(</span>List <span class="token operator">*</span>l<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">list_node</span> <span class="token operator">*</span>new_node <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">list_node</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>new_node<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    new_node<span class="token operator">-></span>data <span class="token operator">=</span> val<span class="token punctuation">;</span>    new_node<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l<span class="token operator">-></span>len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        l<span class="token operator">-></span>head <span class="token operator">=</span> l<span class="token operator">-></span>tail <span class="token operator">=</span> new_node<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        l<span class="token operator">-></span>tail<span class="token operator">-></span>next <span class="token operator">=</span> new_node<span class="token punctuation">;</span>        l<span class="token operator">-></span>tail <span class="token operator">=</span> new_node<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    l<span class="token operator">-></span>len<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> l<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 通过传入的比较函数, 删除一个节点</span><span class="token keyword">void</span> <span class="token function">list_remove</span><span class="token punctuation">(</span>List <span class="token operator">*</span>l<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">list_node</span> <span class="token operator">*</span>node<span class="token punctuation">,</span> compare_func cmp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>l <span class="token operator">||</span> <span class="token operator">!</span>node<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// list_node_remove 会递归的一层一层返回下一个节点指针, 并在其中去除被删除的节点</span>    l<span class="token operator">-></span>head <span class="token operator">=</span> <span class="token function">list_node_remove</span><span class="token punctuation">(</span>l<span class="token operator">-></span>head<span class="token punctuation">,</span> node<span class="token punctuation">,</span> cmp<span class="token punctuation">,</span> <span class="token operator">&amp;</span>counter<span class="token punctuation">)</span><span class="token punctuation">;</span>    l<span class="token operator">-></span>len <span class="token operator">-=</span> counter<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 删除节点的工具方法</span><span class="token comment">// return 递归用的返回, 删除成功后的那次调用会返回被删除节点的 next</span><span class="token comment">// head 传入遍历起点</span><span class="token comment">// node 需要删除的节点的样子</span><span class="token comment">// cmp 比较函数, 用来比较遍历的节点和传入的node</span><span class="token comment">// counter 被删除节点的数量, 0 或者 1</span><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">list_node</span> <span class="token operator">*</span><span class="token function">list_node_remove</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">list_node</span> <span class="token operator">*</span>head<span class="token punctuation">,</span>                                          <span class="token keyword">struct</span> <span class="token class-name">list_node</span> <span class="token operator">*</span>node<span class="token punctuation">,</span>                                          compare_func cmp<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>counter<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">cmp</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> node<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">struct</span> <span class="token class-name">list_node</span> <span class="token operator">*</span>tmp_next <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token comment">// 译者认为这里没有考虑节点的data也可能需要释放, 或者是作者觉得可以在cmp中释放？</span>        <span class="token function">free</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>        head <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token comment">// 匹配成功就 return 的话，这里实际只能删除第一个匹配的节点</span>        <span class="token punctuation">(</span><span class="token operator">*</span>counter<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> tmp_next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    head<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token function">list_node_remove</span><span class="token punctuation">(</span>head<span class="token operator">-></span>next<span class="token punctuation">,</span> node<span class="token punctuation">,</span> cmp<span class="token punctuation">,</span> counter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 删除一个节点的工具方法</span><span class="token comment">// return 递归的返回</span><span class="token comment">// head 查询起点</span><span class="token comment">// data 被删除的 node 的形状</span><span class="token comment">// ret 返回被删除的 node</span><span class="token comment">// cmp 比较函数</span><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">list_node</span> <span class="token operator">*</span><span class="token function">list_remove_single_node</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">list_node</span> <span class="token operator">*</span>head<span class="token punctuation">,</span>                                                 <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">,</span>                                                 <span class="token keyword">struct</span> <span class="token class-name">list_node</span> <span class="token operator">*</span><span class="token operator">*</span>ret<span class="token punctuation">,</span>                                                 compare_func cmp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">cmp</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token operator">*</span>ret<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">struct</span> <span class="token class-name">list_node</span> <span class="token operator">*</span>tmp_next <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token operator">*</span>ret <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">return</span> tmp_next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    head<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token function">list_remove_single_node</span><span class="token punctuation">(</span>head<span class="token operator">-></span>next<span class="token punctuation">,</span> data<span class="token punctuation">,</span> ret<span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 删除一个节点并返回被删除的节点</span><span class="token keyword">struct</span> <span class="token class-name">list_node</span> <span class="token operator">*</span><span class="token function">list_remove_node</span><span class="token punctuation">(</span>List <span class="token operator">*</span>list<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> compare_func cmp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token operator">-></span>len <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token operator">!</span>list<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">list_node</span> <span class="token operator">*</span>node <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token function">list_remove_single_node</span><span class="token punctuation">(</span>list<span class="token operator">-></span>head<span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token operator">&amp;</span>node<span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        list<span class="token operator">-></span>len<span class="token operator">--</span><span class="token punctuation">;</span>        node<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> node<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 在 cmp_func 计算的位置插入一个节点</span><span class="token keyword">struct</span> <span class="token class-name">list_node</span> <span class="token operator">*</span><span class="token function">list_sort_insert</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">list_node</span> <span class="token operator">*</span><span class="token operator">*</span>head<span class="token punctuation">,</span>                                   <span class="token keyword">struct</span> <span class="token class-name">list_node</span> <span class="token operator">*</span>new<span class="token punctuation">,</span> cmp cmp_func<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">*</span>head <span class="token operator">||</span> <span class="token function">cmp_func</span><span class="token punctuation">(</span><span class="token operator">*</span>head<span class="token punctuation">,</span> new<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        new<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token operator">*</span>head<span class="token punctuation">;</span>        <span class="token operator">*</span>head <span class="token operator">=</span> new<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">struct</span> <span class="token class-name">list_node</span> <span class="token operator">*</span>cur<span class="token punctuation">;</span>        cur <span class="token operator">=</span> <span class="token operator">*</span>head<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>cur<span class="token operator">-></span>next <span class="token operator">&amp;&amp;</span> <span class="token function">cmp_func</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>next<span class="token punctuation">,</span> new<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            cur <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>        new<span class="token operator">-></span>next <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>        cur<span class="token operator">-></span>next <span class="token operator">=</span> new<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token operator">*</span>head<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 返回一个靠近中间的 node, 并且已经将原 list 从此处截断</span><span class="token keyword">struct</span> <span class="token class-name">list_node</span> <span class="token operator">*</span><span class="token function">bisect_list</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">list_node</span> <span class="token operator">*</span>head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// fast 的移动速度是 slow 的两倍</span>    <span class="token comment">// prev 表示 slow的前一个节点, 也就是截取后的第一个 list 的最后一个节点</span>    <span class="token keyword">struct</span> <span class="token class-name">list_node</span> <span class="token operator">*</span>fast <span class="token operator">=</span> head<span class="token punctuation">,</span> <span class="token operator">*</span>slow <span class="token operator">=</span> head<span class="token punctuation">,</span> <span class="token operator">*</span>prev <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> fast<span class="token operator">-></span>next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        fast <span class="token operator">=</span> fast<span class="token operator">-></span>next<span class="token operator">-></span>next<span class="token punctuation">;</span>        prev <span class="token operator">=</span> slow<span class="token punctuation">;</span>        slow <span class="token operator">=</span> slow<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>prev <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        prev<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> slow<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>我们成功的实现了两个经典的数据结构，这样我们可以在项目中使用他们：</p><ul><li>哈希表</li><li>列表</li></ul><p>下一个要实现的数据结构是 <strong>特里树</strong>，他可以让我们轻松的维护我们的主题和主题的分层结构。</p>]]></content>
    
    
    <categories>
      
      <category>MQTT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络编程</tag>
      
      <tag>翻译</tag>
      
      <tag>物联网</tag>
      
      <tag>C</tag>
      
      <tag>数据结构</tag>
      
      <tag>MQTT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[翻译]Sol - 从零开始的MQTT broker - 第三部分：服务</title>
    <link href="/2023/12/22/translate-sol-3.html"/>
    <url>/2023/12/22/translate-sol-3.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>原文 <a href="https://codepr.github.io/posts/sol-mqtt-broker-p3/">Sol - An MQTT broker from scratch. Part 3 - Server</a></p></blockquote><span id="more"></span><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这一部分我们会实现我们程序中的服务功能，通过之前在 <a href="https://codepr.github.io/posts/sol-mqtt-broker-p2/">part-2</a> 中实现的 <code>network</code> 模块，我们可以比较轻松的接收并处理在 <a href="https://codepr.github.io/posts/sol-mqtt-broker/">part-1</a> 中定义好的各种 <code>MQTT</code> 数据包。</p><h1 id="服务端定义"><a href="#服务端定义" class="headerlink" title="服务端定义"></a>服务端定义</h1><p>我们的头文件非常简单，唯一向外提供的函数只有 <code>start_server</code>，他也只需要接收两个参数：</p><ul><li>一个IP地址</li><li>一个监听端口</li></ul><p>我们还需要定义创建 <strong>epoll</strong> 时使用的两个常量，一个是单次监听的最大事件数量，另一个是 <strong>epoll</strong> 监听的超时时间。这两个常量的定义以后我们也可以轻松的移动到配置模块里，暂时就先放在 <code>server</code> 的头文件。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>src/server.h</span></div><code class="language-c"><span class="token comment">// epoll 的默认配置</span><span class="token comment">// 最大监听 256 事件</span><span class="token comment">// -1 表示不超时, epoll 可以无限期的阻塞并监听</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">EPOLL_MAX_EVENTS</span>    <span class="token expression"><span class="token number">256</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">EPOLL_TIMEOUT</span>       <span class="token expression"><span class="token operator">-</span><span class="token number">1</span></span></span><span class="token comment">// 不同类型的错误码</span><span class="token comment">// client disconnection 客户端断开</span><span class="token comment">// error reading packet 读包错误</span><span class="token comment">// error packet sent exceeds size defined by configuration 包过大 (限制默认 2M)</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ERRCLIENTDC</span>         <span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ERRPACKETERR</span>        <span class="token expression"><span class="token number">2</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ERRMAXREQSIZE</span>       <span class="token expression"><span class="token number">3</span></span></span><span class="token comment">// handler 的返回值, 表示对客户端读取后的下一个动作是读还是写</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">REARM_R</span>             <span class="token expression"><span class="token number">0</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">REARM_W</span>             <span class="token expression"><span class="token number">1</span></span></span><span class="token comment">// 启动服务的函数</span><span class="token keyword">int</span> <span class="token function">start_server</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="服务端实现"><a href="#服务端实现" class="headerlink" title="服务端实现"></a>服务端实现</h1><p>实现的部分比我一开始预想的要庞大一些，所有我们所需的 <code>处理器(handler)</code> 和 回调函数都会在这里定义。所以我们首先来实现三个最基础的回调函数，这三个函数是任何服务器都必不可少的：</p><ul><li>用于建立连接的 <code>on_accept</code></li><li>用于读取事件的 <code>on_read</code></li><li>用于发送数据的 <code>on_write</code></li></ul><p>我们还需要定义一些关于MQTT包处理的 <code>handler</code>，同样使用一个数组保存，并且使 <code>handler</code> 在其中的序号等于包类型码。（这个方式我们已经用过好几次了）</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>src/server.c</span></div><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_POSIX_C_SOURCE</span> <span class="token expression"><span class="token number">200809L</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;errno.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/epoll.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"pack.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"util.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"mqtt.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"core.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"network.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"hashtable.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"config.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"server.h"</span></span><span class="token comment">/* Seconds in a Sol, easter egg */</span><span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">double</span> SOL_SECONDS <span class="token operator">=</span> <span class="token number">88775.24</span><span class="token punctuation">;</span><span class="token comment">// 服务器本身状态信息</span><span class="token comment">// 所有数据都会通过一个周期性回调发布</span><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">sol_info</span> info<span class="token punctuation">;</span><span class="token comment">// broker 的全局实例, 包括了主题树和客户端的哈希表</span><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">sol</span> sol<span class="token punctuation">;</span><span class="token comment">// 处理器接口</span><span class="token comment">// 内含客户端的 closure 与数据包 mqtt_packet</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> <span class="token function">handler</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">closure</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">union</span> mqtt_packet <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 包处理器, 每个函数负责处理对应名称的包</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">connect_handler</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">closure</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">union</span> mqtt_packet <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">disconnect_handler</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">closure</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">union</span> mqtt_packet <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">subscribe_handler</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">closure</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">union</span> mqtt_packet <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">unsubscribe_handler</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">closure</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">union</span> mqtt_packet <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">publish_handler</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">closure</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">union</span> mqtt_packet <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">puback_handler</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">closure</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">union</span> mqtt_packet <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">pubrec_handler</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">closure</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">union</span> mqtt_packet <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">pubrel_handler</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">closure</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">union</span> mqtt_packet <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">pubcomp_handler</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">closure</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">union</span> mqtt_packet <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">pingreq_handler</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">closure</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">union</span> mqtt_packet <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 处理器数组, 同样使用 type 的值作为索引</span><span class="token keyword">static</span> handler <span class="token operator">*</span>handlers<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token constant">NULL</span><span class="token punctuation">,</span>    connect_handler<span class="token punctuation">,</span>    <span class="token constant">NULL</span><span class="token punctuation">,</span>    publish_handler<span class="token punctuation">,</span>    puback_handler<span class="token punctuation">,</span>    pubrec_handler<span class="token punctuation">,</span>    pubrel_handler<span class="token punctuation">,</span>    pubcomp_handler<span class="token punctuation">,</span>    subscribe_handler<span class="token punctuation">,</span>    <span class="token constant">NULL</span><span class="token punctuation">,</span>    unsubscribe_handler<span class="token punctuation">,</span>    <span class="token constant">NULL</span><span class="token punctuation">,</span>    pingreq_handler<span class="token punctuation">,</span>    <span class="token constant">NULL</span><span class="token punctuation">,</span>    disconnect_handler<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 本 module 内部使用的 conn 结构体, 用来接收新连接</span><span class="token keyword">struct</span> <span class="token class-name">connection</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> ip<span class="token punctuation">[</span>INET_ADDRSTRLEN <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> fd<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// I/O closures, 关于三个服务器主要操作的回调</span><span class="token comment">// - 读取客户端发来的数据</span><span class="token comment">// - 向客户端写数据</span><span class="token comment">// - 接收新的客户端连接</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">on_read</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">evloop</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">on_write</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">evloop</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">on_accept</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">evloop</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 定时回调, 周期性发布服务器状态</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">publish_stats</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">evloop</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 从 sfd 接收一条新链接, 将他的 ip 和 fd 存入conn中</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">accept_new_client</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">connection</span> <span class="token operator">*</span>conn<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>conn<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">// 获得新链接</span>    <span class="token keyword">int</span> clientsock <span class="token operator">=</span> <span class="token function">accept_connection</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 没有获取成功的话</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>clientsock <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">// 就是检查一些新连接的属性</span>    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> addr<span class="token punctuation">;</span>    <span class="token class-name">socklen_t</span> addrlen <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getpeername</span><span class="token punctuation">(</span>clientsock<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>addr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>addrlen<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> ip_buff<span class="token punctuation">[</span>INET_ADDRSTRLEN <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">inet_ntop</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> <span class="token operator">&amp;</span>addr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">,</span> ip_buff<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ip_buff<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> sin<span class="token punctuation">;</span>    <span class="token class-name">socklen_t</span> sinlen <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>sin<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getsockname</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>sin<span class="token punctuation">,</span> <span class="token operator">&amp;</span>sinlen<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">// 赋值我们要的 ip 和 fd</span>    conn<span class="token operator">-></span>fd <span class="token operator">=</span> clientsock<span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>conn<span class="token operator">-></span>ip<span class="token punctuation">,</span> ip_buff<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// accept 的回调, 通过 sfd 获得 cfd, 然后对 cfd 添加 EPOLLIN 监听</span><span class="token comment">// loop evloop实例</span><span class="token comment">// arg server closure, 包括了 sfd 在其中, on_accept 其实就是 server closure 的 call 参数</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">on_accept</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">evloop</span> <span class="token operator">*</span>loop<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// arg 是 server closure</span>    <span class="token keyword">struct</span> <span class="token class-name">closure</span> <span class="token operator">*</span>server <span class="token operator">=</span> arg<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">connection</span> conn<span class="token punctuation">;</span>    <span class="token comment">// 获得 conn</span>    <span class="token function">accept_new_client</span><span class="token punctuation">(</span>server<span class="token operator">-></span>fd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 创建这个客户端的 closure</span>    <span class="token keyword">struct</span> <span class="token class-name">closure</span> <span class="token operator">*</span>client_closure <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>client_closure<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>client_closure<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token comment">// 填充内容</span>    client_closure<span class="token operator">-></span>fd <span class="token operator">=</span> conn<span class="token punctuation">.</span>fd<span class="token punctuation">;</span>    client_closure<span class="token operator">-></span>obj <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>                 <span class="token comment">// 闭包的主要对象, 这个项目中是 client 对象, 在第六部分定义</span>    client_closure<span class="token operator">-></span>payload <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    client_closure<span class="token operator">-></span>args <span class="token operator">=</span> client_closure<span class="token punctuation">;</span>      <span class="token comment">// 拿自己当回调参数</span>    client_closure<span class="token operator">-></span>call <span class="token operator">=</span> on_read<span class="token punctuation">;</span>             <span class="token comment">// 数据来时触发 on_read</span>    <span class="token function">generate_uuid</span><span class="token punctuation">(</span>client_closure<span class="token operator">-></span>closure_id<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 生成uuid</span>    <span class="token comment">// 保存在一个哈希表里</span>    <span class="token function">hashtable_put</span><span class="token punctuation">(</span>sol<span class="token punctuation">.</span>closures<span class="token punctuation">,</span> client_closure<span class="token operator">-></span>closure_id<span class="token punctuation">,</span> client_closure<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 将这个 closure 注册到 evloop, 事件是 EPOLLIN</span>    <span class="token function">evloop_add_callback</span><span class="token punctuation">(</span>loop<span class="token punctuation">,</span> client_closure<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 重置 server fd, 让其可以继续接收新链接</span>    <span class="token function">evloop_rearm_callback_read</span><span class="token punctuation">(</span>loop<span class="token punctuation">,</span> server<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 记录新链接</span>    info<span class="token punctuation">.</span>nclients<span class="token operator">++</span><span class="token punctuation">;</span>    info<span class="token punctuation">.</span>nconnections<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment">// 日志</span>    <span class="token function">sol_info</span><span class="token punctuation">(</span><span class="token string">"New connection from %s on port %s"</span><span class="token punctuation">,</span> conn<span class="token punctuation">.</span>ip<span class="token punctuation">,</span> conf<span class="token operator">-></span>port<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>正如你所见，我定义了两个静态函数（在C语言中，当我们不严格的追究术语时，由于这种静态函数只能被同样.c文件里的函数访问，我们可以把这种函数看作是其他OOP语言中的私有方法。）</p><p><code>accept_new_client</code> 函数使用了上一篇文中 <code>network</code> 模块定义的 <code>accept_connection</code> 函数，得以从操作系统层级接收新连接并进行一些设置。<code>on_accept</code> 则是实际负责处理新链接的回调函数，他依赖 <code>accept_new_client</code> 函数。</p><p><code>accept_new_client</code> 函数所需的参数结构 <code>connection</code> 是我从我其他项目的代码库复制过来的，并不是说必须要用这种方式。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>src/server.c</span></div><code class="language-c"><span class="token comment">// 接收数据流组装成数据包的函数, 被 on_read 回调使用</span><span class="token comment">// 解析数据包头, 至少会包括 Fixed Header, 因为每个数据包都至少有 2byte 的 Fixed Header, 其中会包括包类型和剩余长度</span><span class="token comment">// 入参包括</span><span class="token comment">// clientfd 客户端fd</span><span class="token comment">// buf 放置所有输入数据流</span><span class="token comment">// command 表示mqtt包的第一个字节</span><span class="token keyword">static</span> <span class="token class-name">ssize_t</span> <span class="token function">recv_packet</span><span class="token punctuation">(</span><span class="token keyword">int</span> clientfd<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>command<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 总计读取的字节数</span>    <span class="token class-name">ssize_t</span> nbytes <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 读取一个字节, 这里会包括 MQTT 类型字段</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>nbytes <span class="token operator">=</span> <span class="token function">recv_bytes</span><span class="token punctuation">(</span>clientfd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token operator">-</span>ERRCLIENTDC<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> byte <span class="token operator">=</span> <span class="token operator">*</span>buf<span class="token punctuation">;</span>    buf<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment">// 译者没有明白为何可以这样比较, 第一个byte应该是包括了 MQTT type 和 Flags 才对?</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>DISCONNECT <span class="token operator">&lt;</span> byte <span class="token operator">||</span> CONNECT <span class="token operator">></span> byte<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token operator">-</span>ERRPACKETERR<span class="token punctuation">;</span>    <span class="token comment">// 逐字节读取变长的 Remaining Length</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> buff<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 使用 buf 读取</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token function">recv_bytes</span><span class="token punctuation">(</span>clientfd<span class="token punctuation">,</span> buf<span class="token operator">+</span>count<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token operator">-</span>ERRCLIENTDC<span class="token punctuation">;</span>        <span class="token comment">// 并为 buff 赋值</span>        buff<span class="token punctuation">[</span>count<span class="token punctuation">]</span> <span class="token operator">=</span> buf<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">;</span>        nbytes <span class="token operator">+=</span> n<span class="token punctuation">;</span>        <span class="token comment">// 根据高位判断是否有后续</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>buff<span class="token punctuation">[</span>count<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 获得剩余长度的值</span>    <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pbuf <span class="token operator">=</span> <span class="token operator">&amp;</span>buff<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> tlen <span class="token operator">=</span> <span class="token function">mqtt_decode_length</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pbuf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 判断是否过长</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tlen <span class="token operator">></span> conf<span class="token operator">-></span>max_request_size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        nbytes <span class="token operator">=</span> <span class="token operator">-</span>ERRMAXREQSIZE<span class="token punctuation">;</span>        <span class="token keyword">goto</span> exit<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 读取所有剩余的字节数, 获得完整数据包字节流</span>    <span class="token comment">// 译者认为这里 buf + 1 只考虑了 Remaining Length 长度为 1 的情况, 应改为 buf + count</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token function">recv_bytes</span><span class="token punctuation">(</span>clientfd<span class="token punctuation">,</span> buf <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> tlen<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">goto</span> err<span class="token punctuation">;</span>    nbytes <span class="token operator">+=</span> n<span class="token punctuation">;</span>    <span class="token comment">// 第一个字节赋值为 command</span>    <span class="token operator">*</span>command <span class="token operator">=</span> byte<span class="token punctuation">;</span>exit<span class="token operator">:</span>    <span class="token keyword">return</span> nbytes<span class="token punctuation">;</span>err<span class="token operator">:</span>    <span class="token function">shutdown</span><span class="token punctuation">(</span>clientfd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span>clientfd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> nbytes<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 客户端输入数据的回调, 当 accepted 或 reply 之后等待</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">on_read</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">evloop</span> <span class="token operator">*</span>loop<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 这里带着一些客户端信息</span>    <span class="token keyword">struct</span> <span class="token class-name">closure</span> <span class="token operator">*</span>cb <span class="token operator">=</span> arg<span class="token punctuation">;</span>    <span class="token comment">// 使用最大数据包尺寸准备接收数据 默认2M</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>buffer <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>conf<span class="token operator">-></span>max_request_size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ssize_t</span> bytes <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> command <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 在此处必须完整的接收一个数据包的所有数据</span>    <span class="token comment">// 通过数据包的 Remaining Length 我们可以了解这个数据包的长度到底应该是多少</span>    bytes <span class="token operator">=</span> <span class="token function">recv_packet</span><span class="token punctuation">(</span>cb<span class="token operator">-></span>fd<span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> <span class="token operator">&amp;</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 链接断开处理</span>    <span class="token comment">// TODO: 使用一个 error_handler 来处理 ERRMAXREQSIZE 将错误码返回给客户端</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bytes <span class="token operator">==</span> <span class="token operator">-</span>ERRCLIENTDC <span class="token operator">||</span> bytes <span class="token operator">==</span> <span class="token operator">-</span>ERRMAXREQSIZE<span class="token punctuation">)</span>        <span class="token keyword">goto</span> exit<span class="token punctuation">;</span>    <span class="token comment">// 当我们收到一个错误的包时, 我们需要清理 buffer, 并断开这个客户端连接</span>    <span class="token comment">// 等客户端下次重连上来再处理</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bytes <span class="token operator">==</span> <span class="token operator">-</span>ERRPACKETERR<span class="token punctuation">)</span>        <span class="token keyword">goto</span> errdc<span class="token punctuation">;</span>    <span class="token comment">// 收包计数器</span>    info<span class="token punctuation">.</span>bytes_recv<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment">// 将数据流解码为正确类型的mqtt包</span>    <span class="token keyword">union</span> mqtt_packet packet<span class="token punctuation">;</span>    <span class="token function">unpack_mqtt_packet</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token operator">&amp;</span>packet<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">union</span> mqtt_header hdr <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span>byte <span class="token operator">=</span> command <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// 然后找到对应的 hander 来处理这个包</span>    <span class="token comment">// 处理完的rc表示</span>    <span class="token keyword">int</span> rc <span class="token operator">=</span> handlers<span class="token punctuation">[</span>hdr<span class="token punctuation">.</span>bits<span class="token punctuation">.</span>type<span class="token punctuation">]</span><span class="token punctuation">(</span>cb<span class="token punctuation">,</span> <span class="token operator">&amp;</span>packet<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 如果处理结果是需要发送一个包作为响应</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>rc <span class="token operator">==</span> REARM_W<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 重置写入监听</span>        <span class="token comment">// 当 fd 可写入时 epoll 就会触发 EPOLLOUT 事件</span>        <span class="token comment">// cb 中的 call 会被执行, 也就是 on_write</span>        <span class="token comment">// 写入需要的参数, 会在 handlers 中会处理好, 之后由 cb 携带 </span>        cb<span class="token operator">-></span>call <span class="token operator">=</span> on_write<span class="token punctuation">;</span>        <span class="token function">evloop_rearm_callback_write</span><span class="token punctuation">(</span>loop<span class="token punctuation">,</span> cb<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>rc <span class="token operator">==</span> REARM_R<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 重置读取监听, 后面有数据接着读</span>        cb<span class="token operator">-></span>call <span class="token operator">=</span> on_read<span class="token punctuation">;</span>        <span class="token function">evloop_rearm_callback_read</span><span class="token punctuation">(</span>loop<span class="token punctuation">,</span> cb<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// Disconnect packet received</span>exit<span class="token operator">:</span>    <span class="token function">free</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>errdc<span class="token operator">:</span>    <span class="token function">free</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 把客户端丢弃了</span>    <span class="token function">sol_error</span><span class="token punctuation">(</span><span class="token string">"Dropping client"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">shutdown</span><span class="token punctuation">(</span>cb<span class="token operator">-></span>fd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span>cb<span class="token operator">-></span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 清理哈希表</span>    <span class="token function">hashtable_del</span><span class="token punctuation">(</span>sol<span class="token punctuation">.</span>clients<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sol_client</span> <span class="token operator">*</span><span class="token punctuation">)</span> cb<span class="token operator">-></span>obj<span class="token punctuation">)</span><span class="token operator">-></span>client_id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">hashtable_del</span><span class="token punctuation">(</span>sol<span class="token punctuation">.</span>closures<span class="token punctuation">,</span> cb<span class="token operator">-></span>closure_id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 记录信息</span>    info<span class="token punctuation">.</span>nclients<span class="token operator">--</span><span class="token punctuation">;</span>    info<span class="token punctuation">.</span>nconnections<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 写入回调, 当有需要写入的数据且 fd 可被写入时触发</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">on_write</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">evloop</span> <span class="token operator">*</span>loop<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">closure</span> <span class="token operator">*</span>cb <span class="token operator">=</span> arg<span class="token punctuation">;</span>    <span class="token class-name">ssize_t</span> sent<span class="token punctuation">;</span>    <span class="token comment">// cb 里包括了所有需要发送的内容</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sent <span class="token operator">=</span> <span class="token function">send_bytes</span><span class="token punctuation">(</span>cb<span class="token operator">-></span>fd<span class="token punctuation">,</span> cb<span class="token operator">-></span>payload<span class="token operator">-></span>data<span class="token punctuation">,</span> cb<span class="token operator">-></span>payload<span class="token operator">-></span>size<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">sol_error</span><span class="token punctuation">(</span><span class="token string">"Error writing on socket to client %s: %s"</span><span class="token punctuation">,</span>                  <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sol_client</span> <span class="token operator">*</span><span class="token punctuation">)</span> cb<span class="token operator">-></span>obj<span class="token punctuation">)</span><span class="token operator">-></span>client_id<span class="token punctuation">,</span> <span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 发包计数器</span>    info<span class="token punctuation">.</span>bytes_sent <span class="token operator">+=</span> sent<span class="token punctuation">;</span>    <span class="token comment">// 释放</span>    <span class="token function">bytestring_release</span><span class="token punctuation">(</span>cb<span class="token operator">-></span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span>    cb<span class="token operator">-></span>payload <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token comment">// 客户端的下一次触发肯定是 read (业务上来说服务端不可能连续发两个包)</span>    cb<span class="token operator">-></span>call <span class="token operator">=</span> on_read<span class="token punctuation">;</span>    <span class="token function">evloop_rearm_callback_read</span><span class="token punctuation">(</span>loop<span class="token punctuation">,</span> cb<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>我们又添加了三个静态函数，<code>recv_packet</code> 函数就像他的名字一样，依赖 <code>mqtt</code> 模块，负责持续接收数据流直到足够一个完整的 MQTT 包。另外两个分别是 <code>on_read</code> 和 <code>on_write</code>。</p><p>请注意，<code>on_read</code> 和 <code>on_write</code> 使用我们之前定义的函数不停的重置对 <code>socket</code> 的监听，就像来回打乒乓球一样。例如， <code>on_read</code> 可以通过 <code>处理器</code> 的返回值来决定下一次的操作是 <code>read</code> 还是 <code>write</code>，然后把客户端链接的下一个回调函数设置为 <code>on_read</code> 或者 <code>on_write</code>，当然也有可能是断开链接。比如说客户端发来的数据出现了错误，或者当客户端发来了 <code>DISCONNECT</code> 包，那么此时对应的 <code>处理器</code> 返回的值就既不是 <code>REARM_W</code> 也不是 <code>REARM_R</code>。</p><p>在 <code>on_write</code> 中我们看到 <code>send_bytes</code> 传入了一个带有大小和内容的 <code>payload</code>，这里使用了我定义的一个方便的工具结构 <code>bytestring</code>，我们现在就在 <code>src/pack.h</code> and <code>src/pack.c</code> 中添加他。</p><h1 id="工具-bytestring"><a href="#工具-bytestring" class="headerlink" title="工具 bytestring"></a>工具 bytestring</h1><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>src/pack.h</span></div><code class="language-c"><span class="token comment">// bytestring 结构体, 提供了一个便携的保存 bytes 的方法</span><span class="token comment">// 他本质上提供了一个指向最后编辑位置的指针, 和 bytes 的总长度</span><span class="token keyword">struct</span> <span class="token class-name">bytestring</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">size_t</span> size<span class="token punctuation">;</span>    <span class="token class-name">size_t</span> last<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>data<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// bytestring 的初始化函数, 需要一个长度作为参数</span><span class="token comment">// 为了简化, 我们直接采用固定长度, 并且不会再后续使用过程中扩容</span><span class="token keyword">struct</span> <span class="token class-name">bytestring</span> <span class="token operator">*</span><span class="token function">bytestring_create</span><span class="token punctuation">(</span><span class="token class-name">size_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">bytestring_init</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">bytestring</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token class-name">size_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">bytestring_release</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">bytestring</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">bytestring_reset</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">bytestring</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>这里是关于 <code>bytestring</code> 的实现。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>src/pack.c</span></div><code class="language-c"><span class="token comment">// 创建</span><span class="token keyword">struct</span> <span class="token class-name">bytestring</span> <span class="token operator">*</span><span class="token function">bytestring_create</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">bytestring</span> <span class="token operator">*</span>bstring <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>bstring<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">bytestring_init</span><span class="token punctuation">(</span>bstring<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> bstring<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 初始化内部结构</span><span class="token keyword">void</span> <span class="token function">bytestring_init</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">bytestring</span> <span class="token operator">*</span>bstring<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bstring<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    bstring<span class="token operator">-></span>size <span class="token operator">=</span> size<span class="token punctuation">;</span>    bstring<span class="token operator">-></span>data <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">*</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">bytestring_reset</span><span class="token punctuation">(</span>bstring<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 释放</span><span class="token keyword">void</span> <span class="token function">bytestring_release</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">bytestring</span> <span class="token operator">*</span>bstring<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bstring<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>bstring<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>bstring<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 清空数据</span><span class="token keyword">void</span> <span class="token function">bytestring_reset</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">bytestring</span> <span class="token operator">*</span>bstring<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bstring<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    bstring<span class="token operator">-></span>last <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>bstring<span class="token operator">-></span>data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> bstring<span class="token operator">-></span>size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="日志和通用工具"><a href="#日志和通用工具" class="headerlink" title="日志和通用工具"></a>日志和通用工具</h1><p>让我们稍微打断一下主线，按照我的经验，到这个阶段我们往往会需要一些工具函数，我一般会把他们统一放在 <code>util</code> 包中。我们刚才已经看到了一些 <code>sol_info</code>, <code>sol_debug</code> 或者 <code>sol_error</code> 这样的函数，其实就是 <code>util</code> 包中的定义。</p><p>我们的日志需求很简单，所以不需要专门做一个日志模块，就先放到 <code>util</code> 包里。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>src/util.h</span></div><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdbool.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;strings.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">UUID_LEN</span>     <span class="token expression"><span class="token number">37</span>  </span><span class="token comment">// 36 + nul char</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_LOG_SIZE</span> <span class="token expression"><span class="token number">119</span></span></span><span class="token keyword">enum</span> <span class="token class-name">log_level</span> <span class="token punctuation">&#123;</span> DEBUG<span class="token punctuation">,</span> INFORMATION<span class="token punctuation">,</span> WARNING<span class="token punctuation">,</span> ERROR <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">number_len</span><span class="token punctuation">(</span><span class="token class-name">size_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">parse_int</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">generate_uuid</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">remove_occur</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">append_string</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token class-name">size_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 日志相关</span><span class="token keyword">void</span> <span class="token function">sol_log_init</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">sol_log_close</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">sol_log</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">log</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token function">sol_log</span><span class="token punctuation">(</span> __VA_ARGS__ <span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">sol_debug</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token function">log</span><span class="token punctuation">(</span>DEBUG<span class="token punctuation">,</span> __VA_ARGS__<span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">sol_warning</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token function">log</span><span class="token punctuation">(</span>WARNING<span class="token punctuation">,</span> __VA_ARGS__<span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">sol_error</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token function">log</span><span class="token punctuation">(</span>ERROR<span class="token punctuation">,</span> __VA_ARGS__<span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">sol_info</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token function">log</span><span class="token punctuation">(</span>INFORMATION<span class="token punctuation">,</span> __VA_ARGS__<span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">STREQ</span><span class="token expression"><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">,</span> len<span class="token punctuation">)</span> <span class="token function">strncasecmp</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">,</span> len<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> true <span class="token operator">:</span> false</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>log函数设置了一些宏定义，方便我们使用不同级别的日志。我们还做了一个 <code>STREQ</code> 用来比较两个字符串是否相等。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>src/util.c</span></div><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctype.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;errno.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;assert.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdarg.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;uuid/uuid.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"util.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"config.h"</span></span><span class="token keyword">static</span> FILE <span class="token operator">*</span>fh <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment">// 通过文件保存日志</span><span class="token keyword">void</span> <span class="token function">sol_log_init</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>file<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>    fh <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token string">"a+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fh<span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lu * WARNING: Unable to open file %s\n"</span><span class="token punctuation">,</span>               <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">sol_log_close</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fh<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">fflush</span><span class="token punctuation">(</span>fh<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fclose</span><span class="token punctuation">(</span>fh<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 按级别写入内容</span><span class="token keyword">void</span> <span class="token function">sol_log</span><span class="token punctuation">(</span><span class="token keyword">int</span> level<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>fmt<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>fmt<span class="token punctuation">)</span><span class="token punctuation">;</span>    va_list ap<span class="token punctuation">;</span>    <span class="token keyword">char</span> msg<span class="token punctuation">[</span>MAX_LOG_SIZE <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>level <span class="token operator">&lt;</span> conf<span class="token operator">-></span>loglevel<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">va_start</span><span class="token punctuation">(</span>ap<span class="token punctuation">,</span> fmt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">vsnprintf</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">,</span> fmt<span class="token punctuation">,</span> ap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">va_end</span><span class="token punctuation">(</span>ap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 过长的信息会被截取, 然后加 ...</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>msg <span class="token operator">+</span> MAX_LOG_SIZE<span class="token punctuation">,</span> <span class="token string">"..."</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    msg<span class="token punctuation">[</span>MAX_LOG_SIZE <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>    <span class="token comment">// Distinguish message level prefix</span>    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>mark <span class="token operator">=</span> <span class="token string">"#i*!"</span><span class="token punctuation">;</span>    <span class="token comment">// 同时写向标准输出和日志文件</span>    FILE <span class="token operator">*</span>fp <span class="token operator">=</span> <span class="token constant">stdout</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fp<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">fprintf</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token string">"%lu %c %s\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mark<span class="token punctuation">[</span>level<span class="token punctuation">]</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fh<span class="token punctuation">)</span>        <span class="token function">fprintf</span><span class="token punctuation">(</span>fh<span class="token punctuation">,</span> <span class="token string">"%lu %c %s\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mark<span class="token punctuation">[</span>level<span class="token punctuation">]</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fflush</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fh<span class="token punctuation">)</span>        <span class="token function">fflush</span><span class="token punctuation">(</span>fh<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 获得一个数字的字符串长度 如 number_len(321) => 3</span><span class="token keyword">int</span> <span class="token function">number_len</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> number<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        len<span class="token operator">++</span><span class="token punctuation">;</span>        number <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> len<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 解析字符串中的数字, 返回数字的值</span><span class="token keyword">int</span> <span class="token function">parse_int</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>string<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>string <span class="token operator">&amp;&amp;</span> <span class="token function">isdigit</span><span class="token punctuation">(</span><span class="token operator">*</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        n <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">*</span>string <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        string<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> n<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 去除字符串中的某个字符</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">remove_occur</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token keyword">char</span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> str<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>pp <span class="token operator">=</span> str<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// 当 p 指向内容</span>        <span class="token operator">*</span>pp <span class="token operator">=</span> <span class="token operator">*</span>p<span class="token operator">++</span><span class="token punctuation">;</span>       <span class="token comment">// 1. 使用 *p 赋值 *pp 2. p右移 (保证每次原字符串读取下一个字符)</span>        pp <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token operator">*</span>pp <span class="token operator">!=</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 仅当 *pp != c 时, pp 右移 (意味着如果时c则会被下一次写入覆盖)</span>    <span class="token punctuation">&#125;</span>    <span class="token operator">*</span>pp <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span> <span class="token comment">// pp的最新位置作为结尾</span>    <span class="token keyword">return</span> str<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 将一个字符串添加到另一个字符串后面</span><span class="token comment">// 前面是 src 后面是 chunk</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">append_string</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>src<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>chunk<span class="token punctuation">,</span> <span class="token class-name">size_t</span> chunklen<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">size_t</span> srclen <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>ret <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>srclen <span class="token operator">+</span> chunklen <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>ret<span class="token punctuation">,</span> src<span class="token punctuation">,</span> srclen<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>ret <span class="token operator">+</span> srclen<span class="token punctuation">,</span> chunk<span class="token punctuation">,</span> chunklen<span class="token punctuation">)</span><span class="token punctuation">;</span>    ret<span class="token punctuation">[</span>srclen <span class="token operator">+</span> chunklen<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 创建 uuid</span><span class="token keyword">int</span> <span class="token function">generate_uuid</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>uuid_placeholder<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/* Generate random uuid */</span>    <span class="token class-name">uuid_t</span> binuuid<span class="token punctuation">;</span>    <span class="token function">uuid_generate_random</span><span class="token punctuation">(</span>binuuid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">uuid_unparse</span><span class="token punctuation">(</span>binuuid<span class="token punctuation">,</span> uuid_placeholder<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>这些简单的函数足以支撑我们的日志系统，如果在启动时调用 <code>sol_log_init</code> 我们还能将日志存入日志文件。</p><h1 id="服务入口实现"><a href="#服务入口实现" class="headerlink" title="服务入口实现"></a>服务入口实现</h1><p>终于我们要开始写 <code>start_server</code> 函数了，这个函数会调用所有我们之前写过的内容。他将作为程序的入口点，完成各种设置和全局实例的初始化，然后等待着客户端链接。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>src/server.c</span></div><code class="language-c"><span class="token comment">// 系统状态主题, 根据配置文件每 n 秒发布一次</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SYS_TOPICS</span> <span class="token expression"><span class="token number">14</span></span></span><span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>sys_topics<span class="token punctuation">[</span>SYS_TOPICS<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">"$SOL/"</span><span class="token punctuation">,</span>    <span class="token string">"$SOL/broker/"</span><span class="token punctuation">,</span>    <span class="token string">"$SOL/broker/clients/"</span><span class="token punctuation">,</span>    <span class="token string">"$SOL/broker/bytes/"</span><span class="token punctuation">,</span>    <span class="token string">"$SOL/broker/messages/"</span><span class="token punctuation">,</span>    <span class="token string">"$SOL/broker/uptime/"</span><span class="token punctuation">,</span>    <span class="token string">"$SOL/broker/uptime/sol"</span><span class="token punctuation">,</span>    <span class="token string">"$SOL/broker/clients/connected/"</span><span class="token punctuation">,</span>    <span class="token string">"$SOL/broker/clients/disconnected/"</span><span class="token punctuation">,</span>    <span class="token string">"$SOL/broker/bytes/sent/"</span><span class="token punctuation">,</span>    <span class="token string">"$SOL/broker/bytes/received/"</span><span class="token punctuation">,</span>    <span class="token string">"$SOL/broker/messages/sent/"</span><span class="token punctuation">,</span>    <span class="token string">"$SOL/broker/messages/received/"</span><span class="token punctuation">,</span>    <span class="token string">"$SOL/broker/memory/used"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 一个阻塞的循环</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">evloop</span> <span class="token operator">*</span>loop<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">evloop_wait</span><span class="token punctuation">(</span>loop<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">sol_error</span><span class="token punctuation">(</span><span class="token string">"Event loop exited unexpectedly: %s"</span><span class="token punctuation">,</span> <span class="token function">strerror</span><span class="token punctuation">(</span>loop<span class="token operator">-></span>status<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">evloop_free</span><span class="token punctuation">(</span>loop<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 在全局哈希表中删除客户端时触发回调释放资源</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">client_destructor</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">hashtable_entry</span> <span class="token operator">*</span>entry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>entry<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">sol_client</span> <span class="token operator">*</span>client <span class="token operator">=</span> entry<span class="token operator">-></span>val<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>client<span class="token operator">-></span>client_id<span class="token punctuation">)</span>        <span class="token function">free</span><span class="token punctuation">(</span>client<span class="token operator">-></span>client_id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 在全局哈希表中删除闭包时触发回调释放资源</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">closure_destructor</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">hashtable_entry</span> <span class="token operator">*</span>entry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>entry<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">closure</span> <span class="token operator">*</span>closure <span class="token operator">=</span> entry<span class="token operator">-></span>val<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>closure<span class="token operator">-></span>payload<span class="token punctuation">)</span>        <span class="token function">bytestring_release</span><span class="token punctuation">(</span>closure<span class="token operator">-></span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>closure<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 启动服务器</span><span class="token keyword">int</span> <span class="token function">start_server</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>addr<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>port<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 初始化 sol 全局实例</span>    <span class="token function">trie_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sol<span class="token punctuation">.</span>topics<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 确保所有的客户端和闭包都在哈希表中, 这样从哈希表删除时就可以使用回调释放资源</span>    sol<span class="token punctuation">.</span>clients <span class="token operator">=</span> <span class="token function">hashtable_create</span><span class="token punctuation">(</span>client_destructor<span class="token punctuation">)</span><span class="token punctuation">;</span>    sol<span class="token punctuation">.</span>closures <span class="token operator">=</span> <span class="token function">hashtable_create</span><span class="token punctuation">(</span>closure_destructor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 服务端 closure</span>    <span class="token keyword">struct</span> <span class="token class-name">closure</span> server_closure<span class="token punctuation">;</span>    <span class="token comment">// 开启端口监听</span>    server_closure<span class="token punctuation">.</span>fd <span class="token operator">=</span> <span class="token function">make_listen</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> port<span class="token punctuation">,</span> conf<span class="token operator">-></span>socket_family<span class="token punctuation">)</span><span class="token punctuation">;</span>    server_closure<span class="token punctuation">.</span>payload <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    server_closure<span class="token punctuation">.</span>args <span class="token operator">=</span> <span class="token operator">&amp;</span>server_closure<span class="token punctuation">;</span>    <span class="token comment">// 唯一事件是接受客户端链接</span>    server_closure<span class="token punctuation">.</span>call <span class="token operator">=</span> on_accept<span class="token punctuation">;</span>    <span class="token function">generate_uuid</span><span class="token punctuation">(</span>server_closure<span class="token punctuation">.</span>closure_id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 创建输出状态的基础 topic</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> SYS_TOPICS<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">sol_topic_put</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sol<span class="token punctuation">,</span> <span class="token function">topic_create</span><span class="token punctuation">(</span><span class="token function">strdup</span><span class="token punctuation">(</span>sys_topics<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 创建 evloop</span>    <span class="token keyword">struct</span> <span class="token class-name">evloop</span> <span class="token operator">*</span>event_loop <span class="token operator">=</span> <span class="token function">evloop_create</span><span class="token punctuation">(</span>EPOLL_MAX_EVENTS<span class="token punctuation">,</span> EPOLL_TIMEOUT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 将服务端 closure 放入 evloop</span>    <span class="token function">evloop_add_callback</span><span class="token punctuation">(</span>event_loop<span class="token punctuation">,</span> <span class="token operator">&amp;</span>server_closure<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 添加周期性事件 汇报服务器状态</span>    <span class="token comment">// TODO 实现</span>    <span class="token keyword">struct</span> <span class="token class-name">closure</span> sys_closure <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">.</span>fd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span>payload <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span>args <span class="token operator">=</span> <span class="token operator">&amp;</span>sys_closure<span class="token punctuation">,</span>        <span class="token punctuation">.</span>call <span class="token operator">=</span> publish_stats    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">generate_uuid</span><span class="token punctuation">(</span>sys_closure<span class="token punctuation">.</span>closure_id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">evloop_add_periodic_task</span><span class="token punctuation">(</span>event_loop<span class="token punctuation">,</span> conf<span class="token operator">-></span>stats_pub_interval<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>sys_closure<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 初始化完成</span>    <span class="token function">sol_info</span><span class="token punctuation">(</span><span class="token string">"Server start"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    info<span class="token punctuation">.</span>start_time <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 进入事件循环</span>    <span class="token function">run</span><span class="token punctuation">(</span>event_loop<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 释放资源</span>    <span class="token function">hashtable_release</span><span class="token punctuation">(</span>sol<span class="token punctuation">.</span>clients<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">hashtable_release</span><span class="token punctuation">(</span>sol<span class="token punctuation">.</span>closures<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sol_info</span><span class="token punctuation">(</span><span class="token string">"Sol v%s exiting"</span><span class="token punctuation">,</span> VERSION<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="定时通报服务器状态"><a href="#定时通报服务器状态" class="headerlink" title="定时通报服务器状态"></a>定时通报服务器状态</h1><p>好的，我们现在有了一个（几乎）功能齐全的服务器，它使用我们的回调系统来处理流量。 接下来我们需要在头文件上添加一些代码，例如我们刚才使用的 <code>info</code> 结构体，还有全局的名为 <code>sol</code> 的实例，这些我们都还没有定义。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>src/server.h</span></div><code class="language-c"><span class="token comment">// 全局 info</span><span class="token keyword">struct</span> <span class="token class-name">sol_info</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> nclients<span class="token punctuation">;</span>               <span class="token comment">// 当前客户端数</span>    <span class="token keyword">int</span> nconnections<span class="token punctuation">;</span>           <span class="token comment">// 历史客户端总数</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> start_time<span class="token punctuation">;</span>       <span class="token comment">// 服务启动时间</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> bytes_recv<span class="token punctuation">;</span>       <span class="token comment">// 接收字节总数</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> bytes_sent<span class="token punctuation">;</span>       <span class="token comment">// 发送字节总数</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> messages_sent<span class="token punctuation">;</span>    <span class="token comment">// 发送消息总数</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> messages_recv<span class="token punctuation">;</span>    <span class="token comment">// 接收消息总数</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>这是刚才的 <code>start_server</code> 函数中我们添加的一个周期性任务。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 添加周期性事件 汇报服务器状态</span><span class="token comment">// TODO 实现</span><span class="token keyword">struct</span> <span class="token class-name">closure</span> sys_closure <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span>fd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span>payload <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span>args <span class="token operator">=</span> <span class="token operator">&amp;</span>sys_closure<span class="token punctuation">,</span>    <span class="token punctuation">.</span>call <span class="token operator">=</span> publish_stats<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">generate_uuid</span><span class="token punctuation">(</span>sys_closure<span class="token punctuation">.</span>closure_id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">evloop_add_periodic_task</span><span class="token punctuation">(</span>event_loop<span class="token punctuation">,</span> conf<span class="token operator">-></span>stats_pub_interval<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>sys_closure<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><code>publish_stats</code> 函数会每隔 <code>conf-&gt;stats_pub_interval</code> 秒被调用一次， <code>conf-&gt;stats_pub_interval</code> 是一个全局的配置值，配置相关的内容我们稍后会去实现。</p><p>现在，让我们先实现这个回调函数：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>src/server.c</span></div><code class="language-c"><span class="token comment">// 发送消息的工具方法</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">publish_message</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> pkt_id<span class="token punctuation">,</span>                            <span class="token keyword">unsigned</span> <span class="token keyword">short</span> topiclen<span class="token punctuation">,</span>                            <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>topic<span class="token punctuation">,</span>                            <span class="token keyword">unsigned</span> <span class="token keyword">short</span> payloadlen<span class="token punctuation">,</span>                            <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>payload<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 从全局的 topic 表中获得我们需发送的 topic, 如果不存在则退出</span>    <span class="token keyword">struct</span> <span class="token class-name">topic</span> <span class="token operator">*</span>t <span class="token operator">=</span> <span class="token function">sol_topic_get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sol<span class="token punctuation">,</span> topic<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>t<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token comment">// 制作一个 PUBLISH 包</span>    <span class="token keyword">union</span> mqtt_packet pkt<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">mqtt_publish</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">mqtt_packet_publish</span><span class="token punctuation">(</span>PUBLISH_BYTE<span class="token punctuation">,</span>                                                 pkt_id<span class="token punctuation">,</span>                                                 topiclen<span class="token punctuation">,</span>                                                 <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> topic<span class="token punctuation">,</span>                                                 payloadlen<span class="token punctuation">,</span>                                                 payload<span class="token punctuation">)</span><span class="token punctuation">;</span>    pkt<span class="token punctuation">.</span>publish <span class="token operator">=</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token class-name">size_t</span> len<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>packed<span class="token punctuation">;</span>    <span class="token comment">// 通过TCP向所有订阅了该主题的客户端发送 payload</span>    <span class="token keyword">struct</span> <span class="token class-name">list_node</span> <span class="token operator">*</span>cur <span class="token operator">=</span> t<span class="token operator">-></span>subscribers<span class="token operator">-></span>head<span class="token punctuation">;</span>    <span class="token class-name">size_t</span> sent <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> cur<span class="token punctuation">;</span> cur <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">sol_debug</span><span class="token punctuation">(</span><span class="token string">"Sending PUBLISH (d%i, q%u, r%i, m%u, %s, ... (%i bytes))"</span><span class="token punctuation">,</span>                  pkt<span class="token punctuation">.</span>publish<span class="token punctuation">.</span>header<span class="token punctuation">.</span>bits<span class="token punctuation">.</span>dup<span class="token punctuation">,</span>                  pkt<span class="token punctuation">.</span>publish<span class="token punctuation">.</span>header<span class="token punctuation">.</span>bits<span class="token punctuation">.</span>qos<span class="token punctuation">,</span>                  pkt<span class="token punctuation">.</span>publish<span class="token punctuation">.</span>header<span class="token punctuation">.</span>bits<span class="token punctuation">.</span>retain<span class="token punctuation">,</span>                  pkt<span class="token punctuation">.</span>publish<span class="token punctuation">.</span>pkt_id<span class="token punctuation">,</span>                  pkt<span class="token punctuation">.</span>publish<span class="token punctuation">.</span>topic<span class="token punctuation">,</span>                  pkt<span class="token punctuation">.</span>publish<span class="token punctuation">.</span>payloadlen<span class="token punctuation">)</span><span class="token punctuation">;</span>        len <span class="token operator">=</span> MQTT_HEADER_LEN <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span><span class="token punctuation">)</span> <span class="token operator">+</span>            pkt<span class="token punctuation">.</span>publish<span class="token punctuation">.</span>topiclen <span class="token operator">+</span> pkt<span class="token punctuation">.</span>publish<span class="token punctuation">.</span>payloadlen<span class="token punctuation">;</span>        <span class="token keyword">struct</span> <span class="token class-name">subscriber</span> <span class="token operator">*</span>sub <span class="token operator">=</span> cur<span class="token operator">-></span>data<span class="token punctuation">;</span>        <span class="token keyword">struct</span> <span class="token class-name">sol_client</span> <span class="token operator">*</span>sc <span class="token operator">=</span> sub<span class="token operator">-></span>client<span class="token punctuation">;</span>        <span class="token comment">// 根据订阅者设置的 qos 更改包中的 qos</span>        pkt<span class="token punctuation">.</span>publish<span class="token punctuation">.</span>header<span class="token punctuation">.</span>bits<span class="token punctuation">.</span>qos <span class="token operator">=</span> sub<span class="token operator">-></span>qos<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pkt<span class="token punctuation">.</span>publish<span class="token punctuation">.</span>header<span class="token punctuation">.</span>bits<span class="token punctuation">.</span>qos <span class="token operator">></span> AT_MOST_ONCE<span class="token punctuation">)</span>            len <span class="token operator">+=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> remaininglen_offset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0x200000</span><span class="token punctuation">)</span>            remaininglen_offset <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0x4000</span><span class="token punctuation">)</span>            remaininglen_offset <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0x80</span><span class="token punctuation">)</span>            remaininglen_offset <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        len <span class="token operator">+=</span> remaininglen_offset<span class="token punctuation">;</span>                <span class="token comment">// 实际打包发送</span>        packed <span class="token operator">=</span> <span class="token function">pack_mqtt_packet</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pkt<span class="token punctuation">,</span> PUBLISH<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sent <span class="token operator">=</span> <span class="token function">send_bytes</span><span class="token punctuation">(</span>sc<span class="token operator">-></span>fd<span class="token punctuation">,</span> packed<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">sol_error</span><span class="token punctuation">(</span><span class="token string">"Error publishing to %s: %s"</span><span class="token punctuation">,</span>                      sc<span class="token operator">-></span>client_id<span class="token punctuation">,</span> <span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 统计信息</span>        info<span class="token punctuation">.</span>bytes_sent <span class="token operator">+=</span> sent<span class="token punctuation">;</span>        info<span class="token punctuation">.</span>messages_sent<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>packed<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 发送服务器状态的周期性任务</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">publish_stats</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">evloop</span> <span class="token operator">*</span>loop<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> cclients<span class="token punctuation">[</span><span class="token function">number_len</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span>nclients<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">sprintf</span><span class="token punctuation">(</span>cclients<span class="token punctuation">,</span> <span class="token string">"%d"</span><span class="token punctuation">,</span> info<span class="token punctuation">.</span>nclients<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> bsent<span class="token punctuation">[</span><span class="token function">number_len</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span>bytes_sent<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">sprintf</span><span class="token punctuation">(</span>bsent<span class="token punctuation">,</span> <span class="token string">"%lld"</span><span class="token punctuation">,</span> info<span class="token punctuation">.</span>bytes_sent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> msent<span class="token punctuation">[</span><span class="token function">number_len</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span>messages_sent<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">sprintf</span><span class="token punctuation">(</span>msent<span class="token punctuation">,</span> <span class="token string">"%lld"</span><span class="token punctuation">,</span> info<span class="token punctuation">.</span>messages_sent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> mrecv<span class="token punctuation">[</span><span class="token function">number_len</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span>messages_recv<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">sprintf</span><span class="token punctuation">(</span>mrecv<span class="token punctuation">,</span> <span class="token string">"%lld"</span><span class="token punctuation">,</span> info<span class="token punctuation">.</span>messages_recv<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> uptime <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">-</span> info<span class="token punctuation">.</span>start_time<span class="token punctuation">;</span>    <span class="token keyword">char</span> utime<span class="token punctuation">[</span><span class="token function">number_len</span><span class="token punctuation">(</span>uptime<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">sprintf</span><span class="token punctuation">(</span>utime<span class="token punctuation">,</span> <span class="token string">"%lld"</span><span class="token punctuation">,</span> uptime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> sol_uptime <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">-</span> info<span class="token punctuation">.</span>start_time<span class="token punctuation">)</span> <span class="token operator">/</span> SOL_SECONDS<span class="token punctuation">;</span>    <span class="token keyword">char</span> sutime<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">sprintf</span><span class="token punctuation">(</span>sutime<span class="token punctuation">,</span> <span class="token string">"%.4f"</span><span class="token punctuation">,</span> sol_uptime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">publish_message</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>sys_topics<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sys_topics<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token function">strlen</span><span class="token punctuation">(</span>utime<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>utime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">publish_message</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>sys_topics<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sys_topics<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token function">strlen</span><span class="token punctuation">(</span>sutime<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>sutime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">publish_message</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>sys_topics<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sys_topics<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token function">strlen</span><span class="token punctuation">(</span>cclients<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>cclients<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">publish_message</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>sys_topics<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sys_topics<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token function">strlen</span><span class="token punctuation">(</span>bsent<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>bsent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">publish_message</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>sys_topics<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sys_topics<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token function">strlen</span><span class="token punctuation">(</span>msent<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>msent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">publish_message</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>sys_topics<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sys_topics<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token function">strlen</span><span class="token punctuation">(</span>mrecv<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>mrecv<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>我们已经注册了我们第一个周期性回调，他会定时的发送 <code>sys_topics</code> 数组中主题的消息，</p><p>下面是一些我们需要的全局实例：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>src/server.c</span></div><code class="language-c"><span class="token comment">// info 实例, 其内容会被周期性回调发送</span><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">sol_info</span> info<span class="token punctuation">;</span><span class="token comment">// sol 实例, 包括 主题树 和 客户端哈希表</span><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">sol</span> sol<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>我们还需要补充一些代码，才能使我们上面的代码能够运行。比如，<code>struct sol</code> 的定义、<code>closure_destructor</code> 函数，哈希表的定义，比如 <code>topic</code> 的存储和解析方法。这一切我们都需要去完成。</p><p>在下一部分我们会编写处理各种MQTT数据包的 <code>处理器</code>，根据数据包的类型和内容不同，服务器会表现出不同的行为。</p>]]></content>
    
    
    <categories>
      
      <category>MQTT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络编程</tag>
      
      <tag>翻译</tag>
      
      <tag>物联网</tag>
      
      <tag>C</tag>
      
      <tag>MQTT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[翻译]通过三个步骤简单理解epoll</title>
    <link href="/2023/12/20/translate-epoll-in-3-steps.html"/>
    <url>/2023/12/20/translate-epoll-in-3-steps.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>原文 <a href="https://suchprogramming.com/epoll-in-3-easy-steps/">epoll() Tutorial – epoll() In 3 Easy Steps!</a></p></blockquote><span id="more"></span><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>就在不久前，能够让一台服务器<a href="http://www.kegel.com/c10k.html">支持10000个并发连接</a>还是一个很了不起的事情。有很多因素让这个行为成为可能，例如 <a href="https://www.nginx.com/">nginx</a>，他可以比他的前辈们更高效的处理更多连接。不过其中最大的因素应该还是大部分操作系统引入了恒定时间的轮询机制<a href="https://robbell.io/2009/06/a-beginners-guide-to-big-o-notation">O1</a>，用来监视系统中的文件描述符。</p><p>在 <a href="https://nostarch.com/">No Starch Press</a> 的书<a href="https://nostarch.com/tlpi">《Linux 编程接口》</a>中，第 63.4.5 节提供了一个表格，描述了通过一些最常见的轮询方法检查不同数量的文件描述符所需的时间。</p><p><img src="/2023/12/20/translate-epoll-in-3-steps/poll-times.png"></p><p>如图所示，在10个文件描述符时，epoll 已经体现出了他的性能优势。随着描述符数量的增加，相比于 <a href="https://man7.org/linux/man-pages/man2/poll.2.html">poll()</a> 或 <a href="https://man7.org/linux/man-pages/man2/select.2.html">select()</a>，这种性能优势体现的越来越大。</p><p>本教程将介绍在 Linux 2.6.27+ 上使用 epoll() 的一些基础知识。</p><h2 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h2><p>本教程假设您熟悉并熟悉 Linux、C 语法以及类 UNIX 系统中文件描述符的使用。</p><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><p>创建一个新文件夹来开始我们的教程， Makefile 如下：</p><figure><div class="code-wrapper"><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token target symbol">all</span><span class="token punctuation">:</span> epoll_example<span class="token target symbol">epoll_example</span><span class="token punctuation">:</span> epoll_example.cgcc -Wall -Werror -o <span class="token variable">$@</span> epoll_example.c<span class="token target symbol">clean</span><span class="token punctuation">:</span><span class="token operator">@</span>rm -v epoll_example<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>在这篇文章中，需要使用这些库：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>epoll_example.c</span></div><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span>     <span class="token comment">// for fprintf()</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span>    <span class="token comment">// for close(), read()</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/epoll.h></span> <span class="token comment">// for epoll_create1(), epoll_ctl(), struct epoll_event</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span>    <span class="token comment">// for strncmp</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="第一步：创建-epoll-文件描述符"><a href="#第一步：创建-epoll-文件描述符" class="headerlink" title="第一步：创建 epoll 文件描述符"></a>第一步：创建 epoll 文件描述符</h1><p>从最基础开始，先尝试创建和关闭 epoll 实例。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>epoll_example.c</span></div><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span>     <span class="token comment">// for fprintf()</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span>    <span class="token comment">// for close()</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/epoll.h></span> <span class="token comment">// for epoll_create1()</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> epoll_fd <span class="token operator">=</span> <span class="token function">epoll_create1</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>epoll_fd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Failed to create epoll file descriptor\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">close</span><span class="token punctuation">(</span>epoll_fd<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Failed to close epoll file descriptor\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>运行这段代码，正常来说应该直接返回并且不产生任何输出，如果你看到了错误消息，那么也许你可能正在运行一个非常旧的 Linux 内核。</p><p>第一个例子是使用 <a href="https://linux.die.net/man/2/epoll_create1">epoll_create1()</a> 创建 <code>epoll</code> 实例，并且获得他的文件描述符。虽然我们没有用这个文件描述符做任何事情，我们仍然要记得在关闭程序之前清理他。就像和其他的 <code>Linux</code> 文件描述符一样，使用 <code>close()</code>。</p><h2 id="电平触发（Level-triggered）和边沿触发（edge-triggered）"><a href="#电平触发（Level-triggered）和边沿触发（edge-triggered）" class="headerlink" title="电平触发（Level triggered）和边沿触发（edge triggered）"></a>电平触发（Level triggered）和边沿触发（edge triggered）</h2><p><a href="https://www.quora.com/What-are-the-key-differences-between-edge-triggered-and-level-triggered-interrupts">电平触发和边沿触发</a> 是从电子工程师那边借来的术语，但当我们使用 <code>epoll</code> 时，我们需要注意这两者的差别。在边沿触发模式下，我们只会在被监控文件描述符的状态变化时接收到事件；而在电平触发模式下，我们会持续接收事件，直到被监控的文件描述符不再处于 ready 状态。一般来说电平触发时默认状态，而且更加容易上手，我们的教程也会使用电平触发。但是我们也需要直到有边沿触发这回事。</p><h1 id="第二步：添加被-epoll-监控的文件描述符"><a href="#第二步：添加被-epoll-监控的文件描述符" class="headerlink" title="第二步：添加被 epoll 监控的文件描述符"></a>第二步：添加被 epoll 监控的文件描述符</h1><p>接下来要做的事情就是，告诉 epoll 需要监控哪些文件描述符，以及需要监控哪种类型的事件。在这个例子里，我会使用Linux中我最爱的文件描述符，亲爱的 <code>file descriptor 0</code>（就是标准输入）。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>epoll_example.c</span></div><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span>     <span class="token comment">// for fprintf()</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span>    <span class="token comment">// for close()</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/epoll.h></span> <span class="token comment">// for epoll_create1(), epoll_ctl(), struct epoll_event</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">struct</span> <span class="token class-name">epoll_event</span> event<span class="token punctuation">;</span><span class="token keyword">int</span> epoll_fd <span class="token operator">=</span> <span class="token function">epoll_create1</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>epoll_fd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Failed to create epoll file descriptor\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>event<span class="token punctuation">.</span>events <span class="token operator">=</span> EPOLLIN<span class="token punctuation">;</span>event<span class="token punctuation">.</span>data<span class="token punctuation">.</span>fd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">epoll_ctl</span><span class="token punctuation">(</span>epoll_fd<span class="token punctuation">,</span> EPOLL_CTL_ADD<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Failed to add file descriptor to epoll\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">close</span><span class="token punctuation">(</span>epoll_fd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">close</span><span class="token punctuation">(</span>epoll_fd<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Failed to close epoll file descriptor\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>这里我们创建了 <code>epoll_event</code> 的实例 <code>event</code>，并使用 <a href="https://linux.die.net/man/2/epoll_ctl">epoll_ctl()</a> 将 <code>fd0</code> 添加到 epoll 的实例 <code>epoll_fd</code> 中。最后一个参数 <code>event</code> 是为了让 epoll 知道我们只想关注输入事件（<code>EPOLLIN</code>），而且还能为事件提供一些我们自定义的数据（本例中 <code>event.data.fd = 0</code>）。</p><h1 id="第三步：完整例子"><a href="#第三步：完整例子" class="headerlink" title="第三步：完整例子"></a>第三步：完整例子</h1><p>现在，让 epoll 发挥他的魔力吧</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>epoll_example.c</span></div><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_EVENTS</span> <span class="token expression"><span class="token number">5</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">READ_SIZE</span> <span class="token expression"><span class="token number">10</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span>     <span class="token comment">// for fprintf()</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span>    <span class="token comment">// for close(), read()</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/epoll.h></span> <span class="token comment">// for epoll_create1(), epoll_ctl(), struct epoll_event</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span>    <span class="token comment">// for strncmp</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 是否运行中、当前并发事件数、计数器</span><span class="token keyword">int</span> running <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> event_count<span class="token punctuation">,</span> i<span class="token punctuation">;</span>  <span class="token comment">// 接收数据长度</span><span class="token class-name">size_t</span> bytes_read<span class="token punctuation">;</span>  <span class="token comment">// 接收输入 buffer</span><span class="token keyword">char</span> read_buffer<span class="token punctuation">[</span>READ_SIZE <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// event 是一个事件结构 events 是事件数组, 最多5个</span><span class="token keyword">struct</span> <span class="token class-name">epoll_event</span> event<span class="token punctuation">,</span> events<span class="token punctuation">[</span>MAX_EVENTS<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// epoll 实例</span><span class="token keyword">int</span> epoll_fd <span class="token operator">=</span> <span class="token function">epoll_create1</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>epoll_fd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Failed to create epoll file descriptor\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  <span class="token comment">// 监听 EPOLLIN</span>event<span class="token punctuation">.</span>events <span class="token operator">=</span> EPOLLIN<span class="token punctuation">;</span><span class="token comment">// 用户数据 fd = 0</span>  event<span class="token punctuation">.</span>data<span class="token punctuation">.</span>fd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// 使用 epoll_ctl 添加监听</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">epoll_ctl</span><span class="token punctuation">(</span>epoll_fd<span class="token punctuation">,</span> EPOLL_CTL_ADD<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Failed to add file descriptor to epoll\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">close</span><span class="token punctuation">(</span>epoll_fd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>running<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 等待输入</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nPolling for input...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// epoll_wait 等待事件发生</span>    <span class="token comment">// 返回值：接收并发事件数</span>    <span class="token comment">// 参数：epoll实例, 事件容器, 并发数, 超时时间</span>event_count <span class="token operator">=</span> <span class="token function">epoll_wait</span><span class="token punctuation">(</span>epoll_fd<span class="token punctuation">,</span> events<span class="token punctuation">,</span> MAX_EVENTS<span class="token punctuation">,</span> <span class="token number">30</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d ready events\n"</span><span class="token punctuation">,</span> event_count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> event_count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Reading file descriptor '%d' -- "</span><span class="token punctuation">,</span> events<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>bytes_read <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>events<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>fd<span class="token punctuation">,</span> read_buffer<span class="token punctuation">,</span> READ_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%zd bytes read.\n"</span><span class="token punctuation">,</span> bytes_read<span class="token punctuation">)</span><span class="token punctuation">;</span>read_buffer<span class="token punctuation">[</span>bytes_read<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Read '%s'"</span><span class="token punctuation">,</span> read_buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 输入为 stop 时结束</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strncmp</span><span class="token punctuation">(</span>read_buffer<span class="token punctuation">,</span> <span class="token string">"stop\n"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>running <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">close</span><span class="token punctuation">(</span>epoll_fd<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Failed to close epoll file descriptor\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>我们添加了一些变量，用来支撑这个例子，同时使用了一个循环，持续读取标准输入直到读取内容为 <code>stop</code>。我们使用 <a href="">epoll_wait()</a> 来等待事件的发生，每个发生的事件都会被存储在 <code>events</code> 中，最大支持 <code>MAX_EVENTS</code> 个事件，并将超时事件设置为30秒。<code>epoll_wait()</code> 返回了本次触发了多少事件，然后我们只是在一个循环中打印这些事件而已。</p><h1 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h1><p>接下来是一些使用示例：</p><figure><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><div class="caption"><span>example</span></div><code class="language-text">:~/epoll_example$ ./epoll_examplePolling for input...hello1 ready eventsReading file descriptor '0' -- 6 bytes read.Read 'hello'Polling for input...to looooooooooooong1 ready eventsReading file descriptor '0' -- 10 bytes read.Read 'to loooooo'Polling for input...1 ready eventsReading file descriptor '0' -- 10 bytes read.Read 'ooooooong'Polling for input...stop1 ready eventsReading file descriptor '0' -- 5 bytes read.Read 'stop'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>可以看到，第一次我们输入 <code>hello</code>，程序正确输出而且继续循环。</p><p>第二次当我们输入一个超过长度限制的输入 <code>to looooooooooooong</code> 时，电平触发机制帮助了我们。因为输入缓冲区一直有值，所以我们的事件就一直触发，直到读取完毕。在这种情况下，如果我们使用的是边沿触发，那么我们就只能收到一次通知，直到下次再有内容写入输入缓冲区时才会执行下一次事件了。</p><p>希望这篇文档能够帮助你使用 <code>epoll()</code>！</p>]]></content>
    
    
    <categories>
      
      <category>网络编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络编程</tag>
      
      <tag>翻译</tag>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[翻译]Sol - 从零开始的MQTT broker - 第二部分：网络</title>
    <link href="/2023/12/19/translate-sol-2.html"/>
    <url>/2023/12/19/translate-sol-2.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>原文 <a href="https://codepr.github.io/posts/sol-mqtt-broker-p2/">Sol - An MQTT broker from scratch. Part 2 - Networking</a></p></blockquote><span id="more"></span><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>让我们继续之前的工作，在第一部分中我们实现了 MQTT v3.1.1 的数据结构和解码函数，接下来我们需要做一些组包和编码函数，让我们可以发送网络包。</p><p>顺带说明一下，我们并没有打算去编写完美的或者内存效率很高的代码，而且，过早的优化是万恶之源，以后我们有的是时间来提高我们的代码质量。</p><h1 id="组包实现"><a href="#组包实现" class="headerlink" title="组包实现"></a>组包实现</h1><p>暂时我们只需要做 <code>CONNACK</code> <code>SUBACK</code> <code>PUBLISH</code> 包的组包工作，其他的各种 <code>ACK</code> 的结构都是一样的，之前我们已经用 <strong>typedef</strong> 让这些 <code>ACK</code> 引用了同一个函数。</p><ul><li><p><code>union mqtt_header *mqtt_packet_header(unsigned char)</code> 函数用来处理 Fixed Header，以及以下这些只有 Fixed Header 的包：</p><ul><li>PINGREQ</li><li>PINGRESP</li><li>DISCONNECT</li></ul></li><li><p><code>struct mqtt_ack *mqtt_packet_ack(unsigned char, unsigned short)</code> 用来处理以下这些 <code>类ACK</code> 的包：</p><ul><li>PUBACK</li><li>PUBREC</li><li>PUBREL</li><li>PUBCOMP</li><li>UNSUBACK</li></ul></li></ul><p>其余的包都需要专门的函数来组包。再说一次，虽然可能有很多更优雅的代码或者更优化的方法，但是现在我们只要写能用的代码就行了，以后迟早会优化的。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>mqtt.c</span></div><code class="language-c"><span class="token comment">/* * mqtt组包 */</span><span class="token comment">// 头部1byte的组包实现</span><span class="token keyword">union</span> mqtt_header <span class="token operator">*</span><span class="token function">mqtt_packet_header</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> byte<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">union</span> mqtt_header header<span class="token punctuation">;</span>    header<span class="token punctuation">.</span>byte <span class="token operator">=</span> byte<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>header<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 各种ACK的组包实现</span><span class="token keyword">struct</span> <span class="token class-name">mqtt_ack</span> <span class="token operator">*</span><span class="token function">mqtt_packet_ack</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> byte<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> pkt_id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">mqtt_ack</span> ack<span class="token punctuation">;</span>    ack<span class="token punctuation">.</span>header<span class="token punctuation">.</span>byte <span class="token operator">=</span> byte<span class="token punctuation">;</span>    ack<span class="token punctuation">.</span>pkt_id <span class="token operator">=</span> pkt_id<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>ack<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// CONNACK 组包实现</span><span class="token keyword">struct</span> <span class="token class-name">mqtt_connack</span> <span class="token operator">*</span><span class="token function">mqtt_packet_connack</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> byte<span class="token punctuation">,</span>                                         <span class="token keyword">unsigned</span> <span class="token keyword">char</span> cflags<span class="token punctuation">,</span>                                         <span class="token keyword">unsigned</span> <span class="token keyword">char</span> rc<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">mqtt_connack</span> connack<span class="token punctuation">;</span>    connack<span class="token punctuation">.</span>header<span class="token punctuation">.</span>byte <span class="token operator">=</span> byte<span class="token punctuation">;</span>    connack<span class="token punctuation">.</span>byte <span class="token operator">=</span> cflags<span class="token punctuation">;</span>    connack<span class="token punctuation">.</span>rc <span class="token operator">=</span> rc<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>connack<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// SUBACK 组包实现</span><span class="token keyword">struct</span> <span class="token class-name">mqtt_suback</span> <span class="token operator">*</span><span class="token function">mqtt_packet_suback</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> byte<span class="token punctuation">,</span>                                       <span class="token keyword">unsigned</span> <span class="token keyword">short</span> pkt_id<span class="token punctuation">,</span>                                       <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>rcs<span class="token punctuation">,</span>                                       <span class="token keyword">unsigned</span> <span class="token keyword">short</span> rcslen<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">mqtt_suback</span> <span class="token operator">*</span>suback <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>suback<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    suback<span class="token operator">-></span>header<span class="token punctuation">.</span>byte <span class="token operator">=</span> byte<span class="token punctuation">;</span>    suback<span class="token operator">-></span>pkt_id <span class="token operator">=</span> pkt_id<span class="token punctuation">;</span>    suback<span class="token operator">-></span>rcslen <span class="token operator">=</span> rcslen<span class="token punctuation">;</span>    suback<span class="token operator">-></span>rcs <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>rcslen<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>suback<span class="token operator">-></span>rcs<span class="token punctuation">,</span> rcs<span class="token punctuation">,</span> rcslen<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> suback<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// PUBLISH 组包实现</span><span class="token keyword">struct</span> <span class="token class-name">mqtt_publish</span> <span class="token operator">*</span><span class="token function">mqtt_packet_publish</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> byte<span class="token punctuation">,</span>                                         <span class="token keyword">unsigned</span> <span class="token keyword">short</span> pkt_id<span class="token punctuation">,</span>                                         <span class="token class-name">size_t</span> topiclen<span class="token punctuation">,</span>                                         <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>topic<span class="token punctuation">,</span>                                         <span class="token class-name">size_t</span> payloadlen<span class="token punctuation">,</span>                                         <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>payload<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">mqtt_publish</span> <span class="token operator">*</span>publish <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>publish<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    publish<span class="token operator">-></span>header<span class="token punctuation">.</span>byte <span class="token operator">=</span> byte<span class="token punctuation">;</span>    publish<span class="token operator">-></span>pkt_id <span class="token operator">=</span> pkt_id<span class="token punctuation">;</span>    publish<span class="token operator">-></span>topiclen <span class="token operator">=</span> topiclen<span class="token punctuation">;</span>    publish<span class="token operator">-></span>topic <span class="token operator">=</span> topic<span class="token punctuation">;</span>    publish<span class="token operator">-></span>payloadlen <span class="token operator">=</span> payloadlen<span class="token punctuation">;</span>    publish<span class="token operator">-></span>payload <span class="token operator">=</span> payload<span class="token punctuation">;</span>    <span class="token keyword">return</span> publish<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 释放包资源</span><span class="token keyword">void</span> <span class="token function">mqtt_packet_release</span><span class="token punctuation">(</span><span class="token keyword">union</span> mqtt_packet <span class="token operator">*</span>pkt<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> CONNECT<span class="token operator">:</span>            <span class="token function">free</span><span class="token punctuation">(</span>pkt<span class="token operator">-></span>connect<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>client_id<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>pkt<span class="token operator">-></span>connect<span class="token punctuation">.</span>bits<span class="token punctuation">.</span>username <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token function">free</span><span class="token punctuation">(</span>pkt<span class="token operator">-></span>connect<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>pkt<span class="token operator">-></span>connect<span class="token punctuation">.</span>bits<span class="token punctuation">.</span>password <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token function">free</span><span class="token punctuation">(</span>pkt<span class="token operator">-></span>connect<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>pkt<span class="token operator">-></span>connect<span class="token punctuation">.</span>bits<span class="token punctuation">.</span>will <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">free</span><span class="token punctuation">(</span>pkt<span class="token operator">-></span>connect<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>will_message<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">free</span><span class="token punctuation">(</span>pkt<span class="token operator">-></span>connect<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>will_topic<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> SUBSCRIBE<span class="token operator">:</span>        <span class="token keyword">case</span> UNSUBSCRIBE<span class="token operator">:</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pkt<span class="token operator">-></span>subscribe<span class="token punctuation">.</span>tuples_len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token function">free</span><span class="token punctuation">(</span>pkt<span class="token operator">-></span>subscribe<span class="token punctuation">.</span>tuples<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>topic<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">free</span><span class="token punctuation">(</span>pkt<span class="token operator">-></span>subscribe<span class="token punctuation">.</span>tuples<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> SUBACK<span class="token operator">:</span>            <span class="token function">free</span><span class="token punctuation">(</span>pkt<span class="token operator">-></span>suback<span class="token punctuation">.</span>rcs<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> PUBLISH<span class="token operator">:</span>            <span class="token function">free</span><span class="token punctuation">(</span>pkt<span class="token operator">-></span>publish<span class="token punctuation">.</span>topic<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">free</span><span class="token punctuation">(</span>pkt<span class="token operator">-></span>publish<span class="token punctuation">.</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="编码实现"><a href="#编码实现" class="headerlink" title="编码实现"></a>编码实现</h1><p>我们接下来处理编码函数，编码函数其实就是解码函数的反方向操作：我们使用内存对象创造一个字节流，之后可以通过socket发出去。</p><p>现在我们有一些函数返回指向 <code>static struct</code> 的指针（例如上方代码中的 <code>mqtt_packet_header</code> ），在单线程的情况下这是没什么问题的。 <strong>在多线程环境下，一定会出问题</strong>，每次这种函数的返回都会指向同一片内存区域，可能导致各种冲突。因此为了将来的改进，需要重构这些部分，使用 <code>malloc</code> 来为每次返回分配地址。</p><p>我们采用和之前解码函数一样的方式来映射编码函数。做一个静态数组，其中的序号恰好等于包类型。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>src/mqtt.c</span></div><code class="language-c"><span class="token comment">// MQTT 编码函数接口</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">mqtt_pack_handler</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">union</span> mqtt_packet <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 编码函数数组, 其中索引和包类型id对应</span><span class="token keyword">static</span> mqtt_pack_handler <span class="token operator">*</span>pack_handlers<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token constant">NULL</span><span class="token punctuation">,</span>    <span class="token constant">NULL</span><span class="token punctuation">,</span>    pack_mqtt_connack<span class="token punctuation">,</span>    pack_mqtt_publish<span class="token punctuation">,</span>    pack_mqtt_ack<span class="token punctuation">,</span>    pack_mqtt_ack<span class="token punctuation">,</span>    pack_mqtt_ack<span class="token punctuation">,</span>    pack_mqtt_ack<span class="token punctuation">,</span>    <span class="token constant">NULL</span><span class="token punctuation">,</span>    pack_mqtt_suback<span class="token punctuation">,</span>    <span class="token constant">NULL</span><span class="token punctuation">,</span>    pack_mqtt_ack<span class="token punctuation">,</span>    <span class="token constant">NULL</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// header 的编码实现</span><span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">pack_mqtt_header</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">union</span> mqtt_header <span class="token operator">*</span>hdr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>packed <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>MQTT_HEADER_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>ptr <span class="token operator">=</span> packed<span class="token punctuation">;</span>    <span class="token function">pack_u8</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ptr<span class="token punctuation">,</span> hdr<span class="token operator">-></span>byte<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Remaining Length 1byte 值为0</span>    <span class="token function">mqtt_encode_length</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> packed<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// ACK 的编码实现</span><span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">pack_mqtt_ack</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">union</span> mqtt_packet <span class="token operator">*</span>pkt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>packed <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>MQTT_ACK_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4byte</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>ptr <span class="token operator">=</span> packed<span class="token punctuation">;</span>    <span class="token function">pack_u8</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ptr<span class="token punctuation">,</span> pkt<span class="token operator">-></span>ack<span class="token punctuation">.</span>header<span class="token punctuation">.</span>byte<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mqtt_encode_length</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> MQTT_HEADER_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这里指还有2byte 内容是 pkt_id</span>    ptr<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 因为 mqtt_encode_length 不会移动指针, 只会返回 Remaining Length 的长度, 而这里长度显然为1</span>    <span class="token function">pack_u16</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ptr<span class="token punctuation">,</span> pkt<span class="token operator">-></span>ack<span class="token punctuation">.</span>pkt_id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> packed<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// CONNACK 的编码实现</span><span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">pack_mqtt_connack</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">union</span> mqtt_packet <span class="token operator">*</span>pkt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>packed <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>MQTT_ACK_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>ptr <span class="token operator">=</span> packed<span class="token punctuation">;</span>    <span class="token function">pack_u8</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ptr<span class="token punctuation">,</span> pkt<span class="token operator">-></span>connack<span class="token punctuation">.</span>header<span class="token punctuation">.</span>byte<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mqtt_encode_length</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> MQTT_HEADER_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>    ptr<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token function">pack_u8</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ptr<span class="token punctuation">,</span> pkt<span class="token operator">-></span>connack<span class="token punctuation">.</span>byte<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pack_u8</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ptr<span class="token punctuation">,</span> pkt<span class="token operator">-></span>connack<span class="token punctuation">.</span>rc<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> packed<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// SUBACK 的编码实现</span><span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">pack_mqtt_suback</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">union</span> mqtt_packet <span class="token operator">*</span>pkt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 计算总长度</span>    <span class="token class-name">size_t</span> pktlen <span class="token operator">=</span> MQTT_HEADER_LEN <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span><span class="token punctuation">)</span> <span class="token operator">+</span> pkt<span class="token operator">-></span>suback<span class="token punctuation">.</span>rcslen<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>packed <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>pktlen <span class="token operator">+</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>ptr <span class="token operator">=</span> packed<span class="token punctuation">;</span>    <span class="token comment">// 编码固定头</span>    <span class="token function">pack_u8</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ptr<span class="token punctuation">,</span> pkt<span class="token operator">-></span>suback<span class="token punctuation">.</span>header<span class="token punctuation">.</span>byte<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 剩余部分的长度</span>    <span class="token class-name">size_t</span> len <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span><span class="token punctuation">)</span> <span class="token operator">+</span> pkt<span class="token operator">-></span>suback<span class="token punctuation">.</span>rcslen<span class="token punctuation">;</span>    <span class="token comment">// 变长表示剩余部分长度</span>    <span class="token keyword">int</span> step <span class="token operator">=</span> <span class="token function">mqtt_encode_length</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 指针后移</span>    ptr <span class="token operator">+=</span> step<span class="token punctuation">;</span>    <span class="token comment">// 剩余部分编码</span>    <span class="token function">pack_u16</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ptr<span class="token punctuation">,</span> pkt<span class="token operator">-></span>suback<span class="token punctuation">.</span>pkt_id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pkt<span class="token operator">-></span>suback<span class="token punctuation">.</span>rcslen<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">pack_u8</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ptr<span class="token punctuation">,</span> pkt<span class="token operator">-></span>suback<span class="token punctuation">.</span>rcs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> packed<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// PUBLISH 的编码实现</span><span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">pack_mqtt_publish</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">union</span> mqtt_packet <span class="token operator">*</span>pkt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// pktlen 至少有这么多: 头部至少2byte(1byte头 + 至少1byte的Remaining Length)</span>    <span class="token comment">// sizeof(uint16_t) 表示 topiclen 的长度, 因为 payloadlen 是不被编码到字节流中的</span>    <span class="token comment">// topiclen 和 payloadlen 的内容</span>    <span class="token class-name">size_t</span> pktlen <span class="token operator">=</span> MQTT_HEADER_LEN <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span><span class="token punctuation">)</span> <span class="token operator">+</span>        pkt<span class="token operator">-></span>publish<span class="token punctuation">.</span>topiclen <span class="token operator">+</span> pkt<span class="token operator">-></span>publish<span class="token punctuation">.</span>payloadlen<span class="token punctuation">;</span>    <span class="token comment">// 这里是去除 fixed header 之外的内容长度</span>    <span class="token class-name">size_t</span> len <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span>    <span class="token comment">// qos > 0, 说明有pkt_id, 需要 +2byte</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pkt<span class="token operator">-></span>header<span class="token punctuation">.</span>bits<span class="token punctuation">.</span>qos <span class="token operator">></span> AT_MOST_ONCE<span class="token punctuation">)</span>        pktlen <span class="token operator">+=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 这里是通过剩余长度计算变长部分还需要的长度, 前面已经预留了1byte</span>    <span class="token keyword">int</span> remaininglen_offset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>pktlen <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0x200000</span><span class="token punctuation">)</span>        remaininglen_offset <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>pktlen <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0x4000</span><span class="token punctuation">)</span>        remaininglen_offset <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>pktlen <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0x80</span><span class="token punctuation">)</span>        remaininglen_offset <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">// 这里是总包长</span>    pktlen <span class="token operator">+=</span> remaininglen_offset<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>packed <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>pktlen<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>ptr <span class="token operator">=</span> packed<span class="token punctuation">;</span>    <span class="token function">pack_u8</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ptr<span class="token punctuation">,</span> pkt<span class="token operator">-></span>publish<span class="token punctuation">.</span>header<span class="token punctuation">.</span>byte<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 除去 fixed header 之外剩余部分的长度</span>    len <span class="token operator">+=</span> <span class="token punctuation">(</span>pktlen <span class="token operator">-</span> MQTT_HEADER_LEN <span class="token operator">-</span> remaininglen_offset<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 编码 Remaining Length</span>    <span class="token keyword">int</span> step <span class="token operator">=</span> <span class="token function">mqtt_encode_length</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>    ptr <span class="token operator">+=</span> step<span class="token punctuation">;</span>    <span class="token comment">// 编码 topiclen 和后续的 topic 内容</span>    <span class="token function">pack_u16</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ptr<span class="token punctuation">,</span> pkt<span class="token operator">-></span>publish<span class="token punctuation">.</span>topiclen<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pack_bytes</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ptr<span class="token punctuation">,</span> pkt<span class="token operator">-></span>publish<span class="token punctuation">.</span>topic<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 当 QoS > 0 时, 编码 pkt_id</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pkt<span class="token operator">-></span>header<span class="token punctuation">.</span>bits<span class="token punctuation">.</span>qos <span class="token operator">></span> AT_MOST_ONCE<span class="token punctuation">)</span>        <span class="token function">pack_u16</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ptr<span class="token punctuation">,</span> pkt<span class="token operator">-></span>publish<span class="token punctuation">.</span>pkt_id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 编码 payload 的内容</span>    <span class="token function">pack_bytes</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ptr<span class="token punctuation">,</span> pkt<span class="token operator">-></span>publish<span class="token punctuation">.</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> packed<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 编码函数入口</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">pack_mqtt_packet</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">union</span> mqtt_packet <span class="token operator">*</span>pkt<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> PINGREQ <span class="token operator">||</span> type <span class="token operator">==</span> PINGRESP<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">pack_mqtt_header</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pkt<span class="token operator">-></span>header<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> pack_handlers<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">(</span>pkt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="socket-封装"><a href="#socket-封装" class="headerlink" title="socket 封装"></a>socket 封装</h1><p>我们计划创建一个单线程 TCP 服务器，使用 <strong>epoll</strong> 接口实现多路 I&#x2F;O。Epoll 是继 <strong>select</strong> 和 <strong>poll</strong> 之后内核 2.5.44 添加的最新的多路复用机制，也是性能最高、连接数最多的多路复用机制，它在 BSD 和 BSD-like (Mac OSX) 系统中的对应机制是 <strong>kqueue</strong>。</p><p>我们需要定义一些函数来管理我们的socket descriptor。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>src/network.h</span></div><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"util.h"</span></span><span class="token comment">// 地址族</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">UNIX</span>    <span class="token expression"><span class="token number">0</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INET</span>    <span class="token expression"><span class="token number">1</span></span></span><span class="token comment">// 设置为 non-blocking 模式</span><span class="token keyword">int</span> <span class="token function">set_nonblocking</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 将 TCP_NODELAY 设置为 true, 用来关闭 Nagle's algorithm, 关闭收包时的缓冲等待</span><span class="token keyword">int</span> <span class="token function">set_tcp_nodelay</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建 socket 服务的辅助函数</span><span class="token keyword">int</span> <span class="token function">create_and_bind</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建一个 non-blocking socket 并监听指定的地址和端口</span><span class="token keyword">int</span> <span class="token function">make_listen</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 接收链接并进行后续处理, 将链接分配到 epollfd</span><span class="token keyword">int</span> <span class="token function">accept_connection</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>我们定义了一些简单的辅助函数，用来创建和绑定 <code>socket</code> 端口，处理新链接并把 <code>socket</code> 设置为 <code>non-blocking</code> 模式（这样才能发挥 <strong>epoll</strong> 的复用能力）。</p><p>我不喜欢必须处理每个进出服务器的字节，在我写的涉及到TCP通信的程序中，我都会定义这两个函数：</p><ul><li><code>ssize_t send_bytes(int, const unsigned char *, size_t)</code> 用于在while循环中持续发送数据，直到把数据全部发送完。正确捕获 <code>EAGAIN</code> 或 <code>EWOUDLBLOCK</code> 异常。</li><li><code>ssize_t recv_bytes(int, unsigned char *, size_t)</code> 在while循环中获得任意长度的数据。正确捕获 <code>EAGAIN</code> 或 <code>EWOUDLBLOCK</code> 异常。</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>src/network.h</span></div><code class="language-c"><span class="token comment">// I/O 管理函数</span><span class="token comment">// 在循环中发出所有数据, 避免内核buffer可用性造成的中断(EAGAIN EWOUDLBLOCK)</span><span class="token class-name">ssize_t</span> <span class="token function">send_bytes</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token class-name">size_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 从 fd 中读取指定长度的数据进入 buffer</span><span class="token class-name">ssize_t</span> <span class="token function">recv_bytes</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token class-name">size_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="socket-封装实现"><a href="#socket-封装实现" class="headerlink" title="socket 封装实现"></a>socket 封装实现</h2><p>接下来是 <code>network.c</code> 的实现。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>src/network.c</span></div><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_DEFAULT_SOURCE</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;errno.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;netdb.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/un.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/epoll.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/timerfd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;netinet/in.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;netinet/tcp.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/eventfd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"network.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"config.h"</span></span><span class="token comment">// 设置 non-blocking socket</span><span class="token keyword">int</span> <span class="token function">set_nonblocking</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> flags<span class="token punctuation">,</span> result<span class="token punctuation">;</span>    flags <span class="token operator">=</span> <span class="token function">fcntl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> F_GETFL<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>flags <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">goto</span> err<span class="token punctuation">;</span>    result <span class="token operator">=</span> <span class="token function">fcntl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> F_SETFL<span class="token punctuation">,</span> flags <span class="token operator">|</span> O_NONBLOCK<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">goto</span> err<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>err<span class="token operator">:</span>    <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"set_nonblocking"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 设置 TCP_NODELAY 用以关闭 Nagle's algorithm</span><span class="token keyword">int</span> <span class="token function">set_tcp_nodelay</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">setsockopt</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> IPPROTO_TCP<span class="token punctuation">,</span> TCP_NODELAY<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// UNIX socket 的绑定方法</span><span class="token comment">// return fd</span><span class="token comment">// sockpath 文件路径</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">create_and_bind_unix</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>sockpath<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_un</span> addr<span class="token punctuation">;</span>    <span class="token keyword">int</span> fd<span class="token punctuation">;</span>    <span class="token comment">// 创建 socket</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_UNIX<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"socket error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// addr初始值全0</span>    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>addr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 赋值</span>    addr<span class="token punctuation">.</span>sun_family <span class="token operator">=</span> AF_UNIX<span class="token punctuation">;</span>    <span class="token function">strncpy</span><span class="token punctuation">(</span>addr<span class="token punctuation">.</span>sun_path<span class="token punctuation">,</span> sockpath<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>addr<span class="token punctuation">.</span>sun_path<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 译者没有明白为何 unlink 会出现在此处</span>    <span class="token function">unlink</span><span class="token punctuation">(</span>sockpath<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 绑定 socket</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">bind</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>addr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"bind error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> fd<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// TCP socket 的绑定方法</span><span class="token comment">// return fd</span><span class="token comment">// host TCP 地址</span><span class="token comment">// port TCP 端口</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">create_and_bind_tcp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>host<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>port<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">addrinfo</span> hints <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">.</span>ai_family <span class="token operator">=</span> AF_UNSPEC<span class="token punctuation">,</span>       <span class="token comment">// 不指定协议族, 系统自定可以是IP4 或 IP6</span>        <span class="token punctuation">.</span>ai_socktype <span class="token operator">=</span> SOCK_STREAM<span class="token punctuation">,</span>   <span class="token comment">// 面向流, 就是TCP</span>        <span class="token punctuation">.</span>ai_flags <span class="token operator">=</span> AI_PASSIVE        <span class="token comment">// 被动模式, 可以监听任意地址端口</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// result 是 getaddrinfo 提供的 addrinfo, rp 指如果绑定不成功, 可以变成下一个 addrinfo</span>    <span class="token keyword">struct</span> <span class="token class-name">addrinfo</span> <span class="token operator">*</span>result<span class="token punctuation">,</span> <span class="token operator">*</span>rp<span class="token punctuation">;</span>    <span class="token keyword">int</span> sfd<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getaddrinfo</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">,</span> <span class="token operator">&amp;</span>hints<span class="token punctuation">,</span> <span class="token operator">&amp;</span>result<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"getaddrinfo error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>rp <span class="token operator">=</span> result<span class="token punctuation">;</span> rp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> rp <span class="token operator">=</span> rp<span class="token operator">-></span>ai_next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 先使用 rp 生成 socket</span>        sfd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>rp<span class="token operator">-></span>ai_family<span class="token punctuation">,</span> rp<span class="token operator">-></span>ai_socktype<span class="token punctuation">,</span> rp<span class="token operator">-></span>ai_protocol<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 如果失败就下一个 rp</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sfd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token comment">// 设置 SO_REUSEADDR 这样关闭进程后可以重用端口</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">setsockopt</span><span class="token punctuation">(</span>sfd<span class="token punctuation">,</span> SOL_SOCKET<span class="token punctuation">,</span> SO_REUSEADDR<span class="token punctuation">,</span>                       <span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"SO_REUSEADDR"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">bind</span><span class="token punctuation">(</span>sfd<span class="token punctuation">,</span> rp<span class="token operator">-></span>ai_addr<span class="token punctuation">,</span> rp<span class="token operator">-></span>ai_addrlen<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// bind 成功</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 绑定失败记得关闭 socket</span>        <span class="token function">close</span><span class="token punctuation">(</span>sfd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>rp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"Could not bind"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">freeaddrinfo</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> sfd<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 绑定入口</span><span class="token keyword">int</span> <span class="token function">create_and_bind</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>host<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>port<span class="token punctuation">,</span> <span class="token keyword">int</span> socket_family<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> fd<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>socket_family <span class="token operator">==</span> UNIX<span class="token punctuation">)</span>        fd <span class="token operator">=</span> <span class="token function">create_and_bind_unix</span><span class="token punctuation">(</span>host<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        fd <span class="token operator">=</span> <span class="token function">create_and_bind_tcp</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> fd<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 创建一个 non-blocking socket, 监听指定的地址端口</span><span class="token comment">// return server file descriptor</span><span class="token comment">// host 地址或UNIX path</span><span class="token comment">// port 端口</span><span class="token comment">// socket_family 地址族 AF_UNIX 或 AF_INET</span><span class="token keyword">int</span> <span class="token function">make_listen</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>host<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>port<span class="token punctuation">,</span> <span class="token keyword">int</span> socket_family<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> sfd<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sfd <span class="token operator">=</span> <span class="token function">create_and_bind</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">,</span> socket_family<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">set_nonblocking</span><span class="token punctuation">(</span>sfd<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 仅当 TCP链接时设置 TCP_NODELAY</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>socket_family <span class="token operator">==</span> INET<span class="token punctuation">)</span>        <span class="token function">set_tcp_nodelay</span><span class="token punctuation">(</span>sfd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// conf是本程序的配置文件</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">listen</span><span class="token punctuation">(</span>sfd<span class="token punctuation">,</span> conf<span class="token operator">-></span>tcp_backlog<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"listen"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> sfd<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 接收链接后的处理</span><span class="token comment">// return 客户端 fd</span><span class="token comment">// serversock 服务端fd</span><span class="token keyword">int</span> <span class="token function">accept_connection</span><span class="token punctuation">(</span><span class="token keyword">int</span> serversock<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> clientsock<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> addr<span class="token punctuation">;</span>    <span class="token class-name">socklen_t</span> addrlen <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>clientsock <span class="token operator">=</span> <span class="token function">accept</span><span class="token punctuation">(</span>serversock<span class="token punctuation">,</span>                             <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>addr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>addrlen<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">set_nonblocking</span><span class="token punctuation">(</span>clientsock<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 仅当 TCP链接时设置 TCP_NODELAY</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>conf<span class="token operator">-></span>socket_family <span class="token operator">==</span> INET<span class="token punctuation">)</span>        <span class="token function">set_tcp_nodelay</span><span class="token punctuation">(</span>clientsock<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> ip_buff<span class="token punctuation">[</span>INET_ADDRSTRLEN <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 将ip地址转为文本, 这里用作检查客户端地址</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">inet_ntop</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> <span class="token operator">&amp;</span>addr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">,</span>                  ip_buff<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ip_buff<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">close</span><span class="token punctuation">(</span>clientsock<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> clientsock<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 向 fd 发送指定长度的数据</span><span class="token comment">// return 成功发送的数据长度</span><span class="token comment">// fd 发送数据的目的</span><span class="token comment">// buf 发送数据内容地址</span><span class="token comment">// len 需要发送的数据长度</span><span class="token class-name">ssize_t</span> <span class="token function">send_bytes</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 发送数据的总长度</span>    <span class="token class-name">size_t</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 剩余需要发送数据的长度</span>    <span class="token class-name">size_t</span> bytesleft <span class="token operator">=</span> len<span class="token punctuation">;</span>    <span class="token comment">// 单次发送数据长度</span>    <span class="token class-name">ssize_t</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>total <span class="token operator">&lt;</span> len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 发送 bytesleft 长度的数据</span>        n <span class="token operator">=</span> <span class="token function">send</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buf <span class="token operator">+</span> total<span class="token punctuation">,</span> bytesleft<span class="token punctuation">,</span> MSG_NOSIGNAL<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 当 fd 被阻塞时, 直接返回已经发送的长度</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">==</span> EAGAIN <span class="token operator">||</span> errno <span class="token operator">==</span> EWOULDBLOCK<span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                <span class="token keyword">goto</span> err<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        total <span class="token operator">+=</span> n<span class="token punctuation">;</span>        bytesleft <span class="token operator">-=</span> n<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> total<span class="token punctuation">;</span>err<span class="token operator">:</span>    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"send(2) - error sending data: %s"</span><span class="token punctuation">,</span> <span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 从 fd 中获得指定长度的数据</span><span class="token comment">// retrun 成功读取的长度 -1 表示异常</span><span class="token comment">// fd 数据源</span><span class="token comment">// buf 存放结果的指针</span><span class="token comment">// bufsize 期望读取的数据长度</span><span class="token class-name">ssize_t</span> <span class="token function">recv_bytes</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> bufsize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 单次获取的数据长度</span>    <span class="token class-name">ssize_t</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 获取的总数据长度</span>    <span class="token class-name">ssize_t</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>total <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token class-name">ssize_t</span><span class="token punctuation">)</span> bufsize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 使用 recv 函数获得最大 bufsize - total 的数据</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token function">recv</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> bufsize <span class="token operator">-</span> total<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// fd被阻塞了, 此时total的返回也许是小于 bufsize 的值, 调用者可以选择重试</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">==</span> EAGAIN <span class="token operator">||</span> errno <span class="token operator">==</span> EWOULDBLOCK<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span>                <span class="token comment">// 对于其他的异常则报错</span>                <span class="token keyword">goto</span> err<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        buf <span class="token operator">+=</span> n<span class="token punctuation">;</span>        total <span class="token operator">+=</span> n<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> total<span class="token punctuation">;</span>err<span class="token operator">:</span>    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"recv(2) - error reading data: %s"</span><span class="token punctuation">,</span> <span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="epoll-封装"><a href="#epoll-封装" class="headerlink" title="epoll 封装"></a>epoll 封装</h1><p>为了让 <strong>epoll</strong> API能够更加简单易用。我对 epoll 进行了一些的封装，让我们就可以通过注册回调函数的方式来响应事件。</p><p>网络上有很多使用 epoll 的示例，大部分都是描述基本用法：注册一个 socket 并启动一个循环来监听事件，每当 socket 需要被读写时，调用一个函数来使用它们。这些例子当然简单好用，但是并没有告诉我们如何通过回调的方式使用 epoll。经过思考后，我发现可以使用 <code>epoll_event</code> 自带的 <code>epoll_data</code> 来解决这个问题：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">union</span> epoll_data <span class="token punctuation">&#123;</span>   <span class="token keyword">void</span>        <span class="token operator">*</span>ptr<span class="token punctuation">;</span>   <span class="token keyword">int</span>          fd<span class="token punctuation">;</span>   <span class="token class-name">uint32_t</span>     u32<span class="token punctuation">;</span>   <span class="token class-name">uint64_t</span>     u64<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token class-name">epoll_data_t</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>正如你看到的，<code>epoll_data</code> 中有一个 <code>void *</code>，一个常常用来保存fd的 <code>int</code>，还有两个大小不同的 <code>uint</code>。我计划做一个自定义事件结构体，其中包括了fd、一些自定义数据和最关键的回调函数指针。然后我们可以把自定义事件结构体绑定到 <code>epoll_data</code> 的 <code>void *</code> 中，如此一来，每当事件发生时，我们都可以通过 <code>epoll_data</code> 获得所有我们需要的东西。</p><p>我想要定义两种类型的回调，一种是事件触发的回调，另一种是间隔触发的周期性回调。我们需要把 epoll 封装到一个自定义结构里，来实现这两种回调。对于这两种回调的处理，我们则会采用完全相同的方式：获得 <code>epoll_data</code>，在其中获得所有我们所需的数据和需要执行的回调函数。</p><p><strong>接收数据包并使用 epoll_wait 处理的顺序图</strong><br><img src="/2023/12/19/translate-sol-2/epoll-sequential.png" alt="Epoll sequential diagram"></p><p>我们需要定义两种结构体和一种函数指针</p><ul><li><strong>struct evloop</strong> 封装 epoll 实例的结构体，添加了各种参数用来实现我们的业务设计</li><li><strong>struct closure</strong> 上文中提到的自定义事件结构体，封装了各种事件参数和回调函数的指针</li><li>**void callback(struct evloop <em>, void <em>)</em></em> 回调函数的接口，在 <strong>closure</strong> 里真正被执行的函数的接口</li></ul><p>另外，我们需要在 .c 文件中实现一些对 <code>evloop</code> 的创建、删除和管理功能。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>src/network.h</span></div><code class="language-c"><span class="token comment">// epoll 的业务包装，包括 epoll 实例本身和其他参数</span><span class="token comment">// 使用 EPOLLONESHOT 处理事件，并且每次都需要手动重置，这样可以保证未来适应多线程架构</span><span class="token keyword">struct</span> <span class="token class-name">evloop</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> epollfd<span class="token punctuation">;</span>                <span class="token comment">// epoll 实例fd</span>    <span class="token keyword">int</span> max_events<span class="token punctuation">;</span>             <span class="token comment">// 单次处理事件最大数量</span>    <span class="token keyword">int</span> timeout<span class="token punctuation">;</span>                <span class="token comment">// 事件等待超时事件</span>    <span class="token keyword">int</span> status<span class="token punctuation">;</span>                 <span class="token comment">// 运行状态(是否运行中)</span>    <span class="token keyword">struct</span> <span class="token class-name">epoll_event</span> <span class="token operator">*</span>events<span class="token punctuation">;</span> <span class="token comment">// 事件数组, 用来接收 epoll_wait 获得的一组并发事件</span>    <span class="token comment">// 周期性任务控制相关</span>    <span class="token keyword">int</span> periodic_maxsize<span class="token punctuation">;</span>       <span class="token comment">// 周期性任务数组初始大小</span>    <span class="token keyword">int</span> periodic_nr<span class="token punctuation">;</span>            <span class="token comment">// 当前周期性任务数量</span>    <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> timerfd<span class="token punctuation">;</span>        <span class="token keyword">struct</span> <span class="token class-name">closure</span> <span class="token operator">*</span>closure<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token operator">*</span><span class="token operator">*</span>periodic_tasks<span class="token punctuation">;</span>         <span class="token comment">// 周期性任务列表 timerfd &lt;-> closure</span><span class="token punctuation">&#125;</span> evloop<span class="token punctuation">;</span><span class="token comment">// 回调函数接口</span><span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">evloop</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 自定义事件结构体</span><span class="token keyword">struct</span> <span class="token class-name">closure</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> fd<span class="token punctuation">;</span>                     <span class="token comment">// 监听的 fd</span>    <span class="token keyword">void</span> <span class="token operator">*</span>obj<span class="token punctuation">;</span>                  <span class="token comment">// 存放一些需要的自定义数据</span>    <span class="token keyword">void</span> <span class="token operator">*</span>args<span class="token punctuation">;</span>                 <span class="token comment">// 可以被callback使用的参数, 指向用户自定义结构, 实际调用时就是 call 的第二个参数</span>    <span class="token keyword">char</span> closure_id<span class="token punctuation">[</span>UUID_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// closure 的 UUID</span>    <span class="token keyword">struct</span> <span class="token class-name">bytestring</span> <span class="token operator">*</span>payload<span class="token punctuation">;</span> <span class="token comment">// callback 的结果, 可以被网络发送的数据流</span>    callback <span class="token operator">*</span>call<span class="token punctuation">;</span>             <span class="token comment">// 会被执行的回调函数</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// evloop 的创建、初始化、销毁函数</span><span class="token keyword">struct</span> <span class="token class-name">evloop</span> <span class="token operator">*</span><span class="token function">evloop_create</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">evloop_init</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">evloop</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">evloop_free</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">evloop</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 一个阻塞的循环, 监听各种触发并执行对应的回调</span><span class="token keyword">int</span> <span class="token function">evloop_wait</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">evloop</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 添加一个 closure, 其中包含一个回调函数</span><span class="token comment">// 回调函数是单次触发的(边沿触发), 但是每次触发后都会被重置, 这样下次依然可以触发</span><span class="token keyword">void</span> <span class="token function">evloop_add_callback</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">evloop</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">closure</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 添加一个周期性的 closure, 间隔指定事件触发</span><span class="token keyword">void</span> <span class="token function">evloop_add_periodic_task</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">evloop</span> <span class="token operator">*</span><span class="token punctuation">,</span>                              <span class="token keyword">int</span><span class="token punctuation">,</span>                              <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">,</span>                              <span class="token keyword">struct</span> <span class="token class-name">closure</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 注销一个 closure, 删除对其 fd 的监听</span><span class="token keyword">int</span> <span class="token function">evloop_del_callback</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">evloop</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">closure</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 重置该 closure 对 read 事件的监听</span><span class="token keyword">int</span> <span class="token function">evloop_rearm_callback_read</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">evloop</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">closure</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 重置该 closure 对 write 事件的监听</span><span class="token keyword">int</span> <span class="token function">evloop_rearm_callback_write</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">evloop</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">closure</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 以下三个函数是对 epoll 原始API的封装, 供上方的函数调用</span><span class="token comment">// EPOLL_CTL_ADD 的封装, 向 epoll 添加监听</span><span class="token keyword">int</span> <span class="token function">epoll_add</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// EPOLL_CTL_MOD 的封装, 可以重置 EPOLLONESHOT, 让 closure 下次仍被触发</span><span class="token keyword">int</span> <span class="token function">epoll_mod</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// EPOLL_CTL_DEL 的封装, 删除对某个 fd 的监听</span><span class="token keyword">int</span> <span class="token function">epoll_del</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="epoll-封装实现"><a href="#epoll-封装实现" class="headerlink" title="epoll 封装实现"></a>epoll 封装实现</h2><p>在头文件中定义了我们网络所需的各种工具函数后，接下来我们开始进行函数实现。</p><p>让我们先从最简单的开始，<code>evloop</code> 实例的创建、初始化和删除。他包括了这些内容：</p><ul><li><code>epoll</code> 的 <code>fd</code> 即 <code>epollfd</code></li><li>单次处理的最大事件数量</li><li>一个毫秒单位的超时时间</li><li>loop是否正在运行的状态标识</li><li>动态大小的周期性任务数组</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>src/network.c</span></div><code class="language-c"><span class="token comment">/****************************** *         EPOLL APIS         * ******************************/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">EVLOOP_INITIAL_SIZE</span> <span class="token expression"><span class="token number">4</span> </span><span class="token comment">// 默认周期任务数组大小</span></span><span class="token comment">// 创建并初始化 evloop</span><span class="token keyword">struct</span> <span class="token class-name">evloop</span> <span class="token operator">*</span><span class="token function">evloop_create</span><span class="token punctuation">(</span><span class="token keyword">int</span> max_events<span class="token punctuation">,</span> <span class="token keyword">int</span> timeout<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">evloop</span> <span class="token operator">*</span>loop <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>loop<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">evloop_init</span><span class="token punctuation">(</span>loop<span class="token punctuation">,</span> max_events<span class="token punctuation">,</span> timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> loop<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">evloop_init</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">evloop</span> <span class="token operator">*</span>loop<span class="token punctuation">,</span> <span class="token keyword">int</span> max_events<span class="token punctuation">,</span> <span class="token keyword">int</span> timeout<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    loop<span class="token operator">-></span>max_events <span class="token operator">=</span> max_events<span class="token punctuation">;</span>    loop<span class="token operator">-></span>events <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">epoll_event</span><span class="token punctuation">)</span> <span class="token operator">*</span> max_events<span class="token punctuation">)</span><span class="token punctuation">;</span>    loop<span class="token operator">-></span>epollfd <span class="token operator">=</span> <span class="token function">epoll_create1</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 这里创建 epoll 实例</span>    loop<span class="token operator">-></span>timeout <span class="token operator">=</span> timeout<span class="token punctuation">;</span>    loop<span class="token operator">-></span>periodic_maxsize <span class="token operator">=</span> EVLOOP_INITIAL_SIZE<span class="token punctuation">;</span>    loop<span class="token operator">-></span>periodic_nr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    loop<span class="token operator">-></span>periodic_tasks <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>EVLOOP_INITIAL_SIZE <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>loop<span class="token operator">-></span>periodic_tasks<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    loop<span class="token operator">-></span>status <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 释放 evloop</span><span class="token keyword">void</span> <span class="token function">evloop_free</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">evloop</span> <span class="token operator">*</span>loop<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">free</span><span class="token punctuation">(</span>loop<span class="token operator">-></span>events<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> loop<span class="token operator">-></span>periodic_nr<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">free</span><span class="token punctuation">(</span>loop<span class="token operator">-></span>periodic_tasks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>loop<span class="token operator">-></span>periodic_tasks<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>loop<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>接着，我们需要实现三个包装 <code>epoll</code> API的函数，用来创建、修改和删除 <code>epoll</code> 对 <code>fd</code> 的监听。我们封装函数的目的是为所有的 <code>epoll</code> 监听都添加 <code>EPOLLET</code> 和 <code>EPOLLONESHOT</code> 标识。<code>EPOLLET</code> 标识可以让 <code>epoll</code> 工作在<code>边沿触发</code>模式，<code>EPOLLONESHOT</code> 标识则可以确保 <code>epoll</code> 对某个事件触发仅产生一次（然后我们通过手动重置的方式让其可以继续响应）。</p><p>这样的设置可以避免未来我们在使用多线程架构时，一次事件的传入会唤醒所有等待中的线程，这被称为<code>惊群效应</code>(thundering herd problem)，不过这些都是后话，暂时可以不用深究。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>src/network.c</span></div><code class="language-c"><span class="token comment">// 添加监听</span><span class="token comment">// return 添加结果</span><span class="token comment">// efd file descriptor</span><span class="token comment">// fd 被监听的 fd</span><span class="token comment">// evs 被监听的事件(可以是一个或一组)</span><span class="token comment">// data 传入自定义结构体</span><span class="token keyword">int</span> <span class="token function">epoll_add</span><span class="token punctuation">(</span><span class="token keyword">int</span> efd<span class="token punctuation">,</span> <span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">int</span> evs<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">epoll_event</span> ev<span class="token punctuation">;</span>    <span class="token comment">// 在 epoll_data 中设置 fd</span>    ev<span class="token punctuation">.</span>data<span class="token punctuation">.</span>fd <span class="token operator">=</span> fd<span class="token punctuation">;</span>    <span class="token comment">// 注意 epoll_data 是 union, 如果有data并在此处设置, 那么上一行的 ev.data.fd 就不能再使用(是随机数)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span>        ev<span class="token punctuation">.</span>data<span class="token punctuation">.</span>ptr <span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token comment">// 将所有事件都设置为 边沿触发(EPOLLET) 和 触发后取消监听(EPOLLONESHOT)</span>    ev<span class="token punctuation">.</span>events <span class="token operator">=</span> evs <span class="token operator">|</span> EPOLLET <span class="token operator">|</span> EPOLLONESHOT<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">epoll_ctl</span><span class="token punctuation">(</span>efd<span class="token punctuation">,</span> EPOLL_CTL_ADD<span class="token punctuation">,</span> fd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ev<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 修改监听 主要目的是让触发过的事件可以再次被触发</span><span class="token keyword">int</span> <span class="token function">epoll_mod</span><span class="token punctuation">(</span><span class="token keyword">int</span> efd<span class="token punctuation">,</span> <span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">int</span> evs<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">epoll_event</span> ev<span class="token punctuation">;</span>    ev<span class="token punctuation">.</span>data<span class="token punctuation">.</span>fd <span class="token operator">=</span> fd<span class="token punctuation">;</span>    <span class="token comment">// Being ev.data a union, in case of data != NULL, fd will be set to random</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span>        ev<span class="token punctuation">.</span>data<span class="token punctuation">.</span>ptr <span class="token operator">=</span> data<span class="token punctuation">;</span>    ev<span class="token punctuation">.</span>events <span class="token operator">=</span> evs <span class="token operator">|</span> EPOLLET <span class="token operator">|</span> EPOLLONESHOT<span class="token punctuation">;</span>    <span class="token comment">// 通过 EPOLL_CTL_MOD 可以让事件再次能被触发</span>    <span class="token keyword">return</span> <span class="token function">epoll_ctl</span><span class="token punctuation">(</span>efd<span class="token punctuation">,</span> EPOLL_CTL_MOD<span class="token punctuation">,</span> fd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ev<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 删除监听</span><span class="token keyword">int</span> <span class="token function">epoll_del</span><span class="token punctuation">(</span><span class="token keyword">int</span> efd<span class="token punctuation">,</span> <span class="token keyword">int</span> fd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">epoll_ctl</span><span class="token punctuation">(</span>efd<span class="token punctuation">,</span> EPOLL_CTL_DEL<span class="token punctuation">,</span> fd<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>这里有两件事需要注意：</p><ul><li><p>第一，如前所述，<code>epoll_event</code> 中包括了一个 <code>union epoll_data</code>，其中可以保存一个 <code>fd</code> <strong>或</strong> 一个 <code>void *</code>。我们选择了使用后者，传入了我们的 <code>closure</code>，这其中包含了更多有用的信息，也包括 <code>fd</code> 在内。</p></li><li><p>第二，刚才我们定义的添加和修改函数的第三个参数，可以接收一组事件，一般而言是 <code>EPOLLIN</code> 或 <code>EPOLLOUT</code>。同时我们添加了 <code>EPOLLONESHOT</code> 标识，这意味着当事件触发一次后就不会再次触发，除非我们手动重置该事件。这样做是为了保持对低级事件触发的某种程度的控制，并为将来的多线程实现留出空间。这篇<a href="https://idea.popcount.org/2017-02-20-epoll-is-fundamentally-broken-12/">文档</a>精彩地阐述了 <code>epoll</code> 这种设计的好处，以及为什么最好使用 <code>EPOLLONESHOT</code> 标志。</p></li></ul><h2 id="epoll-循环实现"><a href="#epoll-循环实现" class="headerlink" title="epoll 循环实现"></a>epoll 循环实现</h2><p>我们继续实现我们的封装，接下来是一些回调函数的注册、周期回调的注册以及主循环。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>src/network.c</span></div><code class="language-c"><span class="token comment">// 添加回调</span><span class="token comment">// loop loop封装实例</span><span class="token comment">// cb 自定义事件封装 closure</span><span class="token keyword">void</span> <span class="token function">evloop_add_callback</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">evloop</span> <span class="token operator">*</span>loop<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">closure</span> <span class="token operator">*</span>cb<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">epoll_add</span><span class="token punctuation">(</span>loop<span class="token operator">-></span>epollfd<span class="token punctuation">,</span> cb<span class="token operator">-></span>fd<span class="token punctuation">,</span> EPOLLIN<span class="token punctuation">,</span> cb<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"Epoll register callback: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 添加周期事件</span><span class="token comment">// loop loop封装实例</span><span class="token comment">// seconds 以秒为单位的到期时间或触发周期</span><span class="token comment">// ns 以纳秒为单位的到期时间或触发周期</span><span class="token comment">// cb 自定义事件封装</span><span class="token keyword">void</span> <span class="token function">evloop_add_periodic_task</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">evloop</span> <span class="token operator">*</span>loop<span class="token punctuation">,</span>                              <span class="token keyword">int</span> seconds<span class="token punctuation">,</span>                              <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ns<span class="token punctuation">,</span>                              <span class="token keyword">struct</span> <span class="token class-name">closure</span> <span class="token operator">*</span>cb<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 表示时间间隔或时间点的结构</span>    <span class="token keyword">struct</span> <span class="token class-name">itimerspec</span> timervalue<span class="token punctuation">;</span>    <span class="token keyword">int</span> timerfd <span class="token operator">=</span> <span class="token function">timerfd_create</span><span class="token punctuation">(</span>CLOCK_MONOTONIC<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>timervalue<span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>timervalue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设置初始的到期时间 (多久后执行</span>    timervalue<span class="token punctuation">.</span>it_value<span class="token punctuation">.</span>tv_sec <span class="token operator">=</span> seconds<span class="token punctuation">;</span>    timervalue<span class="token punctuation">.</span>it_value<span class="token punctuation">.</span>tv_nsec <span class="token operator">=</span> ns<span class="token punctuation">;</span>    <span class="token comment">// 设置初始的触发周期 (间隔多久执行</span>    timervalue<span class="token punctuation">.</span>it_interval<span class="token punctuation">.</span>tv_sec <span class="token operator">=</span> seconds<span class="token punctuation">;</span>    timervalue<span class="token punctuation">.</span>it_interval<span class="token punctuation">.</span>tv_nsec <span class="token operator">=</span> ns<span class="token punctuation">;</span>    <span class="token comment">// 设置好 timer</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">timerfd_settime</span><span class="token punctuation">(</span>timerfd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>timervalue<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"timerfd_settime"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 将 timer 添加到 epoll, 让其能够触发</span>    <span class="token keyword">struct</span> <span class="token class-name">epoll_event</span> ev<span class="token punctuation">;</span>    ev<span class="token punctuation">.</span>data<span class="token punctuation">.</span>fd <span class="token operator">=</span> timerfd<span class="token punctuation">;</span>    ev<span class="token punctuation">.</span>events <span class="token operator">=</span> EPOLLIN<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">epoll_ctl</span><span class="token punctuation">(</span>loop<span class="token operator">-></span>epollfd<span class="token punctuation">,</span> EPOLL_CTL_ADD<span class="token punctuation">,</span> timerfd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ev<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"epoll_ctl(2): EPOLLIN"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 将周期性任务的信息绑定到 loop</span>    <span class="token comment">// 如果周期性任务的数量大于periodic_maxsize, 动态扩容</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>loop<span class="token operator">-></span>periodic_nr <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">></span> loop<span class="token operator">-></span>periodic_maxsize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        loop<span class="token operator">-></span>periodic_maxsize <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">;</span>        loop<span class="token operator">-></span>periodic_tasks <span class="token operator">=</span>            <span class="token function">realloc</span><span class="token punctuation">(</span>loop<span class="token operator">-></span>periodic_tasks<span class="token punctuation">,</span>                    loop<span class="token operator">-></span>periodic_maxsize <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>loop<span class="token operator">-></span>periodic_tasks<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 存储周期性任务的内容 timerfd 和 自定义事件</span>    loop<span class="token operator">-></span>periodic_tasks<span class="token punctuation">[</span>loop<span class="token operator">-></span>periodic_nr<span class="token punctuation">]</span> <span class="token operator">=</span>        <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>loop<span class="token operator">-></span>periodic_tasks<span class="token punctuation">[</span>loop<span class="token operator">-></span>periodic_nr<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    loop<span class="token operator">-></span>periodic_tasks<span class="token punctuation">[</span>loop<span class="token operator">-></span>periodic_nr<span class="token punctuation">]</span><span class="token operator">-></span>closure <span class="token operator">=</span> cb<span class="token punctuation">;</span>    loop<span class="token operator">-></span>periodic_tasks<span class="token punctuation">[</span>loop<span class="token operator">-></span>periodic_nr<span class="token punctuation">]</span><span class="token operator">-></span>timerfd <span class="token operator">=</span> timerfd<span class="token punctuation">;</span>    <span class="token comment">// 记录当前绑定了多少周期性任务</span>    loop<span class="token operator">-></span>periodic_nr<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// epoll 主循环</span><span class="token keyword">int</span> <span class="token function">evloop_wait</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">evloop</span> <span class="token operator">*</span>el<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> rc <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>             <span class="token comment">// 返回值</span>    <span class="token keyword">int</span> events <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>         <span class="token comment">// 单次触发事件数</span>    <span class="token keyword">long</span> <span class="token keyword">int</span> timer <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span>    <span class="token comment">// 拿到我们周期性事件的 timerfd</span>    <span class="token keyword">int</span> periodic_done <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// 标记是否是周期性事件并且已经执行</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 等待事件发生</span>        events <span class="token operator">=</span> <span class="token function">epoll_wait</span><span class="token punctuation">(</span>el<span class="token operator">-></span>epollfd<span class="token punctuation">,</span> el<span class="token operator">-></span>events<span class="token punctuation">,</span>                            el<span class="token operator">-></span>max_events<span class="token punctuation">,</span> el<span class="token operator">-></span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 有异常</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>events <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 系统中断, 暂时不管</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">==</span> EINTR<span class="token punctuation">)</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token comment">// 确实出了问题, 结束循环</span>            rc <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            el<span class="token operator">-></span>status <span class="token operator">=</span> errno<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 循环处理每个事件</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> events<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 错误校验 检查是否是错误事件 检查是否不是输入输出事件</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>el<span class="token operator">-></span>events<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>events <span class="token operator">&amp;</span> EPOLLERR<span class="token punctuation">)</span> <span class="token operator">||</span>                <span class="token punctuation">(</span>el<span class="token operator">-></span>events<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>events <span class="token operator">&amp;</span> EPOLLHUP<span class="token punctuation">)</span> <span class="token operator">||</span>                <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>el<span class="token operator">-></span>events<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>events <span class="token operator">&amp;</span> EPOLLIN<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                 <span class="token operator">!</span><span class="token punctuation">(</span>el<span class="token operator">-></span>events<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>events <span class="token operator">&amp;</span> EPOLLOUT<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 总之这个 fd 上出现了一些异常, 我们把链接关了</span>                <span class="token function">perror</span> <span class="token punctuation">(</span><span class="token string">"epoll_wait(2)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">shutdown</span><span class="token punctuation">(</span>el<span class="token operator">-></span>events<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>fd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">close</span><span class="token punctuation">(</span>el<span class="token operator">-></span>events<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>                el<span class="token operator">-></span>status <span class="token operator">=</span> errno<span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 拿到我们的 closure</span>            <span class="token keyword">struct</span> <span class="token class-name">closure</span> <span class="token operator">*</span>closure <span class="token operator">=</span> el<span class="token operator">-></span>events<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>ptr<span class="token punctuation">;</span>            <span class="token comment">// 标记没有完成周期事件</span>            periodic_done <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token comment">// 当没有被标识完成时, 循环查找我们存储的周期事件</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> el<span class="token operator">-></span>periodic_nr <span class="token operator">&amp;&amp;</span> periodic_done <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 找到了</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token operator">-></span>events<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>fd <span class="token operator">==</span> el<span class="token operator">-></span>periodic_tasks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>timerfd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// 拿到 closure</span>                    <span class="token keyword">struct</span> <span class="token class-name">closure</span> <span class="token operator">*</span>c <span class="token operator">=</span> el<span class="token operator">-></span>periodic_tasks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>closure<span class="token punctuation">;</span>                    <span class="token comment">// 读 timerfd</span>                    <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token function">read</span><span class="token punctuation">(</span>el<span class="token operator">-></span>events<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>fd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>timer<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 执行回调</span>                    c<span class="token operator">-></span><span class="token function">call</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> c<span class="token operator">-></span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 标记完成</span>                    periodic_done <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>periodic_done <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token comment">// 并不是完成了某个周期性事件 那就是触发事件了 这里执行回调</span>            closure<span class="token operator">-></span><span class="token function">call</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> closure<span class="token operator">-></span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> rc<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 重置该 closure 对 read 事件的监听</span><span class="token keyword">int</span> <span class="token function">evloop_rearm_callback_read</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">evloop</span> <span class="token operator">*</span>el<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">closure</span> <span class="token operator">*</span>cb<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">epoll_mod</span><span class="token punctuation">(</span>el<span class="token operator">-></span>epollfd<span class="token punctuation">,</span> cb<span class="token operator">-></span>fd<span class="token punctuation">,</span> EPOLLIN<span class="token punctuation">,</span> cb<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 重置该 closure 对 write 事件的监听</span><span class="token keyword">int</span> <span class="token function">evloop_rearm_callback_write</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">evloop</span> <span class="token operator">*</span>el<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">closure</span> <span class="token operator">*</span>cb<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">epoll_mod</span><span class="token punctuation">(</span>el<span class="token operator">-></span>epollfd<span class="token punctuation">,</span> cb<span class="token operator">-></span>fd<span class="token punctuation">,</span> EPOLLOUT<span class="token punctuation">,</span> cb<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 删除回调函数</span><span class="token keyword">int</span> <span class="token function">evloop_del_callback</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">evloop</span> <span class="token operator">*</span>el<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">closure</span> <span class="token operator">*</span>cb<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">epoll_del</span><span class="token punctuation">(</span>el<span class="token operator">-></span>epollfd<span class="token punctuation">,</span> cb<span class="token operator">-></span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>在我们之前的所有代码中，<code>evloop_wait</code> 是最有意思的，他启动一个循环不停监视 <code>epoll_wait</code>，执行错误检查，区分本次触发是周期性的自动触发或是读写触发，然后执行我们设置的回调函数。</p><h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>我们的代码越写越多，这次我们又添加了一个模块。</p><p>此时我们的文件结构是这样的：</p><figure><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">sol/ ├── src/ │    ├── mqtt.h |    ├── mqtt.c │    ├── network.h │    ├── network.c │    ├── pack.h │    └── pack.c ├── CHANGELOG ├── CMakeLists.txt ├── COPYING └── README.md<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>MQTT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络编程</tag>
      
      <tag>翻译</tag>
      
      <tag>物联网</tag>
      
      <tag>C</tag>
      
      <tag>MQTT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[问题]Windows环境下nssm注册的mysql服务无法启动</title>
    <link href="/2023/12/15/question-mysqld-service.html"/>
    <url>/2023/12/15/question-mysqld-service.html</url>
    
    <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>手上有个项目上一直使用的一键安装包，包括了上位机、后端、前端、数据库、时序库、nginx等一系列东西。一直都是通过 <code>nssm</code> 将这些软件注册成自启动服务的。注册的方式大概是这样：</p><span id="more"></span><figure><div class="code-wrapper"><pre class="line-numbers language-bat" data-language="bat"><div class="caption"><span>install.bat</span></div><code class="language-bat">:: 注册mysqlnssm-2.24\win64\nssm install xxx-scada-mysql %cd%\mysql-8.0.27-winx64\bin\mysqld.exenssm-2.24\win64\nssm set xxx-scada-mysql AppDirectory %cd%\mysql-8.0.27-winx64\bin:: 启动mysqlnssm-2.24\win64\nssm start xxx-scada-mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>前两天我们需要在公司的一台测试服务器上安装这套项目软件，先检查了公司的服务器环境，发现已经有了 <code>mysql</code> 和 <code>nginx</code> 服务，于是手动停止这两个服务，之后使用一键安装包部署项目。</p><blockquote><p>此时，系统中有一个之前已经安装的 <code>mysql</code>，称为 <code>数据库A</code>。<code>数据库A</code> 通过 <code>mysqld install</code> 命令安装了服务，称为 <code>服务A</code>， <code>服务A</code> 已经被手动停止运行。<br>一键安装包中又拷贝了一份 <code>mysql</code> 进去，称为 <code>数据库B</code>。通过 <code>nssm</code> 安装的 <code>数据库B</code> 服务称为 <code>服务B</code>。</p></blockquote><h1 id="问题过程"><a href="#问题过程" class="headerlink" title="问题过程"></a>问题过程</h1><ol><li>发现通过 <code>nssm</code> 注册的 <code>服务B</code> 无法启动，所以关闭 <code>服务B</code>。</li><li>手动运行 <code>数据库B</code> 中的 <code>mysqld</code> 程序，发现程序闪退，没有报错信息，也没有错误日志。</li><li>怀疑是依赖问题，尝试了更新 <code>MSVC</code> ，没有效果。</li><li>尝试使用 <code>数据库B</code> 中的 <code>mysqld --log-error=my.err</code> ，发现 <code>mysqld</code> 不再闪退，但是此时依然不能正常提供数据库服务，并且没有异常的错误日志。</li><li>同事启动了 <code>服务A</code> ，发现可以正常使用。</li><li>受同事启发，尝试删除 <code>服务A</code>，此时脑袋混乱，居然是使用 <code>数据库B</code> 执行的 <code>mysqld --remove</code>，没想到依然能删除 <code>服务A</code>。</li><li>发现删除 <code>服务A</code> 后，<code>数据库B</code> 中的 <code>mysqld</code> 可以正常使用了，再次尝试 <code>服务B</code> ，发现也可以正常使用。</li></ol><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>本次问题的出现，主要原因还是我对 <code>Windows</code> 系统不熟悉，对于 <code>Windows</code> 系统中服务注册原理完全不懂。</p><p>长期使用 <code>nssm</code> 进行服务管理，让我们可以一直忽略 <code>Windows</code> 的服务管理细节，不断地向前走下去。同时也让我们失去了探索 <code>Windows</code> 服务管理的动力。其实，假如世界上没有 <code>nssm</code> ，也许需要一周，也许需要一两个月，我们总是能学会注册服务的方法。</p><p>因为工具过于方便导致失去了底层能力，这次的问题只是这个道理的再一次体现而已。</p>]]></content>
    
    
    <categories>
      
      <category>问题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目实践</tag>
      
      <tag>问题</tag>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[翻译]Sol - 从零开始的MQTT broker - 第一部分：协议</title>
    <link href="/2023/12/08/translate-sol-1.html"/>
    <url>/2023/12/08/translate-sol-1.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>原文 <a href="https://codepr.github.io/posts/sol-mqtt-broker/">Sol - An MQTT broker from scratch. Part 1 - The protocol</a></p></blockquote><span id="more"></span><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我已经在物联网领域工作有一段时间了，这段时间里我一直在处理物联网架构相关的工作，探索物联网系统开发的最佳模式，研究相关的协议和标准，例如MQTT。</p><p>因为我一直在渴望着提升我编程能力的机会，我觉得在物联网方向深入研究会很有趣也很有好处。因此，我再一次 <code>git init</code> 了一个项目，并且要通过写下这些博客来挑战我自己，强迫自己进步。</p><p><strong>Sol</strong> 是一个C语言项目，一个超级简单的Linux平台的MQTT broker，支持MQTT 3.3.1，不兼容旧的版本，非常类似于轻量级的 <code>Mosquitto</code> （虽然这玩意已经是个轻量级软件了）。由于现在有很多种类的MQTT客户端，所以测试起来会比较简单。最终的成品可能会成为一个更简洁，功能更丰富的软件，我们要创造这个功能的最小化实现。顺便提一下，<strong>Sol</strong> 这个名字的来源有一半的原因是我对短名称的偏好，另一半的原因则是火星日 (The Martian docet)。或者说，<strong>Sol</strong> 可能代表<strong>S</strong>crappy <strong>O</strong>l’ <strong>L</strong>oser。emmmm</p><p><strong>注意</strong>：这个项目一直到最后才会编译，你需要跟写所有的代码步骤。如果你想要在中途进行测试，我建议你自己建一个主函数来做这些测试或者修改。</p><p>一步一步来，我一般会创建一个这样的文件结构来初始化我的C项目：</p><figure><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">sol/ ├── src/ ├── CHANGELOG ├── CMakeLists.txt ├── COPYING └── README.md<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>这里是Github上的<a href="https://github.com/codepr/sol/tree/tutorial">仓库</a>。</p><p>我会尝试着一步一步描述 <strong>Sol</strong> 的开发过程，但我也不会贴上所有的代码，只会解释关键的地方。你想要学习的最好方式依然是亲自编写、编译、修改代码。</p><p>这将是一系列文章，每篇文章都将讨论并主要实施项目的一个概念&#x2F;模块：</p><ul><li><a href="https://codepr.github.io/posts/sol-mqtt-broker/">第一部分 ： 协议</a> MQTT协议数据包处理的基础</li><li><a href="https://codepr.github.io/posts/sol-mqtt-broker-p2/">第二部分 ： 网络</a> 解决网络通讯的功能模块</li><li><a href="https://codepr.github.io/posts/sol-mqtt-broker-p3/">第三部分 ： 服务</a> 程序入口</li><li><a href="https://codepr.github.io/posts/sol-mqtt-broker-p4/">第四部分 ： 数据结构</a> 常用数据结构实现</li><li><a href="https://codepr.github.io/posts/sol-mqtt-broker-p5/">第五部分 ： 主题树</a> 通过特里树处理主题匹配</li><li><a href="https://codepr.github.io/posts/sol-mqtt-broker-p6/">第六部分 ： 处理器</a> 每种数据包的处理函数</li><li><a href="https://codepr.github.io/posts/sol-mqtt-broker-bonus/">特别篇 ： 多线程</a> 各种改进、bug修复、应用多线程</li></ul><p>我想说，虽然 sol 会是一个完全功能的 broker，但仍有很大改进和优化空间，以及可能的一些隐藏功能（俗称BUG）。</p><h1 id="架构设计"><a href="#架构设计" class="headerlink" title="架构设计"></a>架构设计</h1><p><code>broker</code> 的本质是一个中间件，它接受来自多个客户端（生产者）的输入，并使用抽象方法将其转发给一组目标客户端（消费者），这种抽象方法用于定义和管理这些客户端组，形式为 <strong>channel</strong> 或 <strong>topic</strong>（根据协议标准）。与 IRC 频道或通用聊天中的等效概念非常相似，每个消费者客户端都可以订阅 <code>topic</code>，以便接收其他客户端发布到这些 <code>topic</code> 的所有消息。</p><p>第一个想到的是建立在某种数据结构之上的服务器，这种数据结构可以轻松管理这些 <code>topic</code> 和连接的客户端（无论是生产者还是消费者）。客户端收到的每个消息都必须转发给所有订阅了该消息指定 <code>topic</code> 的其他已连接客户端。</p><p>让我们试试这种方法，使用一个 TCP 服务器和一个用于处理数据流的模块。实现服务器的方法有很多，包括线程、fork 进程和多路 I&#x2F;O，这次我将尝试用多路 I&#x2F;O 的方式。</p><p>我们先使用单线程多路 I&#x2F;O 服务器，未来有可能进行多线程拓展。实际上，用于多路复用的 <strong>epoll</strong> 接口是线程安全的。</p><h1 id="MQTT结构"><a href="#MQTT结构" class="headerlink" title="MQTT结构"></a>MQTT结构</h1><p>首先，我们需要基于<a href="http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/errata01/os/mqtt-v3.1.1-errata01-os-complete.html">官方文档</a>，制作一些描述 MQTT 协议数据包的结构体。</p><p>从 opcode 表和 MQTT 头开始，基于文档，每个数据包都包含以下三部分：</p><ul><li>fixed header（必选）</li><li>variable header（可选）</li><li>payload（可选）</li></ul><h2 id="Fixed-Header"><a href="#Fixed-Header" class="headerlink" title="Fixed Header"></a>Fixed Header</h2><p>Fixed Header的第一个字节包括了 <code>MQTT type</code> 和 <code>Flags</code>，第二到第五个字节使用可变编码的方式，存储剩余数据包的长度。</p><figure><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><div class="caption"><span>Fixed Header</span></div><code class="language-text">| Bit    | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 ||--------|---------------|---------------|| Byte 1 | MQTT type     |  Flags        ||--------|-------------------------------|| Byte 2 |                               ||  .     |      Remaining Length         ||  .     |                               || Byte 5 |                               |<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>Flags并不是强制填写的，只是一些控制类数据，内容如下：</p><ul><li>Dup flag： 当消息被发送超过一次时使用</li><li>QoS level： 有以下三种取值 <code>AT_MOST_ONCE</code>&#x3D;0， <code>AT_LEAST_ONCE</code>&#x3D;1 and <code>EXACTLY_ONCE</code>&#x3D;2</li><li>Retain flag： 保留标志，有保留标志的消息被发布到主题时，消息会被保留，之后连接进来的客户端也可以收到该消息。保留消息可以被另一条保留消息覆盖。</li></ul><p>所以，打开 Vim （或者其他任何你喜欢的IDE），创建名为 <code>mqtt.h</code> 的头文件，开始写关于 Fixed Header 的数据结构吧：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>src/mqtt.h</span></div><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MQTT_HEADER_LEN</span> <span class="token expression"><span class="token number">2</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MQTT_ACK_LEN</span>    <span class="token expression"><span class="token number">4</span></span></span><span class="token comment">/* * 回复信息枚举，用于 Fixed Header 中的第一个字节 * 准确的说是只负责设置高位的4bit */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CONNACK_BYTE</span>  <span class="token expression"><span class="token number">0x20</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PUBLISH_BYTE</span>  <span class="token expression"><span class="token number">0x30</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PUBACK_BYTE</span>   <span class="token expression"><span class="token number">0x40</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PUBREC_BYTE</span>   <span class="token expression"><span class="token number">0x50</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PUBREL_BYTE</span>   <span class="token expression"><span class="token number">0x60</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PUBCOMP_BYTE</span>  <span class="token expression"><span class="token number">0x70</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SUBACK_BYTE</span>   <span class="token expression"><span class="token number">0x90</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">UNSUBACK_BYTE</span> <span class="token expression"><span class="token number">0xB0</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PINGRESP_BYTE</span> <span class="token expression"><span class="token number">0xD0</span></span></span><span class="token comment">/* 信息类型 */</span><span class="token keyword">enum</span> <span class="token class-name">packet_type</span> <span class="token punctuation">&#123;</span>    CONNECT     <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>    CONNACK     <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>    PUBLISH     <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span>    PUBACK      <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span>    PUBREC      <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span>    PUBREL      <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">,</span>    PUBCOMP     <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">,</span>    SUBSCRIBE   <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">,</span>    SUBACK      <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">,</span>    UNSUBSCRIBE <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span>    UNSUBACK    <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">,</span>    PINGREQ     <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">,</span>    PINGRESP    <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">,</span>    DISCONNECT  <span class="token operator">=</span> <span class="token number">14</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">enum</span> <span class="token class-name">qos_level</span> <span class="token punctuation">&#123;</span> AT_MOST_ONCE<span class="token punctuation">,</span> AT_LEAST_ONCE<span class="token punctuation">,</span> EXACTLY_ONCE <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">union</span> mqtt_header <span class="token punctuation">&#123;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> byte<span class="token punctuation">;</span>         <span class="token comment">// 将 header 视为一个byte操作</span>    <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// 将 header 视为内部结构分开操作</span>        <span class="token keyword">unsigned</span> retain <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">// 保留标识</span>        <span class="token keyword">unsigned</span> qos <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">;</span>       <span class="token comment">// qos标识</span>        <span class="token keyword">unsigned</span> dup <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>       <span class="token comment">// 重复标识</span>        <span class="token keyword">unsigned</span> type <span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">;</span>      <span class="token comment">// 4bit Flags</span>    <span class="token punctuation">&#125;</span> bits<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>最上方的两个 <code>#define</code> 定义了 MQTT Fixed Header 和 MQTT ACK 的长度。</p><p>正如你在代码中看到的，我们利用了 <strong>union</strong>——一种可以在内存中的同一位置存储多种表示形式的结构——来表示一个字节。换句话说，与普通的 <code>struct</code> 不同，<code>union</code> 中只能有一个字段具有值（在此例中是byte或bits）。它们的内存位置是共享的，因此，通过使用<strong>位字段</strong>，我们可以有效地操作单个比特或字节的一部分。</p><h2 id="CONNECT"><a href="#CONNECT" class="headerlink" title="CONNECT"></a>CONNECT</h2><p>我们要定义的第一个控制数据包是 CONNECT。 这是当客户端建立新连接时必须发送的第一个数据包，CONNECT 包必须是有且仅有一个，否则视为与协议不符，服务端需要断开连接。</p><p>对于每个 CONNECT，服务端需要在响应中回复 CONNACK。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>src/mqtt.h</span></div><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">mqtt_connect</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">union</span> mqtt_header header<span class="token punctuation">;</span>               <span class="token comment">// 第一个byte是通用头</span>    <span class="token keyword">union</span> <span class="token punctuation">&#123;</span>                                 <span class="token comment">// 第二个byte表示一些控制信息</span>        <span class="token keyword">unsigned</span> <span class="token keyword">char</span> byte<span class="token punctuation">;</span>        <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> reserved <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">unsigned</span> clean_session <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>     <span class="token comment">// 为1时表示新session，否则表示已有session</span>            <span class="token keyword">unsigned</span> will <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>              <span class="token comment">// 表示是否有遗嘱</span>            <span class="token keyword">unsigned</span> will_qos <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">;</span>          <span class="token comment">// 表示遗嘱的QOS</span>            <span class="token keyword">unsigned</span> will_retain <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>       <span class="token comment">// 表示遗嘱发布时是否保留</span>            <span class="token keyword">unsigned</span> password <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token comment">// 表示是否有密码</span>            <span class="token keyword">unsigned</span> username <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token comment">// 表示是否有用户名</span>        <span class="token punctuation">&#125;</span> bits<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>                                <span class="token comment">// 载荷</span>        <span class="token keyword">unsigned</span> <span class="token keyword">short</span> keepalive<span class="token punctuation">;</span>           <span class="token comment">// 会话保活时间，单位秒</span>        <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>client_id<span class="token punctuation">;</span>        <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>username<span class="token punctuation">;</span>        <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>password<span class="token punctuation">;</span>        <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>will_topic<span class="token punctuation">;</span>        <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>will_message<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> payload<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">mqtt_connack</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">union</span> mqtt_header header<span class="token punctuation">;</span>    <span class="token keyword">union</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">unsigned</span> <span class="token keyword">char</span> byte<span class="token punctuation">;</span>        <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">unsigned</span> session_present <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">unsigned</span> reserved <span class="token operator">:</span> <span class="token number">7</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> bits<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> rc<span class="token punctuation">;</span> <span class="token comment">// return code 返回值</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>按照这个模式，结合 MQTT v3.1.1 的文档，其他数据包的定义也比较简单了。</p><h2 id="SUBSCRIBE-UNSUBSCRIBE-PUBLISH-ACK等"><a href="#SUBSCRIBE-UNSUBSCRIBE-PUBLISH-ACK等" class="headerlink" title="SUBSCRIBE UNSUBSCRIBE PUBLISH ACK等"></a>SUBSCRIBE UNSUBSCRIBE PUBLISH ACK等</h2><p>接下来我们处理 SUBSCRIBE，UNSUBSCRIBE 和 PUBLISH。SUBSCRIBE 必须要使用 SUBACK 来响应，其他的都可以使用通用 ACK，并设置 <strong>typedef</strong> 字段的值来响应。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>src/mqtt.h</span></div><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">mqtt_subscribe</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">union</span> mqtt_header header<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> pkt_id<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> tuples_len<span class="token punctuation">;</span>      <span class="token comment">// 接下来数据元组的长度</span>    <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">unsigned</span> <span class="token keyword">short</span> topic_len<span class="token punctuation">;</span>   <span class="token comment">// 接下来 topic 字符串的长度</span>        <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>topic<span class="token punctuation">;</span>        <span class="token keyword">unsigned</span> qos<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token operator">*</span>tuples<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">mqtt_unsubscribe</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">union</span> mqtt_header header<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> pkt_id<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> tuples_len<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">unsigned</span> <span class="token keyword">short</span> topic_len<span class="token punctuation">;</span>        <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>topic<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token operator">*</span>tuples<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">mqtt_suback</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 针对 SUB 动作的响应</span>    <span class="token keyword">union</span> mqtt_header header<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> pkt_id<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> rcslen<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>rcs<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">mqtt_publish</span> <span class="token punctuation">&#123;</span>               <span class="token comment">// 发布消息</span>    <span class="token keyword">union</span> mqtt_header header<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> pkt_id<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> topiclen<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>topic<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> payloadlen<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>payload<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">mqtt_ack</span> <span class="token punctuation">&#123;</span>                   <span class="token comment">// 通用响应</span>    <span class="token keyword">union</span> mqtt_header header<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> pkt_id<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>剩余的这一类ACK包：</p><ul><li>PUBACK</li><li>PUBREC</li><li>PUBREL</li><li>PUBCOMP</li><li>UNSUBACK</li><li>PINGREQ</li><li>PINGRESP</li><li>DISCONNECT</li></ul><p>因为有相同的结构，所以都可以通过 typedef 来定义，只是语义有所不同。最后一个 DISCONNECT，虽然严格来说不是一个 ACK，但是也有相同的结构。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>src/mqtt.h</span></div><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">mqtt_ack</span> mqtt_puback<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">mqtt_ack</span> mqtt_pubrec<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">mqtt_ack</span> mqtt_pubrel<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">mqtt_ack</span> mqtt_pubcomp<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">mqtt_ack</span> mqtt_unsuback<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">union</span> mqtt_header mqtt_pingreq<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">union</span> mqtt_header mqtt_pingresp<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">union</span> mqtt_header mqtt_disconnect<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="MQTT"><a href="#MQTT" class="headerlink" title="MQTT"></a>MQTT</h2><p>最终我们可以定义一个通用 MQTT 包，包括上面的一切，后续我们所有的 MQTT 数据包都可以用这个结构来表示。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>src/mqtt.h</span></div><code class="language-c"><span class="token keyword">union</span> mqtt_packet <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">mqtt_ack</span> ack<span class="token punctuation">;</span>                    <span class="token comment">// 通用ACK</span>    <span class="token keyword">union</span> mqtt_header header<span class="token punctuation">;</span>               <span class="token comment">// 通用头</span>    <span class="token keyword">struct</span> <span class="token class-name">mqtt_connect</span> connect<span class="token punctuation">;</span>            <span class="token comment">// CONNECT包 (这种包里会包括一个通用头)</span>    <span class="token keyword">struct</span> <span class="token class-name">mqtt_connack</span> connack<span class="token punctuation">;</span>            <span class="token comment">// CONNACK包</span>    <span class="token keyword">struct</span> <span class="token class-name">mqtt_suback</span> suback<span class="token punctuation">;</span>              <span class="token comment">// SUBBACK包</span>    <span class="token keyword">struct</span> <span class="token class-name">mqtt_publish</span> publish<span class="token punctuation">;</span>            <span class="token comment">// PUBLISH包</span>    <span class="token keyword">struct</span> <span class="token class-name">mqtt_subscribe</span> subscribe<span class="token punctuation">;</span>        <span class="token comment">// SUB包</span>    <span class="token keyword">struct</span> <span class="token class-name">mqtt_unsubscribe</span> unsubscribe<span class="token punctuation">;</span>    <span class="token comment">// UNSUB包</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="MQTT函数"><a href="#MQTT函数" class="headerlink" title="MQTT函数"></a>MQTT函数</h1><h2 id="编码解码"><a href="#编码解码" class="headerlink" title="编码解码"></a>编码解码</h2><p>现在我们继续定义一些公共函数。在 <code>src/mqtt.h</code> 中，我们需要考虑其他模块使用 MQTT 协议时会用到哪些函数。</p><p>为了使用 MQTT 协议处理通信，我们基本上需要 4 个函数，其中客户端向服务端有 2 个，服务端向客户端也是 2 个：</p><ul><li>一个编码函数（总之就是把内存里的数据做成二进制流，这里不讨论术语）</li><li>一个解码函数（就是从二进制流恢复成内存结构）</li></ul><p>我们还需要 2 个函数来处理 fixed head 部分中变长的 Remaining Length 字段。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>src/mqtt.h</span></div><code class="language-c"><span class="token comment">// 编码时生成 Remaining Length</span><span class="token keyword">int</span> <span class="token function">mqtt_encode_length</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token class-name">size_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// size_t 指uint32 或 uint64</span><span class="token comment">// 解码时解析 Remaining Length</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">mqtt_decode_length</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 将char * 解码为 mqtt_packet *</span><span class="token keyword">int</span> <span class="token function">unpack_mqtt_packet</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">union</span> mqtt_packet <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 将 mqtt_packet * 编码为 char *</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">pack_mqtt_packet</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">union</span> mqtt_packet <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// unsigned指 unsigned int</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="内存操作"><a href="#内存操作" class="headerlink" title="内存操作"></a>内存操作</h2><p>我们还需要一些工具函数，用来进行基于数据包的内存分配、释放，这里没啥特别的。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>src/mqtt.h</span></div><code class="language-c"><span class="token comment">// 申请内存，制作各种MQTT包</span><span class="token keyword">union</span> mqtt_header <span class="token operator">*</span><span class="token function">mqtt_packet_header</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">mqtt_ack</span> <span class="token operator">*</span><span class="token function">mqtt_packet_ack</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">mqtt_connack</span> <span class="token operator">*</span><span class="token function">mqtt_packet_connack</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token punctuation">,</span>                                         <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token punctuation">,</span>                                         <span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">mqtt_suback</span> <span class="token operator">*</span><span class="token function">mqtt_packet_suback</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span><span class="token punctuation">,</span>                                       <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">mqtt_publish</span> <span class="token operator">*</span><span class="token function">mqtt_packet_publish</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span><span class="token punctuation">,</span> <span class="token class-name">size_t</span><span class="token punctuation">,</span>                                         <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">,</span>                                         <span class="token class-name">size_t</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 释放MQTT包</span><span class="token keyword">void</span> <span class="token function">mqtt_packet_release</span><span class="token punctuation">(</span><span class="token keyword">union</span> mqtt_packet <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="函数实现"><a href="#函数实现" class="headerlink" title="函数实现"></a>函数实现</h1><h2 id="MQTT包编解码接口"><a href="#MQTT包编解码接口" class="headerlink" title="MQTT包编解码接口"></a>MQTT包编解码接口</h2><p>好了，我们现在有一个不错的头文件了，定义了我们通讯协议中的所有内容，现在我们需要实现这些函数了。为了能够实现这些功能，首先我们要定义几个<strong>私有</strong>的帮助函数，用来进行编码和解码的动作。这些函数会被<strong>公有</strong>函数<code>unpack_mqtt_packet</code> 和 <code>pack_mqtt_packet</code> 调用。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>src/mqtt.c</span></div><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"mqtt.h"</span></span><span class="token comment">// 一系列对于具体类型包的 pack unpack 函数</span><span class="token keyword">static</span> <span class="token class-name">size_t</span> <span class="token function">unpack_mqtt_connect</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">,</span>                                  <span class="token keyword">union</span> mqtt_header <span class="token operator">*</span><span class="token punctuation">,</span>                                  <span class="token keyword">union</span> mqtt_packet <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token class-name">size_t</span> <span class="token function">unpack_mqtt_publish</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">,</span>                                  <span class="token keyword">union</span> mqtt_header <span class="token operator">*</span><span class="token punctuation">,</span>                                  <span class="token keyword">union</span> mqtt_packet <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token class-name">size_t</span> <span class="token function">unpack_mqtt_subscribe</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">,</span>                                    <span class="token keyword">union</span> mqtt_header <span class="token operator">*</span><span class="token punctuation">,</span>                                    <span class="token keyword">union</span> mqtt_packet <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token class-name">size_t</span> <span class="token function">unpack_mqtt_unsubscribe</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">,</span>                                      <span class="token keyword">union</span> mqtt_header <span class="token operator">*</span><span class="token punctuation">,</span>                                      <span class="token keyword">union</span> mqtt_packet <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token class-name">size_t</span> <span class="token function">unpack_mqtt_ack</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">,</span>                              <span class="token keyword">union</span> mqtt_header <span class="token operator">*</span><span class="token punctuation">,</span>                              <span class="token keyword">union</span> mqtt_packet <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">pack_mqtt_header</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">union</span> mqtt_header <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">pack_mqtt_ack</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">union</span> mqtt_packet <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">pack_mqtt_connack</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">union</span> mqtt_packet <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">pack_mqtt_suback</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">union</span> mqtt_packet <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">pack_mqtt_publish</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">union</span> mqtt_packet <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="二进制流编解码实现"><a href="#二进制流编解码实现" class="headerlink" title="二进制流编解码实现"></a>二进制流编解码实现</h2><p>在继续实现 <code>src/mqtt.h</code> 上所有定义的函数之前，我们需要实现一些辅助函数，以简化每个接收到的数据包的编码解码过程。</p><p>让我们快速搞定这部分，这一块只是简单的序列化和反序列化操作而已（记得用Big-endian就行）。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>src/pack.h</span></div><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h></span></span><span class="token comment">/* 从数据流中获得数据的方法 */</span><span class="token comment">// bytes -> uint8_t</span><span class="token class-name">uint8_t</span> <span class="token function">unpack_u8</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// bytes -> uint16_t</span><span class="token class-name">uint16_t</span> <span class="token function">unpack_u16</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// bytes -> uint32_t</span><span class="token class-name">uint32_t</span> <span class="token function">unpack_u32</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 读取定义的 len 个字节（用来读取字符串）</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token function">unpack_bytes</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token class-name">size_t</span><span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 读取字符串前面的 ushort 长度，并申请 dest内存块存字符串</span><span class="token class-name">uint16_t</span> <span class="token function">unpack_string16</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token operator">*</span>dest<span class="token punctuation">)</span><span class="token comment">/* 将数据写入数据流的方法 */</span><span class="token comment">// append a uint8_t -> bytes into the bytestring</span><span class="token keyword">void</span> <span class="token function">pack_u8</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token class-name">uint8_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// append a uint16_t -> bytes into the bytestring</span><span class="token keyword">void</span> <span class="token function">pack_u16</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token class-name">uint16_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// append a uint32_t -> bytes into the bytestring</span><span class="token keyword">void</span> <span class="token function">pack_u32</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token class-name">uint32_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 将 len 个字节追加到bytes中</span><span class="token keyword">void</span> <span class="token function">pack_bytes</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>以及相应的实现</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>src/pack.c</span></div><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"pack.h"</span></span><span class="token comment">// Reading data</span><span class="token class-name">uint8_t</span> <span class="token function">unpack_u8</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token operator">*</span>buf<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">uint8_t</span> val <span class="token operator">=</span> <span class="token operator">*</span><span class="token operator">*</span>buf<span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token operator">*</span>buf<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> val<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">uint16_t</span> <span class="token function">unpack_u16</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token operator">*</span>buf<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">uint16_t</span> val<span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>val<span class="token punctuation">,</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token operator">*</span>buf<span class="token punctuation">)</span> <span class="token operator">+=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">ntohs</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">uint32_t</span> <span class="token function">unpack_u32</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token operator">*</span>buf<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">uint32_t</span> val<span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>val<span class="token punctuation">,</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token operator">*</span>buf<span class="token punctuation">)</span> <span class="token operator">+=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">ntohl</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token function">unpack_bytes</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> len<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>str<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>    str<span class="token punctuation">[</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token operator">*</span>buf<span class="token punctuation">)</span> <span class="token operator">+=</span> len<span class="token punctuation">;</span>    <span class="token keyword">return</span> str<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">uint16_t</span> <span class="token function">unpack_string16</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token operator">*</span>dest<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">uint16_t</span> len <span class="token operator">=</span> <span class="token function">unpack_u16</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>dest <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>dest <span class="token operator">=</span> <span class="token function">unpack_bytes</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> len<span class="token punctuation">,</span> <span class="token operator">*</span>dest<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> len<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// Write data</span><span class="token keyword">void</span> <span class="token function">pack_u8</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token operator">*</span><span class="token operator">*</span>buf <span class="token operator">=</span> val<span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token operator">*</span>buf<span class="token punctuation">)</span> <span class="token operator">+=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">pack_u16</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">uint16_t</span> htonsval <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token operator">&amp;</span>htonsval<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token operator">*</span>buf<span class="token punctuation">)</span> <span class="token operator">+=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">pack_u32</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">uint32_t</span> htonlval <span class="token operator">=</span> <span class="token function">htonl</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token operator">&amp;</span>htonlval<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token operator">*</span>buf<span class="token punctuation">)</span> <span class="token operator">+=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">pack_bytes</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>str<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">size_t</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token operator">*</span>buf<span class="token punctuation">,</span> str<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token operator">*</span>buf<span class="token punctuation">)</span> <span class="token operator">+=</span> len<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>这样我们就完成了字节流和数据类型的双向转换工作。</p><h2 id="Remaining-Length编解码实现"><a href="#Remaining-Length编解码实现" class="headerlink" title="Remaining Length编解码实现"></a>Remaining Length编解码实现</h2><p>完成了 <code>pack</code> 部分后，我们需要把他们运用在我们的MQTT包里，首先当然是：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>src/mqtt.c</span></div><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"pack.h"</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>第一步我们可以实现对 Fixed Header 中的 Remaining Length 字段的操作。MQTT文档中提供了这一段实现的伪代码，我们可以仿写一下。</p><p>让我们来看看 Remaining Length 如何用1-4个变长的Byte来表示剩余包的长度。</p><blockquote><p>Remaining Length 表示的是数据包剩余部分的长度，包括 variable header 和 payload。Remaining Length 中表示的长度不包括 Remaining Length 字段本身所占用的长度。</p><p>Remaining Length 的编码使用了一种可变长度编码方案，该方案对 127 以下的值使用单个字节。较大的值则按以下方式处理：每个字节的低 7 位编码数据，高位用于指示是否存在后续字节。因此，每个字节编码 128 个值和一个 “延续位”。Remaining Length 字段的最大字节数为 4。</p></blockquote><p>MQTT的文档已经描述的非常清晰，我们只需要实现。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>src/mqtt.c</span></div><code class="language-c"><span class="token comment">/* * 基于 MQTT v3.1.1，Fixed Header 中的 Remaining Length 最大为4byte */</span><span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">int</span> MAX_LEN_BYTES <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token comment">/* * 根据数据包长度制作变长的 Remaining Length * return Remaining Length 的字节长度 * buf Remaining Length 的数据流 * len Remaining Length 应该表示的值（可变头+载荷总长度） */</span><span class="token keyword">int</span> <span class="token function">mqtt_encode_length</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 字节长度</span>    <span class="token keyword">int</span> bytes <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bytes <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">></span> MAX_LEN_BYTES<span class="token punctuation">)</span>            <span class="token keyword">return</span> bytes<span class="token punctuation">;</span>        <span class="token keyword">short</span> d <span class="token operator">=</span> len <span class="token operator">%</span> <span class="token number">128</span><span class="token punctuation">;</span>        len <span class="token operator">/=</span> <span class="token number">128</span><span class="token punctuation">;</span>        <span class="token comment">// len > 0 表示还有后续位</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            d <span class="token operator">|=</span> <span class="token number">128</span><span class="token punctuation">;</span> <span class="token comment">// 标记最高位</span>        buf<span class="token punctuation">[</span>bytes<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>len <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> bytes<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* * 解析数据流中的 Remaing Length 并将指针移动到下一个位置 * return Remaining Length 的值 * buf Remaining Length 的数据流 * * TODO Handle case where multiplier > 128 * 128 * 128 */</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">mqtt_decode_length</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>buf<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> c<span class="token punctuation">;</span>    <span class="token comment">// 乘数</span>    <span class="token keyword">int</span> multiplier <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">// 值</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> value <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>        c <span class="token operator">=</span> <span class="token operator">*</span><span class="token operator">*</span>buf<span class="token punctuation">;</span>        value <span class="token operator">+=</span> <span class="token punctuation">(</span>c <span class="token operator">&amp;</span> <span class="token number">127</span><span class="token punctuation">)</span> <span class="token operator">*</span> multiplier<span class="token punctuation">;</span>        multiplier <span class="token operator">*=</span> <span class="token number">128</span><span class="token punctuation">;</span>        <span class="token comment">// 后移一位</span>        <span class="token punctuation">(</span><span class="token operator">*</span>buf<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token comment">// 当没有后续位标识时结束</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">&amp;</span> <span class="token number">128</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> value<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="CONNECT-解码实现"><a href="#CONNECT-解码实现" class="headerlink" title="CONNECT 解码实现"></a>CONNECT 解码实现</h2><p>好了，现在我们可以完整的解析 Fixed Header 了，接下来我们试着解码 CONNECT 包。</p><p>CONNECT 是一个有很多flags的包，而且长度仅次于 PUBLISH 包。</p><p>CONNECT 包的内容包括：</p><ul><li>Fixed Header 中的 MQTT type + Flags，高4位（MQTT type）（称为<strong>MSB</strong>）的值是<code>1</code>，表示<code>Connect type</code>，低4位（Flags）（<strong>LSB</strong>）保留</li><li>Fixed Header 中的变长 Remaining Length，表示剩余部分的长度</li><li>Variable Header，由四个字段组成：<ul><li>Protocol Name</li><li>Protocol Level</li><li>Connect Flags</li><li>Keep Alive</li></ul></li><li>可能存在或者不存在的 payload（基于 Connect Flags 的设置）</li></ul><blockquote><p>Protocol Name 是 UTF-8 编码的大写字符串 “MQTT”，这个字段的长度和内容在未来版本的MQTT协议中都不会再改变。</p></blockquote><p>所以 3.1.1 版本的 Protocol Name 就是 “MQTT”，我们也不用去管旧版本的名字是什么了。</p><p>Connect flags 为一个byte，包含了一些关于客户端行为以及是否有 payload 段存在的标识：</p><table><thead><tr><th align="center">Connect flags 中的字段</th><th align="center">大小</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">Username flag</td><td align="center">1bit</td><td align="center">表示用户名存在与否</td></tr><tr><td align="center">Password flag</td><td align="center">1bit</td><td align="center">表示密码存在与否</td></tr><tr><td align="center">Will retain</td><td align="center">1bit</td><td align="center">表示遗嘱是否保留</td></tr><tr><td align="center">Will QoS</td><td align="center">2bit</td><td align="center">表示遗嘱的QOS等级</td></tr><tr><td align="center">Will flag</td><td align="center">1bit</td><td align="center">表示遗嘱存在与否</td></tr><tr><td align="center">Clean Session</td><td align="center">1bit</td><td align="center">表示是否为新链接</td></tr></tbody></table><p>Connect flags的最高位保留，其他所有位都被当作bool值初始化（除了Will QoS），这些bool值在 payload 部分也有相应的字段。比如当 Username 和 Password 的值为1，那么在 payload 中会有 2byte 的 username length，紧随其后的就是 username 字符串，Password也是相同的道理。</p><p>为了说明这件事，假设我们收到了这样一个 CONNECT 包：</p><ul><li>Connect flags 中的 username 和 password 都置为1</li><li>username &#x3D; “hello”</li><li>password &#x3D; “nacho”</li><li>client ID &#x3D; “danzan”</li></ul><p>那么这个数据包应该长这样：</p><table><thead><tr><th>字段</th><th align="center">大小</th><th align="center">偏移量</th><th>描述</th></tr></thead><tbody><tr><td>Packet type + Falgs</td><td align="center">1</td><td align="center">0</td><td>类型为<code>Connect type</code> <code>0x01</code>，Flags为空</td></tr><tr><td>Length</td><td align="center">1</td><td align="center">1</td><td>后续总长度32Byte，小于127，所以可以用1Byte表示</td></tr><tr><td>Protocol name length</td><td align="center">2</td><td align="center">2</td><td>协议名长度，值固定为 <code>0x04</code></td></tr><tr><td>Protocol name</td><td align="center">4</td><td align="center">4</td><td>‘M’ ‘Q’ ‘T’ ‘T’</td></tr><tr><td>Protocol level</td><td align="center">1</td><td align="center">8</td><td>对于MQTT 3.1.1 此字段值为 <code>0x04</code></td></tr><tr><td>Connect flags</td><td align="center">1</td><td align="center">9</td><td>包括 <code>Username</code>, <code>password</code>, <code>will retain</code>, <code>will QoS</code>, <code>will flag</code>, <code>clean session</code></td></tr><tr><td>Keepalive</td><td align="center">2</td><td align="center">10</td><td>ushort，保活时间，单位秒，最大值65536（18小时12分15秒）</td></tr><tr><td>Client ID length</td><td align="center">2</td><td align="center">12</td><td>ushort, 此例中值为<code>0x06</code> (danzan)</td></tr><tr><td>Client ID</td><td align="center">6</td><td align="center">14</td><td>‘d’ ‘a’ ‘n’ ‘z’ ‘a’ ‘n’</td></tr><tr><td>Username length</td><td align="center">2</td><td align="center">20</td><td>ushort, 此例中值为<code>0x05</code> (hello)</td></tr><tr><td>Username</td><td align="center">5</td><td align="center">22</td><td>‘h’ ‘e’ ‘l’ ‘l’ ‘o’</td></tr><tr><td>Password length</td><td align="center">2</td><td align="center">27</td><td>ushort,  此例中值为<code>0x05</code> (nacho)</td></tr><tr><td>Password</td><td align="center">5</td><td align="center">29</td><td>‘n’ ‘a’ ‘c’ ‘h’ ‘o’</td></tr></tbody></table><p>例如因为 Will Flags 被置为0，所以我们不需要在 <code>payload</code> 中解析这个字段（也压根没有），上例中我们要解析的内容总共就是包括 Fixed Header 在内的 34个byte。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>src/mqtt.c</span></div><code class="language-c"><span class="token comment">/* * CONNECT 解码函数 * return Remaing Length 的值 * buf 数据流，从变长长度开始 * hdr 已经解码好的头部 * pkt 返回的解码后数据包 */</span><span class="token keyword">static</span> <span class="token class-name">size_t</span> <span class="token function">unpack_mqtt_connect</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span>                                  <span class="token keyword">union</span> mqtt_header <span class="token operator">*</span>hdr<span class="token punctuation">,</span>                                  <span class="token keyword">union</span> mqtt_packet <span class="token operator">*</span>pkt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 制作一个connect结构体，并且用已经解码好的头部赋值</span>    <span class="token comment">// 此处有一个已经解码好的头部，是因为数据作为二进制流进来的时候，肯定是要先解码出头部，然后再根据包类型分到不同的函数里做进一步解码的</span>    <span class="token keyword">struct</span> <span class="token class-name">mqtt_connect</span> connect <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span>header <span class="token operator">=</span> <span class="token operator">*</span>hdr <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// 将这个结构体赋值到pkt</span>    pkt<span class="token operator">-></span>connect <span class="token operator">=</span> connect<span class="token punctuation">;</span>    <span class="token comment">// 初始指针指向buf的首部</span>    <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>init <span class="token operator">=</span> buf<span class="token punctuation">;</span>    <span class="token comment">/*     * 获得后续的变长总长度,同时将指针移动到 protocol name     */</span>    <span class="token class-name">size_t</span> len <span class="token operator">=</span> <span class="token function">mqtt_decode_length</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 暂时忽略协议名称、保留字段等等，所以直接向后移动8byte</span>    <span class="token comment">// 这里 init 直接+8，暗示了变长长度字段的长度是1byte，所以才能+8后指向Connect flags</span>    buf <span class="token operator">=</span> init <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">;</span>    <span class="token comment">// 读取 Connect flags</span>    pkt<span class="token operator">-></span>connect<span class="token punctuation">.</span>byte <span class="token operator">=</span> <span class="token function">unpack_u8</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 读取 keepalive</span>    pkt<span class="token operator">-></span>connect<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>keepalive <span class="token operator">=</span> <span class="token function">unpack_u16</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 读取 CID 长度（如果有CID则>0，否则为0）</span>    <span class="token class-name">uint16_t</span> cid_len <span class="token operator">=</span> <span class="token function">unpack_u16</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 如果有，则读取CID</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cid_len <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        pkt<span class="token operator">-></span>connect<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>client_id <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>cid_len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">unpack_bytes</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> cid_len<span class="token punctuation">,</span>                     pkt<span class="token operator">-></span>connect<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>client_id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 如果有，则读取遗嘱</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pkt<span class="token operator">-></span>connect<span class="token punctuation">.</span>bits<span class="token punctuation">.</span>will <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">unpack_string16</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pkt<span class="token operator">-></span>connect<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>will_topic<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">unpack_string16</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pkt<span class="token operator">-></span>connect<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>will_message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 如果有，则读取用户名</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pkt<span class="token operator">-></span>connect<span class="token punctuation">.</span>bits<span class="token punctuation">.</span>username <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">unpack_string16</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pkt<span class="token operator">-></span>connect<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 如果有，则读取密码</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pkt<span class="token operator">-></span>connect<span class="token punctuation">.</span>bits<span class="token punctuation">.</span>password <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">unpack_string16</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pkt<span class="token operator">-></span>connect<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> len<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><!-- read --><h2 id="PUBLISH-解码实现"><a href="#PUBLISH-解码实现" class="headerlink" title="PUBLISH 解码实现"></a>PUBLISH 解码实现</h2><p>以下是 PUBLISH 包的结构：</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">|   Bit    |  7  |  6  |  5  |  4  |  3  |  2  |  1  |   0    |  &lt;-- Fixed Header|----------|-----------------------|--------------------------|| Byte 1   |      MQTT type 3      | dup |    QoS    | retain ||----------|--------------------------------------------------|| Byte 2   |                                                  ||  .       |               Remaining Length                   ||  .       |                                                  || Byte 5   |                                                  ||----------|--------------------------------------------------|  &lt;-- Variable Header| Byte 6   |                Topic len MSB                     || Byte 7   |                Topic len LSB                     ||-------------------------------------------------------------|| Byte 8   |                                                  ||   .      |                Topic name                        || Byte N   |                                                  ||----------|--------------------------------------------------|| Byte N+1 |            Packet Identifier MSB                 || Byte N+2 |            Packet Identifier LSB                 ||----------|--------------------------------------------------|  &lt;-- Payload| Byte N+3 |                   Payload                        || Byte N+M |                                                  |<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>仅当 QoS level &gt; 0 时，存在 Packet identifier MSB 和 LSB。当 QoS 被设置为 <em>at most once</em> （值为0）时，没有必要存在 packet ID。</p><p>Payload部分的长度通过 Remaining Length 减去其他所有内容计算得来。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>src/mqtt.c</span></div><code class="language-c"><span class="token comment">/* * PUBLISH 解码函数 * return Remaing Length 的值 * buf 数据流，从变长长度开始 * hdr 已经解码好的头部 * pkt 返回的解码后数据包 */</span><span class="token keyword">static</span> <span class="token class-name">size_t</span> <span class="token function">unpack_mqtt_publish</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span>                                  <span class="token keyword">union</span> mqtt_header <span class="token operator">*</span>hdr<span class="token punctuation">,</span>                                  <span class="token keyword">union</span> mqtt_packet <span class="token operator">*</span>pkt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 创建 PUBLISH 包并且使用已经解码好的 header 赋值</span>    <span class="token keyword">struct</span> <span class="token class-name">mqtt_publish</span> publish <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span>header <span class="token operator">=</span> <span class="token operator">*</span>hdr <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// 准备给返回值提供这个 PUBLISH 包</span>    pkt<span class="token operator">-></span>publish <span class="token operator">=</span> publish<span class="token punctuation">;</span>    <span class="token comment">// 通过变长的 Remaing Length 字段获取剩余部分的长度</span>    <span class="token class-name">size_t</span> len <span class="token operator">=</span> <span class="token function">mqtt_decode_length</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 获得 topiclen 和 topic 内容</span>    pkt<span class="token operator">-></span>publish<span class="token punctuation">.</span>topiclen <span class="token operator">=</span> <span class="token function">unpack_string16</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pkt<span class="token operator">-></span>publish<span class="token punctuation">.</span>topic<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 将 len 赋值, 并视为 payload 长度</span>    <span class="token class-name">uint16_t</span> message_len <span class="token operator">=</span> len<span class="token punctuation">;</span>    <span class="token comment">// 如果 QoS > 0, 需要读取pkt_id</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>publish<span class="token punctuation">.</span>header<span class="token punctuation">.</span>bits<span class="token punctuation">.</span>qos <span class="token operator">></span> AT_MOST_ONCE<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        pkt<span class="token operator">-></span>publish<span class="token punctuation">.</span>pkt_id <span class="token operator">=</span> <span class="token function">unpack_u16</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 此时payload长度需要减去pkt_id</span>        message_len <span class="token operator">-=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// payload 长度需要减去 topic_len 字段长度和 topic 字段实际长度</span>    message_len <span class="token operator">-=</span> <span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span><span class="token punctuation">)</span> <span class="token operator">+</span> topic_len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 这里是正确的 payloadlen</span>    pkt<span class="token operator">-></span>publish<span class="token punctuation">.</span>payloadlen <span class="token operator">=</span> message_len<span class="token punctuation">;</span>    <span class="token comment">// 读取 payload</span>    pkt<span class="token operator">-></span>publish<span class="token punctuation">.</span>payload <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>message_len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">unpack_bytes</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> message_len<span class="token punctuation">,</span> pkt<span class="token operator">-></span>publish<span class="token punctuation">.</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> len<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="SUBSCRIBE-和-UNSUBSCRIBE-解码实现"><a href="#SUBSCRIBE-和-UNSUBSCRIBE-解码实现" class="headerlink" title="SUBSCRIBE 和 UNSUBSCRIBE 解码实现"></a>SUBSCRIBE 和 UNSUBSCRIBE 解码实现</h2><p>SUBSCRIBE 包和 UNSUBSCRIBE 包的结构非常相似。他们的 payload 部分都是一个 topic 相关的元组列表，其中 SUBSCRIBE 的元组是 (topic_len, topic_filter, qos)，而 UNSUBSCRIBE 是 (topic_len, topic_filter)。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>src/mqtt.c</span></div><code class="language-c"><span class="token comment">/* * SUBSCRIBE 解码函数 * return Remaing Length 的值 * buf 数据流，从变长长度开始 * hdr 已经解码好的头部 * pkt 返回的解码后数据包 */</span><span class="token keyword">static</span> <span class="token class-name">size_t</span> <span class="token function">unpack_mqtt_subscribe</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span>                                    <span class="token keyword">union</span> mqtt_header <span class="token operator">*</span>hdr<span class="token punctuation">,</span>                                    <span class="token keyword">union</span> mqtt_packet <span class="token operator">*</span>pkt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 创建 SUBSCRIBE 包并且使用已经解码好的 header 赋值</span>    <span class="token keyword">struct</span> <span class="token class-name">mqtt_subscribe</span> subscribe <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span>header <span class="token operator">=</span> <span class="token operator">*</span>hdr <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// 通过变长的 Remaing Length 字段获取剩余部分的长度</span>    <span class="token class-name">size_t</span> len <span class="token operator">=</span> <span class="token function">mqtt_decode_length</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">size_t</span> remaining_bytes <span class="token operator">=</span> len<span class="token punctuation">;</span>    <span class="token comment">// 读取pkt_id</span>    subscribe<span class="token punctuation">.</span>pkt_id <span class="token operator">=</span> <span class="token function">unpack_u16</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    remaining_bytes <span class="token operator">-=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/*     * 订阅频道列表, 由一系列三元组构成     *  - topic length 主题字符串长度     *  - topic filter (string) 主题filter     *  - qos     */</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>remaining_bytes <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 减去2byte, 是topic length的空间</span>        remaining_bytes <span class="token operator">-=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 给这个主题字符串分配内存</span>        subscribe<span class="token punctuation">.</span>tuples <span class="token operator">=</span> <span class="token function">realloc</span><span class="token punctuation">(</span>subscribe<span class="token punctuation">.</span>tuples<span class="token punctuation">,</span>                                   <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>subscribe<span class="token punctuation">.</span>tuples<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获得主题字符串长度, 获得主题字符串内容</span>        subscribe<span class="token punctuation">.</span>tuples<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>topic_len <span class="token operator">=</span>            <span class="token function">unpack_string16</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token operator">&amp;</span>subscribe<span class="token punctuation">.</span>tuples<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>topic<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 减去主题字符串实际占用的空间</span>        remaining_bytes <span class="token operator">-=</span> subscribe<span class="token punctuation">.</span>tuples<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>topic_len<span class="token punctuation">;</span>        <span class="token comment">// 获得主题qos</span>        subscribe<span class="token punctuation">.</span>tuples<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>qos <span class="token operator">=</span> <span class="token function">unpack_u8</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 减去主题 qos 的空间</span>        len <span class="token operator">-=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 操作下一个主题</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 记录订阅主题数</span>    subscribe<span class="token punctuation">.</span>tuples_len <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token comment">// 记录到 mqtt_packet</span>    pkt<span class="token operator">-></span>subscribe <span class="token operator">=</span> subscribe<span class="token punctuation">;</span>    <span class="token keyword">return</span> len<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* * UNSUBSCRIBE 解码函数 * return Remaing Length 的值 * buf 数据流，从变长长度开始 * hdr 已经解码好的头部 * pkt 返回的解码后数据包 */</span><span class="token keyword">static</span> <span class="token class-name">size_t</span> <span class="token function">unpack_mqtt_unsubscribe</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span>                                      <span class="token keyword">union</span> mqtt_header <span class="token operator">*</span>hdr<span class="token punctuation">,</span>                                      <span class="token keyword">union</span> mqtt_packet <span class="token operator">*</span>pkt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">mqtt_unsubscribe</span> unsubscribe <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span>header <span class="token operator">=</span> <span class="token operator">*</span>hdr <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">/*     * Second byte of the fixed header, contains the length of remaining bytes     * of the connect packet     */</span>    <span class="token class-name">size_t</span> len <span class="token operator">=</span> <span class="token function">mqtt_decode_length</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">size_t</span> remaining_bytes <span class="token operator">=</span> len<span class="token punctuation">;</span>    <span class="token comment">/* Read packet id */</span>    unsubscribe<span class="token punctuation">.</span>pkt_id <span class="token operator">=</span> <span class="token function">unpack_u16</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    remaining_bytes <span class="token operator">-=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/*     * Read in a loop all remaining bytes specified by len of the Fixed Header.     * From now on the payload consists of 2-tuples formed by:     *  - topic length     *  - topic filter (string)     */</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>remaining_bytes <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/* Read length bytes of the first topic filter */</span>        remaining_bytes <span class="token operator">-=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/* We have to make room for additional incoming tuples */</span>        unsubscribe<span class="token punctuation">.</span>tuples <span class="token operator">=</span> <span class="token function">realloc</span><span class="token punctuation">(</span>unsubscribe<span class="token punctuation">.</span>tuples<span class="token punctuation">,</span>                                     <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>unsubscribe<span class="token punctuation">.</span>tuples<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        unsubscribe<span class="token punctuation">.</span>tuples<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>topic_len <span class="token operator">=</span>            <span class="token function">unpack_string16</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token operator">&amp;</span>unsubscribe<span class="token punctuation">.</span>tuples<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>topic<span class="token punctuation">)</span><span class="token punctuation">;</span>        remaining_bytes <span class="token operator">-=</span> unsubscribe<span class="token punctuation">.</span>tuples<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>topic_len<span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    unsubscribe<span class="token punctuation">.</span>tuples_len <span class="token operator">=</span> i<span class="token punctuation">;</span>    pkt<span class="token operator">-></span>unsubscribe <span class="token operator">=</span> unsubscribe<span class="token punctuation">;</span>    <span class="token keyword">return</span> len<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="ACK-解码实现"><a href="#ACK-解码实现" class="headerlink" title="ACK 解码实现"></a>ACK 解码实现</h2><p>最终到了 ACK 包，MQTT 协议中没有设计通用 ACK，但是实际上每个 ACK 包的数据结构都是一样的，有一个 Fixed Header 和一个 packet_id组成。</p><p>MQTT 协议中有如下几种类型的ACK:</p><ul><li>PUBACK</li><li>PUBREC</li><li>PUBREL</li><li>PUBCOMP</li><li>UNSUBACK</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>src/mqtt.c</span></div><code class="language-c"><span class="token comment">/* * ACK 解码函数 * return Remaing Length 的值 * buf 数据流，从变长长度开始 * hdr 已经解码好的头部 * pkt 返回的解码后数据包 */</span><span class="token keyword">static</span> <span class="token class-name">size_t</span> <span class="token function">unpack_mqtt_ack</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span>                              <span class="token keyword">union</span> mqtt_header <span class="token operator">*</span>hdr<span class="token punctuation">,</span>                              <span class="token keyword">union</span> mqtt_packet <span class="token operator">*</span>pkt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 创建 ACK 包并且使用已经解码好的 header 赋值</span>    <span class="token keyword">struct</span> <span class="token class-name">mqtt_ack</span> ack <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span>header <span class="token operator">=</span> <span class="token operator">*</span>hdr <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// 通过变长的 Remaing Length 字段获取剩余部分的长度</span>    <span class="token class-name">size_t</span> len <span class="token operator">=</span> <span class="token function">mqtt_decode_length</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// pkt_id</span>    ack<span class="token punctuation">.</span>pkt_id <span class="token operator">=</span> <span class="token function">unpack_u16</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    pkt<span class="token operator">-></span>ack <span class="token operator">=</span> ack<span class="token punctuation">;</span>    <span class="token keyword">return</span> len<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="MQTT包解码实现"><a href="#MQTT包解码实现" class="headerlink" title="MQTT包解码实现"></a>MQTT包解码实现</h2><p>现在我们已经实现了 <code>unpack_mqtt_packet</code> 需要的所有工具函数，接下来我们先定义一个解码函数的接口，然后使用一个静态数组来索引所有的解码函数，这里我们直接使用 <code>Control Packet type</code> 的值来作为数组中的索引。</p><p>需要注意的是，<code>DISCONNECT</code> <code>PINGREQ</code> <code>PINGRESP</code> 这三种包只有一个byte，所以我们不需要编写解码工具函数。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><div class="caption"><span>src/mqtt.c</span></div><code class="language-c"><span class="token comment">// 解码函数接口</span><span class="token keyword">typedef</span> <span class="token class-name">size_t</span> <span class="token function">mqtt_unpack_handler</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">,</span>                                   <span class="token keyword">union</span> mqtt_header <span class="token operator">*</span><span class="token punctuation">,</span>                                   <span class="token keyword">union</span> mqtt_packet <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 所有解码函数的列表, 索引值和包类型对应</span><span class="token keyword">static</span> mqtt_unpack_handler <span class="token operator">*</span>unpack_handlers<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token constant">NULL</span><span class="token punctuation">,</span>    unpack_mqtt_connect<span class="token punctuation">,</span>    <span class="token constant">NULL</span><span class="token punctuation">,</span>    unpack_mqtt_publish<span class="token punctuation">,</span>    unpack_mqtt_ack<span class="token punctuation">,</span>    unpack_mqtt_ack<span class="token punctuation">,</span>    unpack_mqtt_ack<span class="token punctuation">,</span>    unpack_mqtt_ack<span class="token punctuation">,</span>    unpack_mqtt_subscribe<span class="token punctuation">,</span>    <span class="token constant">NULL</span><span class="token punctuation">,</span>    unpack_mqtt_unsubscribe<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// MQTT 包解码入口</span><span class="token keyword">int</span> <span class="token function">unpack_mqtt_packet</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token keyword">union</span> mqtt_packet <span class="token operator">*</span>pkt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> rc <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 第一个 byte 是 fiexd header 中的 mqttType + flags</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> type <span class="token operator">=</span> <span class="token operator">*</span>buf<span class="token punctuation">;</span>    <span class="token comment">// 第一个byte可以被作为header</span>    <span class="token keyword">union</span> mqtt_header header <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">.</span>byte <span class="token operator">=</span> type    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// 对于这些包暂时无需解码</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>header<span class="token punctuation">.</span>bits<span class="token punctuation">.</span>type <span class="token operator">==</span> DISCONNECT        <span class="token operator">||</span> header<span class="token punctuation">.</span>bits<span class="token punctuation">.</span>type <span class="token operator">==</span> PINGREQ        <span class="token operator">||</span> header<span class="token punctuation">.</span>bits<span class="token punctuation">.</span>type <span class="token operator">==</span> PINGRESP<span class="token punctuation">)</span>        pkt<span class="token operator">-></span>header <span class="token operator">=</span> header<span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token comment">// 通过包类型找到解码函数, 执行解码操作后返回rc, 此时rc等于具体解码函数的返回值</span>        rc <span class="token operator">=</span> unpack_handlers<span class="token punctuation">[</span>header<span class="token punctuation">.</span>bits<span class="token punctuation">.</span>type<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">++</span>buf<span class="token punctuation">,</span> <span class="token operator">&amp;</span>header<span class="token punctuation">,</span> pkt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> rc<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>从零开始MQTT broker的第一部分就这样结束了，我们做了两个模块，一个根据 OASIS 定义的标准描述MQTT协议结构，另一个则用来处理编解码操作。</p><p>此时我们的文件结构是这样的：</p><figure><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">sol/ ├── src/ │    ├── mqtt.h │    ├── mqtt.c │    ├── pack.h │    └── pack.c ├── CHANGELOG ├── CMakeLists.txt ├── COPYING └── README.md<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>MQTT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络编程</tag>
      
      <tag>翻译</tag>
      
      <tag>物联网</tag>
      
      <tag>C</tag>
      
      <tag>MQTT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[翻译] n2n 常见问题</title>
    <link href="/2023/12/07/translate-n2n-faq.html"/>
    <url>/2023/12/07/translate-n2n-faq.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>原文 <a href="https://github.com/ntop/n2n/blob/dev/doc/Faq.md">n2n Frequently Asked Questions</a></p></blockquote><span id="more"></span><h1 id="n2n-常见问题"><a href="#n2n-常见问题" class="headerlink" title="n2n 常见问题"></a>n2n 常见问题</h1><h2 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h2><h3 id="哪里能找到Windows系统的n2n软件？"><a href="#哪里能找到Windows系统的n2n软件？" class="headerlink" title="哪里能找到Windows系统的n2n软件？"></a>哪里能找到Windows系统的n2n软件？</h3><p>我们没有在<code>release</code>中发布Windows版本的n2n，但是我们的自动化测试流程会创建他们。你可以点击项目界面中的 <code>Actions</code>，选择 <code>Testing</code>，进入最近一次的运行实例，在界面最下方的 <code>Artifacts</code> 处下载 <code>binaries</code>，其中就包括了编译好的windows版本<code>n2n</code>。通常来说你可以使用 <code>x86_64-w64-mingw32\usr\sbin</code> 路径下的版本。</p><p>此外，正如我们的<a href="https://github.com/ntop/n2n#further-readings-and-related-projects">README</a>中提到的，luckytu 一直在更新<code>n2n</code>的<a href="https://github.com/lucktu/n2n">Windows版本</a>，你也可以在他那里直接下载编译后的软件。</p><h2 id="Supernode"><a href="#Supernode" class="headerlink" title="Supernode"></a>Supernode</h2><h3 id="我想部署一个私有的，有密码保护的supernode，需要怎么设置？"><a href="#我想部署一个私有的，有密码保护的supernode，需要怎么设置？" class="headerlink" title="我想部署一个私有的，有密码保护的supernode，需要怎么设置？"></a>我想部署一个私有的，有密码保护的supernode，需要怎么设置？</h3><p>你可以直接配置 <code>community.list</code> 文件，在其中设置一个 <code>&lt;community name&gt;</code> (输入单行文本即可) ，然后把这个 <code>&lt;community name&gt;</code> 当作您的密码。</p><p>在启动 <code>supernode</code> 时，记得加上 <code>-c &lt;community file&gt;</code> 参数指定配置文件。这样，只有设置了 <code>-c &lt;community name&gt;</code> 的 <code>edge</code> 可以使用 <code>supernode</code>。</p><p>此时，在您的 <code>edge</code> 向 <code>supernode</code> 注册的过程中，<code>&lt;community name&gt;</code> 是明文传递的。如果您想要对传输过程进行加密，需要在<strong>所有</strong> <code>edge</code> 节点启动时添加 <code>-H</code> 参数。</p><p>另外，请参阅 <code>n2n</code> 附带的 <code>community.list</code> 文件以了解该文件的高级使用。</p><p>除了这个访问障碍之外，您可能希望在边缘使用有效负载加密 -A_。</p><p>只有边缘（而不是超级节点）能够解密有效负载数据。</p><p>因此，即使任何人都能够打破超级节点的访问障碍，有效负载仍然受到有效负载加密的保护，请参阅此文档了解详细信息。</p><p>除了上述的这些安全手段之外，您还可以在 <code>edge</code> 添加 <code>-A_</code> 参数来加密传输的数据。数据的加密和解密都是 <code>edge</code> 进行的，所以即使是 <code>supernode</code> 节点也无法解密数据内容。因此，即使你的 <code>supernode</code> 节点被黑客入侵，你的数据内容依然是被加密算法保护的。更多细节可以参考这一篇关于加密的<a href="https://github.com/ntop/n2n/blob/dev/doc/Crypto.md">文档</a>。</p><h3 id="我可以在supernode查看接入的edge列表吗？"><a href="#我可以在supernode查看接入的edge列表吗？" class="headerlink" title="我可以在supernode查看接入的edge列表吗？"></a>我可以在supernode查看接入的edge列表吗？</h3><p>可以，<code>supernode</code> 通过UDP提供了基本的管理接口，默认端口是5645，可以通过 <code>-t</code> 参数修改。</p><p>只需要发送一个新的行就可以查询当前状态，例如，在 <code>supernode</code> <strong>本机</strong>（远程链接不可以）上按下[ENTER]键，然后输入如下命令：</p><p><code>netcat -u localhost 5645</code></p><h3 id="支持多个supernode节点的部署方式吗？"><a href="#支持多个supernode节点的部署方式吗？" class="headerlink" title="支持多个supernode节点的部署方式吗？"></a>支持多个supernode节点的部署方式吗？</h3><p>支持，这篇<a href="https://github.com/ntop/n2n/blob/dev/doc/Federation.md">文档</a>描述了如何部署多个 <code>supernode</code> 节点来提升网络的可用性。</p><h3 id="supernode可以监听多个UDP端口吗？"><a href="#supernode可以监听多个UDP端口吗？" class="headerlink" title="supernode可以监听多个UDP端口吗？"></a>supernode可以监听多个UDP端口吗？</h3><p><code>supernode</code> 本身只支持监听一个端口，但是你应该可以通过做NAT的方式将多个端口映射到同一个端口上，例如：</p><p><code>sudo iptables -t nat -A PREROUTING -i &lt;network interface name&gt; -d &lt;supernode&#39;s ip address&gt; -p udp --dport &lt;additional port number&gt; -j REDIRECT --to-ports &lt;regular supernode port number&gt;</code></p><p>这条命令可以作为 <code>ExecStartPost=</code> 添加到 <code>supernode</code> 的 <code>.service</code> 文件中（不需要加sudo），如果需要映射多个端口，可以多加几行。</p><h3 id="这个报错是怎么回事-“process-udp-dropped-a-packet-with-seemingly-encrypted-header-for-which-no-matching-community-which-uses-encrypted-headers-was-found”？"><a href="#这个报错是怎么回事-“process-udp-dropped-a-packet-with-seemingly-encrypted-header-for-which-no-matching-community-which-uses-encrypted-headers-was-found”？" class="headerlink" title="这个报错是怎么回事 “process_udp dropped a packet with seemingly encrypted header for which no matching community which uses encrypted headers was found”？"></a>这个报错是怎么回事 “process_udp dropped a packet with seemingly encrypted header for which no matching community which uses encrypted headers was found”？</h3><p>这条报错的意思是 <code>supernode</code> 收到了一个无法使用的数据包。<code>supernode</code> 先将这个包视为一个未加密的包来处理，如果处理失败的话，<code>supernode</code> 会<strong>假定</strong>这是一个加密的数据包，之后 <code>supernode</code> 会尝试所有可以生成key的 <code>community</code> （排除明确没有加密的<code>community</code>）。如果任何 <code>community</code> 的key都无法解开此数据包，就会产生这条报错。</p><p>如果所有 <code>edge</code> 的 <code>-H</code> 参数配置是相同的（都有 <code>-H</code> 或者都没有 <code>-H</code> ），并且重启 <code>supernode</code> 后依然报错，最大的可能是 <code>supernode</code> 或者 <code>edge</code> 的版本不一致，导致了数据包格式不一致。</p><p>因此，请确保所有 <code>edge</code> <strong>和</strong> <code>supernode</code> 具有完全相同的版本，例如：最新的 <code>_dev_</code> 分支。</p><h2 id="Edge"><a href="#Edge" class="headerlink" title="Edge"></a>Edge</h2><h3 id="如何查看p2p链接的状态？"><a href="#如何查看p2p链接的状态？" class="headerlink" title="如何查看p2p链接的状态？"></a>如何查看p2p链接的状态？</h3><p><code>edge</code> 同样提供了一个本地的UDP管理端口，包括了 <em>peers</em> 这种已经建立的p2p链接，还有 <em>pending peers</em> 这种通过 <code>supernode</code> 中转的链接。</p><p><code>edge</code> 的默认管理端口号是 5644，可以通过 <code>-t</code> 参数修改。可以在<strong>本机</strong>通过此命令查看：</p><p><code>netcat -u localhost 5644</code></p><p>发送空行就可以查看链接信息，对于其他的命令行功能，请通过 <code>help</code> 查看。</p><h3 id="edge-反复报错-“Authentication-error-MAC-or-IP-address-already-in-use-or-not-released-yet-by-supernode”。是什么问题？"><a href="#edge-反复报错-“Authentication-error-MAC-or-IP-address-already-in-use-or-not-released-yet-by-supernode”。是什么问题？" class="headerlink" title="edge 反复报错 “Authentication error. MAC or IP address already in use or not released yet by supernode”。是什么问题？"></a>edge 反复报错 “Authentication error. MAC or IP address already in use or not released yet by supernode”。是什么问题？</h3><p>Edge 遇到了 n2n 的防欺骗保护。</p><p>它可以防止一个边缘的身份（MAC 和 IP 地址）在原始边缘仍然在线时被其他边缘冒充，请参阅一些详细信息。</p><p>大多数情况下，有两种情况可以触发此操作：</p><p>这是触发了 <code>n2n</code> 的防欺骗保护机制，这个机制可以防止已经在线的 <code>edge</code> 节点被其他人冒充，这篇<a href="Authentication.md">文档</a>有更详细的描述。总之，大部分情况下，有两种可能触发这个机制：</p><p>你使用的 MAC 地址或 IP 地址已经被使用了，修改这些参数就可以了。</p><p>如果一个 <code>edge</code> 非正常退出，例如被 <code>kill -9 ...</code> 或 <code>kill -SIGKILL ...</code>，那么这个 <code>edge</code> 可能没有机会通知 <code>supernode</code> 取消注册，因此 <code>supernode</code> 仍然认为此 <code>edge</code> 在线，此时具有相同 MAC 或 IP 地址的注册就不会成功。</p><p><code>supernode</code> 记录 <code>edge</code> 的超时时间是两分钟，所以可以等待两分钟，或者换不同的 MAC 和 IP 地址注册。</p><p>基本上来说，不管是 <code>CTRL</code> + <code>C</code> 或是 <code>kill -SIGTERM ...</code> 或者 <code>kill -SIGINT ...</code> 或者 <code>kill ...</code> 不带9，都可以正常的结束 <code>edge</code>，在管理接口下发 <code>stop</code> 命令也可以停止 <code>edge</code> ，所以大部分情况下无需使用 <code>kill -9 ...</code>。</p>]]></content>
    
    
    <categories>
      
      <category>网络工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络编程</tag>
      
      <tag>网络工具</tag>
      
      <tag>翻译</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用n2n连接不同局域网设备</title>
    <link href="/2023/12/06/n2nBeginner.html"/>
    <url>/2023/12/06/n2nBeginner.html</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>目的是想在办公室使用家里的服务器</p><p>家里有不固定的公网IP，办公室有固定的公网IP，因此打算使用办公室服务器做Server</p><p>为什么不用frp？：因为想获得一个完整的网络服务，而frp只能做端口映射，如果开发过程中新增端口，需要修改frp就很麻烦</p><span id="more"></span><h1 id="n2n简介"><a href="#n2n简介" class="headerlink" title="n2n简介"></a>n2n简介</h1><p><code>n2n</code> 是一个开源项目，地址在这里：</p><p><a href="https://github.com/ntop/n2n">https://github.com/ntop/n2n</a></p><p><code>n2n</code> 是一个二层VPN技术，他能在家里的服务器和办公室的服务器之间创建一个局域网链接</p><p><code>n2n</code> 网络由 <code>supernode</code> 和 <code>edge</code> 组成，可以简单理解为同一 <code>supernode</code> 下的所有 <code>edge</code> 都处在同一个局域网中。</p><h1 id="网络环境"><a href="#网络环境" class="headerlink" title="网络环境"></a>网络环境</h1><h2 id="办公室网络："><a href="#办公室网络：" class="headerlink" title="办公室网络："></a>办公室网络：</h2><ul><li>网段：192.168.34.0&#x2F;24</li><li>网关：192.168.34.1</li><li>网关公网地址：88.88.88.88</li><li>服务器地址：192.168.34.194</li></ul><h2 id="家庭网络"><a href="#家庭网络" class="headerlink" title="家庭网络"></a>家庭网络</h2><ul><li>网段：192.168.0.0&#x2F;24</li><li>网关：192.168.0.1</li><li>网关公网地址：不固定</li><li>服务器地址：192.168.0.12</li></ul><h2 id="规划n2n网络"><a href="#规划n2n网络" class="headerlink" title="规划n2n网络"></a>规划n2n网络</h2><p>由于办公室有固定的公网地址，就由办公室服务器充当 <code>supernode</code>，同时家庭服务器和办公室服务器都是此 <code>supernode</code> 下的 <code>edge</code><br><code>n2n</code> 会形成一个新的局域网，规划如下：</p><ul><li>网段：10.0.34.0&#x2F;24</li><li>网关：无</li><li>办公室服务器：10.0.34.21</li><li>家庭服务器：10.0.34.41</li></ul><h1 id="实施"><a href="#实施" class="headerlink" title="实施"></a>实施</h1><h2 id="下载安装n2n"><a href="#下载安装n2n" class="headerlink" title="下载安装n2n"></a>下载安装n2n</h2><p>在办公室服务器和家庭服务器都下载并安装 <code>n2n</code>：</p><p><a href="https://github.com/ntop/n2n/releases">https://github.com/ntop/n2n/releases</a></p><p>安装完成后，服务器中会自动生成两个服务 <code>supernode</code> 和 <code>edge</code></p><p>配置文件位于 <code>/etc/n2n/</code></p><p><img src="/2023/12/06/n2nBeginner/installVerify.png"></p><h2 id="配置办公室服务器"><a href="#配置办公室服务器" class="headerlink" title="配置办公室服务器"></a>配置办公室服务器</h2><p>办公室服务器需要承担三个职能：充当 <code>supernode</code>，充当 <code>edge</code>，转发其他办公室设备到家庭服务器的网络包</p><h3 id="配置supernode"><a href="#配置supernode" class="headerlink" title="配置supernode"></a>配置supernode</h3><p>配置 <code>/etc/n2n/community.list</code> 文件，指定community名称</p><figure><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><div class="caption"><span>community.list</span></div><code class="language-text">com8888 # community名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>复制 <code>supernode.conf.sample</code> 文件，并修改配置内容</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>bash</span></div><code class="language-bash"><span class="token function">cp</span> /etc/n2n/supernode.conf.sample /etc/n2n/supernode.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>bash</span></div><code class="language-bash"><span class="token function">vi</span> /etc/n2n/supernode.conf  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-conf" data-language="conf"><div class="caption"><span>supernode.conf</span></div><code class="language-conf">-p&#x3D;7777 # 指定supernode服务端口-c&#x3D;&#x2F;etc&#x2F;n2n&#x2F;community.list # 指定引用的community文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>启动supernode</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>shell</span></div><code class="language-bash">systemctl <span class="token builtin class-name">enable</span> supernodesystemctl start supernode<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>之后可以看到 <code>supernode</code> 已经启动，并且在7777端口提供服务：</p><p><img src="/2023/12/06/n2nBeginner/supernodeVerify.png"></p><h3 id="配置edge"><a href="#配置edge" class="headerlink" title="配置edge"></a>配置edge</h3><p>配置 <code>edge</code> 使办公室服务器成为 <code>n2n</code> 网络的成员</p><p>复制 <code>edge.conf.sample</code> 文件，并修改配置内容</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>bash</span></div><code class="language-bash"><span class="token function">cp</span> /etc/n2n/edge.conf.sample /etc/n2n/edge.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>bash</span></div><code class="language-bash"><span class="token function">vi</span> /etc/n2n/edge.conf  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-conf" data-language="conf"><div class="caption"><span>edge.conf</span></div><code class="language-conf">-d&#x3D;n2n0 # 指定虚拟网卡名称-c&#x3D;com8888 # community名称-k&#x3D;888888 # 通讯加密密钥-a&#x3D;10.0.34.21 # 在n2n网络中的地址-l&#x3D;127.0.0.1:7777 # supernode服务地址-r # 允许通过n2n转发数据包<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>启动edge</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>shell</span></div><code class="language-bash">systemctl <span class="token builtin class-name">enable</span> edgesystemctl start edge<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>启动后，可以看到 <code>n2n</code> 已经添加了虚拟网卡：</p><p><img src="/2023/12/06/n2nBeginner/edgeVerify.png"></p><h3 id="开启数据包转发功能"><a href="#开启数据包转发功能" class="headerlink" title="开启数据包转发功能"></a>开启数据包转发功能</h3><p>需要通过办公室服务器转发办公室其他电脑到家庭服务器的流量，因此需要在办公室服务器上开启数据包转发功能</p><p>需要将 <code>/etc/sysctl.conf</code> 文件中的 <code>net.ipv4.ip_forward</code> 修改为 1</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>bash</span></div><code class="language-bash"><span class="token function">vi</span> /etc/sysctl.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-conf" data-language="conf"><div class="caption"><span>sysctl.conf</span></div><code class="language-conf">...net.ipv4.ip_forward&#x3D;1...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="配置办公室网关"><a href="#配置办公室网关" class="headerlink" title="配置办公室网关"></a>配置办公室网关</h2><h3 id="添加静态路由"><a href="#添加静态路由" class="headerlink" title="添加静态路由"></a>添加静态路由</h3><p>其他办公室电脑没有到 <code>n2n</code> 网络的路由，因此数据包会发送到办公室网关</p><p>此时需要配置办公室网关，添加一条指向 <code>n2n</code> 网络的静态路由，下一条为办公室服务器的办公网地址</p><p><img src="/2023/12/06/n2nBeginner/gwRoute.png"></p><h2 id="配置家庭服务器"><a href="#配置家庭服务器" class="headerlink" title="配置家庭服务器"></a>配置家庭服务器</h2><h3 id="配置edge，设置自动添加路由"><a href="#配置edge，设置自动添加路由" class="headerlink" title="配置edge，设置自动添加路由"></a>配置edge，设置自动添加路由</h3><p>家庭服务器的 <code>edge</code> 安装配置过程与办公室服务器的 <code>edge</code> 大致相同，但有两点需要注意：</p><ol><li>无需添加<code>-r</code>参数，因为家庭服务器不需要将来自其他设备的包转发到<code>n2n</code>网络</li><li>需要添加<code>-n</code>参数，这样<code>edge</code>启动时会自动产生一条通过<code>n2n</code>网络到达办公室网络的路由</li></ol><figure><div class="code-wrapper"><pre class="line-numbers language-conf" data-language="conf"><div class="caption"><span>edge.conf</span></div><code class="language-conf">-d&#x3D;n2n0 # 指定虚拟网卡名称-c&#x3D;com8888 # community名称-k&#x3D;888888 # 通讯加密密钥-a&#x3D;10.0.34.41 # 在n2n网络中的地址-l&#x3D;88.88.88.88:17777 # supernode公网地址-n&#x3D;192.168.34.0&#x2F;24:10.0.34.21<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h1><h2 id="n2n网络验证"><a href="#n2n网络验证" class="headerlink" title="n2n网络验证"></a>n2n网络验证</h2><p>使用 <code>n2n</code> 网络地址从办公室服务器ping家庭服务器，或从家庭服务器ping办公室服务器，成功</p><p>此时数据包的实际流向是 办公室服务器-&gt;办公室网关-&gt;运营商网络-&gt;家庭网关-&gt;家庭服务器</p><p>由于 <code>n2n</code> vpn的配置，此时可以认为办公室服务器和家庭服务器处在同一局域网下，tracert也仅一跳可达</p><p><img src="/2023/12/06/n2nBeginner/trace.png"></p><h2 id="办公室电脑到家庭服务器网络验证"><a href="#办公室电脑到家庭服务器网络验证" class="headerlink" title="办公室电脑到家庭服务器网络验证"></a>办公室电脑到家庭服务器网络验证</h2><p>办公室电脑ping家庭服务器，成功</p><p>此时数据包流向是 办公室电脑-&gt;办公室网关-&gt;办公室服务器-&gt;家庭服务器，其中办公室服务器到家庭服务器是 <code>n2n</code> 虚拟链路</p><p>tracert三跳可达</p><p><img src="/2023/12/06/n2nBeginner/trace2.png"></p><h2 id="家庭服务器到办公室电脑"><a href="#家庭服务器到办公室电脑" class="headerlink" title="家庭服务器到办公室电脑"></a>家庭服务器到办公室电脑</h2><p>家庭服务器ping办公室电脑，成功</p><p>此时数据包流向是 家庭服务器-&gt;办公室服务器-&gt;办公室电脑，其中家庭服务器到办公室服务器是 <code>n2n</code> 虚拟链路</p><p>tracert两跳可达</p><p><img src="/2023/12/06/n2nBeginner/trace3.png"></p>]]></content>
    
    
    <categories>
      
      <category>网络工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络编程</tag>
      
      <tag>网络工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>工作周报可视化</title>
    <link href="/2023/12/05/weekreport2chart.html"/>
    <url>/2023/12/05/weekreport2chart.html</url>
    
    <content type="html"><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>这个项目是一个纯粹的小玩具，起因是我公司的工作周报都是 <code>.doc</code> 格式存储的，现在到年底了，我又比较想知道我一年都干了哪些工作。显而易见的一个方式就是提取所有周报文字内容做词频分析。</p><span id="more"></span><h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p>完成之后的效果还算不错，源码也放在了github上：</p><p><a href="https://github.com/vitsumoc/weekreport2chart">https://github.com/vitsumoc/weekreport2chart</a></p><p>提取一段时间的工作周报内容，生成词云和河流图</p><p><img src="/2023/12/05/weekreport2chart/wordcloud.png"></p><p><img src="/2023/12/05/weekreport2chart/river.png"></p><p>可以直接过滤低频词汇，或手动操作删除某些虚词、连词等</p><p><img src="/2023/12/05/weekreport2chart/disable.png"></p><h1 id="相关库"><a href="#相关库" class="headerlink" title="相关库"></a>相关库</h1><p>使用libreoffice将doc转为docx</p><p>使用结巴分词分词：<a href="https://github.com/fxsjy/jieba">https://github.com/fxsjy/jieba</a></p><p>使用wordcloudjs词云：<a href="https://wordcloud2-js.timdream.org/#love">https://wordcloud2-js.timdream.org/#love</a></p><p>使用echarts河流图</p>]]></content>
    
    
    <categories>
      
      <category>小玩具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>小玩具</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在golang中使用lua</title>
    <link href="/2023/12/05/golua.html"/>
    <url>/2023/12/05/golua.html</url>
    
    <content type="html"><![CDATA[<p>使用<code>gopher-lua</code>，在golang中使用lua。<code>gopher-lua</code> 项目地址：</p><p><a href="https://github.com/yuin/gopher-lua">https://github.com/yuin/gopher-lua</a></p><span id="more"></span><p>使用示例仓库地址：</p><p><a href="https://github.com/vitsumoc/my-golua">https://github.com/vitsumoc/my-golua</a></p><p>示例列表：</p><ul><li>最基础的用法</li><li>基础数据类型</li><li>在lua中调用go方法</li><li>在go中使用lua协程</li><li>示范如何手动开启模块</li><li>在lua中使用go模块</li><li>在golang中调用lua方法</li><li>在lua中使用golang数据</li><li>通过context控制停止</li><li>在有协程的情况下使用context控制</li><li>共享lua文件字节码, 减少开销</li><li>通过go协程跑lua的示例 可以把ch带到lua中 和相关限制</li><li>在lua中使用ch的例子</li><li>lua虚拟机池</li><li>在golang中提供钩子, 使lua可以注册脚本, 在脚本中获得并修改用户数据</li></ul>]]></content>
    
    
    <categories>
      
      <category>小玩具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
      <tag>库</tag>
      
      <tag>小玩具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Systemd管理自启动</title>
    <link href="/2023/12/01/linuxBoot.html"/>
    <url>/2023/12/01/linuxBoot.html</url>
    
    <content type="html"><![CDATA[<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><p>启动服务</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>shell</span></div><code class="language-bash">systemctl start service-name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><span id="more"></span><p>停止服务</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>shell</span></div><code class="language-bash">systemctl stop service-name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>查看服务状态</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>shell</span></div><code class="language-bash">systemctl status service-name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>设置开机自启动</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>shell</span></div><code class="language-bash">systemctl <span class="token builtin class-name">enable</span> service-name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>停止开机自启动</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>shell</span></div><code class="language-bash">systemctl disable service-name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h1 id="服务注册"><a href="#服务注册" class="headerlink" title="服务注册"></a>服务注册</h1><p>在 <code>/etc/systemd/system</code> 路径下，创建 <code>service-name.service</code> 文件，格式如下：</p><figure><div class="code-wrapper"><pre class="line-numbers language-ini" data-language="ini"><div class="caption"><span>service-name.service</span></div><code class="language-ini"><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">Unit</span><span class="token punctuation">]</span></span><span class="token comment"># 服务名称</span><span class="token key attr-name">Description</span> <span class="token punctuation">=</span> <span class="token value attr-value">xxxx server</span><span class="token key attr-name">After</span> <span class="token punctuation">=</span> <span class="token value attr-value">network.target syslog.target</span><span class="token key attr-name">Wants</span> <span class="token punctuation">=</span> <span class="token value attr-value">network.target</span><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">Service</span><span class="token punctuation">]</span></span><span class="token key attr-name">Type</span> <span class="token punctuation">=</span> <span class="token value attr-value">simple</span><span class="token comment"># 启动命令</span><span class="token key attr-name">ExecStart</span> <span class="token punctuation">=</span> <span class="token value attr-value">/home/start.sh</span><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">Install</span><span class="token punctuation">]</span></span><span class="token key attr-name">WantedBy</span> <span class="token punctuation">=</span> <span class="token value attr-value">multi-user.target</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>豆知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>豆知识</tag>
      
      <tag>环境配置</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AI入门笔记（3）——感知器</title>
    <link href="/2023/12/01/AiForBeginners-3.html"/>
    <url>/2023/12/01/AiForBeginners-3.html</url>
    
    <content type="html"><![CDATA[<h1 id="课程"><a href="#课程" class="headerlink" title="课程"></a>课程</h1><p><a href="https://github.com/microsoft/AI-For-Beginners/blob/main/lessons/3-NeuralNetworks/03-Perceptron/README.md">https://github.com/microsoft/AI-For-Beginners/blob/main/lessons/3-NeuralNetworks/03-Perceptron/README.md</a></p><p>这是微软提供的AI-For-Beginners课程第三课，介绍了什么是感知器（Perceptron）</p><span id="more"></span><h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><p>感知器<code>Perceptron</code>是一种二元分类模型，总是能根据输入产生一个+1或-1的输出。</p><p>感知器进行计算时需要权重<code>weight</code>的参与，权重会导致感知器产生正确或错误的结果，训练的过程既是修改权重不断增加结果的正确率。</p><p>感知器只能解决线性分类的问题，如果一个问题无法被线性分类，感知器就不会收敛，例如异或问题。</p><h1 id="随堂作业"><a href="#随堂作业" class="headerlink" title="随堂作业"></a>随堂作业</h1><p>在本课的作业中，需要使用 <code>Jupyter</code> 构建代码+文档的环境，使用 <code>sklearn</code> 创造测试数据，使用 <code>numPy</code> 表示和处理数据，使用 <code>matpoltlib</code> 绘制数据图像，使用 <code>ipywidgets</code> 交互式的查看训练过程。</p><h2 id="训练感知器分类数据"><a href="#训练感知器分类数据" class="headerlink" title="训练感知器分类数据"></a>训练感知器分类数据</h2><p><a href="https://github.com/vitsumoc/exercise-AI-Beginner/blob/main/3-Perceptron/perceptron.py">https://github.com/vitsumoc/exercise-AI-Beginner/blob/main/3-Perceptron/perceptron.py</a></p><p>作业中使用代码实现了训练感知器的过程：</p><ol><li>创建数据集合，分类为训练数据和测试数据</li><li>将训练数据分类为pos和neg</li><li>初始化权重值</li><li>设置训练次数并开始训练，每次选择随机的数据进行训练</li><li>在每次训练错误时，使用本次选择的数据对权重进行调整</li><li>使用测试数据验证训练后的权重值</li></ol><h2 id="感知器的局限性"><a href="#感知器的局限性" class="headerlink" title="感知器的局限性"></a>感知器的局限性</h2><p><a href="https://github.com/vitsumoc/exercise-AI-Beginner/blob/main/3-Perceptron/xor.ipynb">https://github.com/vitsumoc/exercise-AI-Beginner/blob/main/3-Perceptron/xor.ipynb</a></p><p>感知器只能解决线性分类问题，对于无法使用一条直线分类的问题，往往就无法很好的收敛。</p><p>作业中的异或问题就是一个完全无法收敛的例子。</p><h2 id="使用感知器-MNIST-数据识别手写数字"><a href="#使用感知器-MNIST-数据识别手写数字" class="headerlink" title="使用感知器 + MNIST 数据识别手写数字"></a>使用感知器 + MNIST 数据识别手写数字</h2><p><a href="https://github.com/vitsumoc/exercise-AI-Beginner/blob/main/3-Perceptron/mnist.ipynb">https://github.com/vitsumoc/exercise-AI-Beginner/blob/main/3-Perceptron/mnist.ipynb</a></p><p>在这个作业中使用感知器区分手写数字图像。</p><p>使用PCA降低特征的维度，分析感知器训练结果差异的原因。</p><h2 id="训练感知器识别任何手写数字"><a href="#训练感知器识别任何手写数字" class="headerlink" title="训练感知器识别任何手写数字"></a>训练感知器识别任何手写数字</h2><p>这个作业中需要拓展上一个作业的功能，训练10个不同的感知器，用来识别0-9全部的数字。</p><p><a href="https://github.com/vitsumoc/exercise-AI-Beginner/blob/main/3-Perceptron/anyNum.ipynb">https://github.com/vitsumoc/exercise-AI-Beginner/blob/main/3-Perceptron/anyNum.ipynb</a></p><p>参考上一个作业的方式，训练了10组weights，来判断一个数字是或不是特定的数字。</p><p>每个感知器训练10000次，最终正确率 74.7%。</p>]]></content>
    
    
    <categories>
      
      <category>AI学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AI</tag>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jupyter入门笔记</title>
    <link href="/2023/11/30/pythonJupyter.html"/>
    <url>/2023/11/30/pythonJupyter.html</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>网站 <a href="https://jupyter.org/">https://jupyter.org/</a></p><p>jupyter 项目提供了可供计算的记事本，将代码、资源、交互式计算与文档结合。</p><span id="more"></span><h1 id="试用"><a href="#试用" class="headerlink" title="试用"></a>试用</h1><p>可以通过试用界面 <a href="https://jupyter.org/try">https://jupyter.org/try</a> 直接体验jupyter，建立大致的了解。</p><h1 id="打开"><a href="#打开" class="headerlink" title="打开"></a>打开</h1><p><code>jupyter lab</code> 在指定路径打开jupyter lab，程序会占用8888端口，可通过<code>http://localhost:8888/</code>访问图形化界面。</p><h1 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h1><p>jupyter会将执行程序的目录作为文件系统的根目录。</p><p>jupyter的文件后缀为 <code>.ipynb</code> 其中可以混合代码、文档、输出。</p><p>可以直接在 <code>jupyter lab</code> 提供的浏览器界面中新建、编辑、删除文件。</p><h1 id="内容编辑"><a href="#内容编辑" class="headerlink" title="内容编辑"></a>内容编辑</h1><p>以下是一个混合了 文档、代码、输出、图像、组件的文件截图，因为导出的PDF不支持组件，所以组件输出为文本。</p><p><img src="/2023/11/30/pythonJupyter/JupyterLab-1.png"></p><p><img src="/2023/11/30/pythonJupyter/JupyterLab-2.png"></p><p><img src="/2023/11/30/pythonJupyter/JupyterLab-3.png"></p><p>github也支持 <code>.ipynb</code> 格式，但同样不支持组件，这是上方图片文件的原始内容：</p><p><a href="https://github.com/vitsumoc/exercise-AI-Beginner/blob/main/PyBeginner/jupyter.ipynb">https://github.com/vitsumoc/exercise-AI-Beginner/blob/main/PyBeginner/jupyter.ipynb</a></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>豆知识</tag>
      
      <tag>笔记</tag>
      
      <tag>python</tag>
      
      <tag>库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Matplotlib入门笔记</title>
    <link href="/2023/11/29/pythonMatplotlib.html"/>
    <url>/2023/11/29/pythonMatplotlib.html</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>网站 <a href="https://matplotlib.org/stable/">https://matplotlib.org/stable/</a></p><p>Matplotlib 是一个用于创建静态、动画和交互式可视化的综合库。</p><p>本文是学习 Matplotlib 过程中的笔记，所有内容都来自官方文档：<a href="https://matplotlib.org/stable/users/explain/quick_start.html">https://matplotlib.org/stable/users/explain/quick_start.html</a></p><span id="more"></span><h1 id="1-入门示例"><a href="#1-入门示例" class="headerlink" title="1. 入门示例"></a>1. 入门示例</h1><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>python</span></div><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib <span class="token keyword">as</span> mpl<span class="token keyword">def</span> <span class="token function">e1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  x <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>pi<span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span>  y <span class="token operator">=</span> np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>x<span class="token punctuation">)</span>  fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span><span class="token punctuation">)</span>  ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>e1<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="2-窗口、图像和绘制"><a href="#2-窗口、图像和绘制" class="headerlink" title="2. 窗口、图像和绘制"></a>2. 窗口、图像和绘制</h1><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>python</span></div><code class="language-python"><span class="token keyword">def</span> <span class="token function">e2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 创建一个只有一个 axes 的 figure</span>  fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 在 axes 上 plot 一些数据</span>  ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>e2<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="3-figure-的构成部分"><a href="#3-figure-的构成部分" class="headerlink" title="3. figure 的构成部分"></a>3. figure 的构成部分</h1><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>python</span></div><code class="language-python"><span class="token comment"># figure 是一个绘图窗口</span><span class="token comment"># axes 是一副数据图像</span><span class="token comment"># axis 是坐标轴</span><span class="token keyword">def</span> <span class="token function">e3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 一个没有 axes 的 figure</span>  fig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 只有一个 axes 的图像</span>  fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 2 * 2 布局的图像</span>  fig<span class="token punctuation">,</span> axs <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment"># 左一右二布局</span>  fig<span class="token punctuation">,</span> axs <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplot_mosaic<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'left'</span><span class="token punctuation">,</span> <span class="token string">'right_top'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'left'</span><span class="token punctuation">,</span> <span class="token string">'right_bottom'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>e3<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="4-输入数据类型"><a href="#4-输入数据类型" class="headerlink" title="4. 输入数据类型"></a>4. 输入数据类型</h1><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>python</span></div><code class="language-python"><span class="token keyword">def</span> <span class="token function">e4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># plot 接受 np.array np.ma.masked_array np.asarray 三种类型的输入</span>  <span class="token comment"># 如果不是此类数据，需要先进行处理</span>  b <span class="token operator">=</span> np<span class="token punctuation">.</span>matrix<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  b_asarray <span class="token operator">=</span> np<span class="token punctuation">.</span>asarray<span class="token punctuation">(</span>b<span class="token punctuation">)</span>  <span class="token comment"># 对于一些已经准备好的对象(字典)数据, 也可以用下面的方式输入</span>  np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">19680801</span><span class="token punctuation">)</span>  <span class="token comment"># seed the random number generator.</span>  <span class="token comment"># a 是 0-50 的整数 用于每个数据的 x 坐标</span>  <span class="token comment"># b 是 50个随机数 用于每个数据的 y 坐标 (50个0-1的随机数 * 10 再加 x坐标)</span>  <span class="token comment"># c 随机颜色 50个50以下的整数</span>  <span class="token comment"># d 是随机尺寸</span>  data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'a'</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token string">'c'</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token string">'d'</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>  data<span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">10</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>  data<span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token builtin">abs</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span>  fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2.7</span><span class="token punctuation">)</span><span class="token punctuation">,</span> layout<span class="token operator">=</span><span class="token string">'constrained'</span><span class="token punctuation">)</span>  <span class="token comment"># 离散数据 使用字典中的内容赋值</span>  ax<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'c'</span><span class="token punctuation">,</span> s<span class="token operator">=</span><span class="token string">'d'</span><span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>  ax<span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">'entry a'</span><span class="token punctuation">)</span>  ax<span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">'entry b'</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>e4<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="5-接口风格"><a href="#5-接口风格" class="headerlink" title="5. 接口风格"></a>5. 接口风格</h1><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>python</span></div><code class="language-python"><span class="token comment"># mplib提供了两种接口风格 一是显示的获取各层对象并调用 二是直接使用plt搞定一切</span><span class="token comment"># 显示风格的例子</span><span class="token keyword">def</span> <span class="token function">e5_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  x <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>  <span class="token comment"># 示意数据</span>  <span class="token comment"># 获得 figure 和 axes</span>  fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2.7</span><span class="token punctuation">)</span><span class="token punctuation">,</span> layout<span class="token operator">=</span><span class="token string">'constrained'</span><span class="token punctuation">)</span>  <span class="token comment"># 一次二次和三次函数</span>  ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> x<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'linear'</span><span class="token punctuation">)</span>  ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> x<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'quadratic'</span><span class="token punctuation">)</span>  ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> x<span class="token operator">**</span><span class="token number">3</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'cubic'</span><span class="token punctuation">)</span>  <span class="token comment"># 指定xy的label</span>  ax<span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">'x label'</span><span class="token punctuation">)</span>  ax<span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">'y label'</span><span class="token punctuation">)</span>  <span class="token comment"># axes 的title</span>  ax<span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">"Simple Plot"</span><span class="token punctuation">)</span>  <span class="token comment"># 添加一个图例 用来显示各plot的label</span>  ax<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 隐式风格的例子 效果和显示风格完全相同</span><span class="token keyword">def</span> <span class="token function">e5_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  x <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2.7</span><span class="token punctuation">)</span><span class="token punctuation">,</span> layout<span class="token operator">=</span><span class="token string">'constrained'</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> x<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'linear'</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> x<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'quadratic'</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> x<span class="token operator">**</span><span class="token number">3</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'cubic'</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'x label'</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'y label'</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"Simple Plot"</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>e5_1<span class="token punctuation">(</span><span class="token punctuation">)</span>e5_2<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="6-制作辅助函数"><a href="#6-制作辅助函数" class="headerlink" title="6. 制作辅助函数"></a>6. 制作辅助函数</h1><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>python</span></div><code class="language-python"><span class="token comment"># 制作工具函数, 避免代码重复</span><span class="token keyword">def</span> <span class="token function">e6_plotter</span><span class="token punctuation">(</span>ax<span class="token punctuation">,</span> data1<span class="token punctuation">,</span> data2<span class="token punctuation">,</span> param_dict<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    A helper function to make a graph.    """</span>    out <span class="token operator">=</span> ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>data1<span class="token punctuation">,</span> data2<span class="token punctuation">,</span> <span class="token operator">**</span>param_dict<span class="token punctuation">)</span>    <span class="token keyword">return</span> out<span class="token keyword">def</span> <span class="token function">e6</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  data1<span class="token punctuation">,</span> data2<span class="token punctuation">,</span> data3<span class="token punctuation">,</span> data4 <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>  <span class="token comment"># make 4 random data sets</span>  fig<span class="token punctuation">,</span> <span class="token punctuation">(</span>ax1<span class="token punctuation">,</span> ax2<span class="token punctuation">)</span> <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2.7</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  e6_plotter<span class="token punctuation">(</span>ax1<span class="token punctuation">,</span> data1<span class="token punctuation">,</span> data2<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'marker'</span><span class="token punctuation">:</span> <span class="token string">'x'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  e6_plotter<span class="token punctuation">(</span>ax2<span class="token punctuation">,</span> data3<span class="token punctuation">,</span> data4<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'marker'</span><span class="token punctuation">:</span> <span class="token string">'o'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>e6<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="7-样式"><a href="#7-样式" class="headerlink" title="7. 样式"></a>7. 样式</h1><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>python</span></div><code class="language-python"><span class="token keyword">def</span> <span class="token function">e7</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  data1<span class="token punctuation">,</span> data2 <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>  fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2.7</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  x <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>data1<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># plot 直接跟样式参数</span>  ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> np<span class="token punctuation">.</span>cumsum<span class="token punctuation">(</span>data1<span class="token punctuation">)</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'blue'</span><span class="token punctuation">,</span> linewidth<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> linestyle<span class="token operator">=</span><span class="token string">'--'</span><span class="token punctuation">)</span>  l<span class="token punctuation">,</span> <span class="token operator">=</span> ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> np<span class="token punctuation">.</span>cumsum<span class="token punctuation">(</span>data2<span class="token punctuation">)</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'orange'</span><span class="token punctuation">,</span> linewidth<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment"># plot 后对返回内容进行样式赋值</span>  l<span class="token punctuation">.</span>set_linestyle<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>e7<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="8-标记"><a href="#8-标记" class="headerlink" title="8. 标记"></a>8. 标记</h1><h2 id="基础标记"><a href="#基础标记" class="headerlink" title="基础标记"></a>基础标记</h2><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>python</span></div><code class="language-python"><span class="token keyword">def</span> <span class="token function">e8_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  mu<span class="token punctuation">,</span> sigma <span class="token operator">=</span> <span class="token number">115</span><span class="token punctuation">,</span> <span class="token number">15</span>  <span class="token comment"># x 是一万个值的列表 randn 会给出一组正态分布的随机数结果</span>  x <span class="token operator">=</span> mu <span class="token operator">+</span> sigma <span class="token operator">*</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span>  fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2.7</span><span class="token punctuation">)</span><span class="token punctuation">,</span> layout<span class="token operator">=</span><span class="token string">'constrained'</span><span class="token punctuation">)</span>  <span class="token comment"># the histogram of the data</span>  <span class="token comment"># 直方图参数: x-数据内容 50-柱数量 density-返回概率密度 </span>  n<span class="token punctuation">,</span> bins<span class="token punctuation">,</span> patches <span class="token operator">=</span> ax<span class="token punctuation">.</span>hist<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> density<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> facecolor<span class="token operator">=</span><span class="token string">'C0'</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.75</span><span class="token punctuation">)</span>  <span class="token comment"># 轴和图的标题</span>  ax<span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">'Length [cm]'</span><span class="token punctuation">)</span>  ax<span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">'Probability'</span><span class="token punctuation">)</span>  ax<span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'Aardvark lengths\n (not really)'</span><span class="token punctuation">)</span>  <span class="token comment"># 文本 (使用了数学符号)</span>  ax<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token number">75</span><span class="token punctuation">,</span> <span class="token number">.025</span><span class="token punctuation">,</span> <span class="token string">r'$\mu=115,\ \sigma=15$'</span><span class="token punctuation">)</span>  <span class="token comment"># 轴定义</span>  ax<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">175</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.03</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 网线</span>  ax<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>e8_1<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="标记图上的点"><a href="#标记图上的点" class="headerlink" title="标记图上的点"></a>标记图上的点</h2><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>python</span></div><code class="language-python"><span class="token keyword">def</span> <span class="token function">e8_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2.7</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  t <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">5.0</span><span class="token punctuation">,</span> <span class="token number">0.01</span><span class="token punctuation">)</span>  s <span class="token operator">=</span> np<span class="token punctuation">.</span>cos<span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>pi <span class="token operator">*</span> t<span class="token punctuation">)</span>  line<span class="token punctuation">,</span> <span class="token operator">=</span> ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>t<span class="token punctuation">,</span> s<span class="token punctuation">,</span> lw<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment"># 使用点位、文本位、箭头设置来标记点</span>  ax<span class="token punctuation">.</span>annotate<span class="token punctuation">(</span><span class="token string">'local max'</span><span class="token punctuation">,</span> xy<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> xytext<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            arrowprops<span class="token operator">=</span><span class="token builtin">dict</span><span class="token punctuation">(</span>facecolor<span class="token operator">=</span><span class="token string">'black'</span><span class="token punctuation">,</span> shrink<span class="token operator">=</span><span class="token number">0.05</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># y轴limit</span>  ax<span class="token punctuation">.</span>set_ylim<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>e8_2<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="添加-Legend用以区分数据"><a href="#添加-Legend用以区分数据" class="headerlink" title="添加 Legend用以区分数据"></a>添加 Legend用以区分数据</h2><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>python</span></div><code class="language-python"><span class="token keyword">def</span> <span class="token function">e8_3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  data1<span class="token punctuation">,</span> data2<span class="token punctuation">,</span> data3 <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>  fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2.7</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>data1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data1<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'data1'</span><span class="token punctuation">)</span>  ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>data2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data2<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'data2'</span><span class="token punctuation">)</span>  ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>data3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data3<span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'data3'</span><span class="token punctuation">)</span>  ax<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>e8_3<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="9-轴的比例和刻度"><a href="#9-轴的比例和刻度" class="headerlink" title="9. 轴的比例和刻度"></a>9. 轴的比例和刻度</h1><h2 id="轴的比例定义"><a href="#轴的比例定义" class="headerlink" title="轴的比例定义"></a>轴的比例定义</h2><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>python</span></div><code class="language-python"><span class="token keyword">def</span> <span class="token function">e9_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 100 个随机数</span>  data1 <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>  <span class="token comment"># 两个 axes</span>  fig<span class="token punctuation">,</span> axs <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2.7</span><span class="token punctuation">)</span><span class="token punctuation">,</span> layout<span class="token operator">=</span><span class="token string">'constrained'</span><span class="token punctuation">)</span>  <span class="token comment"># x轴为随机数的数量</span>  xdata <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>data1<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># y数据为 10 ** data1</span>  data <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">**</span>data1  <span class="token comment"># axes 使用折线图</span>  axs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>plot<span class="token punctuation">(</span>xdata<span class="token punctuation">,</span> data<span class="token punctuation">)</span>  <span class="token comment"># axes 使用对数坐标 图像内容接近 data1 的原始值</span>  axs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_yscale<span class="token punctuation">(</span><span class="token string">'log'</span><span class="token punctuation">)</span>  axs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>plot<span class="token punctuation">(</span>xdata<span class="token punctuation">,</span> data<span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>e9_1<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="手动操作-axis-上的-ticks"><a href="#手动操作-axis-上的-ticks" class="headerlink" title="手动操作 axis 上的 ticks"></a>手动操作 axis 上的 ticks</h2><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>python</span></div><code class="language-python"><span class="token keyword">def</span> <span class="token function">e9_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  data1 <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>  xdata <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>data1<span class="token punctuation">)</span><span class="token punctuation">)</span>  fig<span class="token punctuation">,</span> axs <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> layout<span class="token operator">=</span><span class="token string">'constrained'</span><span class="token punctuation">)</span>  axs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>plot<span class="token punctuation">(</span>xdata<span class="token punctuation">,</span> data1<span class="token punctuation">)</span>  axs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'Automatic ticks'</span><span class="token punctuation">)</span>  axs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>plot<span class="token punctuation">(</span>xdata<span class="token punctuation">,</span> data1<span class="token punctuation">)</span>  <span class="token comment"># 设置x 轴和显示内容</span>  axs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_xticks<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'zero'</span><span class="token punctuation">,</span> <span class="token string">'30'</span><span class="token punctuation">,</span> <span class="token string">'sixty'</span><span class="token punctuation">,</span> <span class="token string">'90'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 设置 y 轴</span>  axs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_yticks<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1.5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1.5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  axs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'Manual ticks'</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>e9_2<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="使用时间做轴"><a href="#使用时间做轴" class="headerlink" title="使用时间做轴"></a>使用时间做轴</h2><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>python</span></div><code class="language-python"><span class="token keyword">def</span> <span class="token function">e9_3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2.7</span><span class="token punctuation">)</span><span class="token punctuation">,</span> layout<span class="token operator">=</span><span class="token string">'constrained'</span><span class="token punctuation">)</span>  <span class="token comment"># 通过时间范围和间隔构建时间戳数组</span>  dates <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span>np<span class="token punctuation">.</span>datetime64<span class="token punctuation">(</span><span class="token string">'2021-11-15'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>datetime64<span class="token punctuation">(</span><span class="token string">'2021-12-25'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    np<span class="token punctuation">.</span>timedelta64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'h'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 随机数的数据</span>  data <span class="token operator">=</span> np<span class="token punctuation">.</span>cumsum<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>dates<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># x 和 y 数据正常放入图像</span>  ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>dates<span class="token punctuation">,</span> data<span class="token punctuation">)</span>  <span class="token comment"># 设置日期格式化方式并添加到轴</span>  cdf <span class="token operator">=</span> mpl<span class="token punctuation">.</span>dates<span class="token punctuation">.</span>ConciseDateFormatter<span class="token punctuation">(</span>ax<span class="token punctuation">.</span>xaxis<span class="token punctuation">.</span>get_major_locator<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  ax<span class="token punctuation">.</span>xaxis<span class="token punctuation">.</span>set_major_formatter<span class="token punctuation">(</span>cdf<span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>e9_3<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="使用字符串做轴"><a href="#使用字符串做轴" class="headerlink" title="使用字符串做轴"></a>使用字符串做轴</h2><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>python</span></div><code class="language-python"><span class="token keyword">def</span> <span class="token function">e9_4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2.7</span><span class="token punctuation">)</span><span class="token punctuation">,</span> layout<span class="token operator">=</span><span class="token string">'constrained'</span><span class="token punctuation">)</span>  categories <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'turnips'</span><span class="token punctuation">,</span> <span class="token string">'rutabaga'</span><span class="token punctuation">,</span> <span class="token string">'cucumber'</span><span class="token punctuation">,</span> <span class="token string">'pumpkins'</span><span class="token punctuation">]</span>  ax<span class="token punctuation">.</span>bar<span class="token punctuation">(</span>categories<span class="token punctuation">,</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>categories<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>e9_4<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="添加更多的轴"><a href="#添加更多的轴" class="headerlink" title="添加更多的轴"></a>添加更多的轴</h2><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>python</span></div><code class="language-python"><span class="token keyword">def</span> <span class="token function">e9_5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  t <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">5.0</span><span class="token punctuation">,</span> <span class="token number">0.01</span><span class="token punctuation">)</span>  s <span class="token operator">=</span> np<span class="token punctuation">.</span>cos<span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>pi <span class="token operator">*</span> t<span class="token punctuation">)</span>  <span class="token comment"># fig上的图像为 ax1 和 ax3</span>  fig<span class="token punctuation">,</span> <span class="token punctuation">(</span>ax1<span class="token punctuation">,</span> ax3<span class="token punctuation">)</span> <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">2.7</span><span class="token punctuation">)</span><span class="token punctuation">,</span> layout<span class="token operator">=</span><span class="token string">'constrained'</span><span class="token punctuation">)</span>  l1<span class="token punctuation">,</span> <span class="token operator">=</span> ax1<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>t<span class="token punctuation">,</span> s<span class="token punctuation">)</span>  <span class="token comment"># ax2 和 ax1 绘制在一起, 共享x轴</span>  ax2 <span class="token operator">=</span> ax1<span class="token punctuation">.</span>twinx<span class="token punctuation">(</span><span class="token punctuation">)</span>  l2<span class="token punctuation">,</span> <span class="token operator">=</span> ax2<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'C1'</span><span class="token punctuation">)</span>  ax2<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">[</span>l1<span class="token punctuation">,</span> l2<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Sine (left)'</span><span class="token punctuation">,</span> <span class="token string">'Straight (right)'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  ax3<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>t<span class="token punctuation">,</span> s<span class="token punctuation">)</span>  ax3<span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">'Angle [rad]'</span><span class="token punctuation">)</span>  <span class="token comment"># secondary_xaxis 用于创建一个新的x轴 传入了和原x轴的互相转换函数</span>  ax4 <span class="token operator">=</span> ax3<span class="token punctuation">.</span>secondary_xaxis<span class="token punctuation">(</span><span class="token string">'top'</span><span class="token punctuation">,</span> functions<span class="token operator">=</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>rad2deg<span class="token punctuation">,</span> np<span class="token punctuation">.</span>deg2rad<span class="token punctuation">)</span><span class="token punctuation">)</span>  ax4<span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">'Angle [°]'</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>e9_5<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="10-色块图"><a href="#10-色块图" class="headerlink" title="10. 色块图"></a>10. 色块图</h1><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>python</span></div><code class="language-python"><span class="token keyword">def</span> <span class="token function">e10</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  data1<span class="token punctuation">,</span> data2<span class="token punctuation">,</span> data3 <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>  X<span class="token punctuation">,</span> Y <span class="token operator">=</span> np<span class="token punctuation">.</span>meshgrid<span class="token punctuation">(</span>np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  Z <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> X<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">+</span> X<span class="token operator">**</span><span class="token number">5</span> <span class="token operator">+</span> Y<span class="token operator">**</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span>X<span class="token operator">**</span><span class="token number">2</span> <span class="token operator">-</span> Y<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span>  fig<span class="token punctuation">,</span> axs <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> layout<span class="token operator">=</span><span class="token string">'constrained'</span><span class="token punctuation">)</span>  pc <span class="token operator">=</span> axs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>pcolormesh<span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> Z<span class="token punctuation">,</span> vmin<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> vmax<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'RdBu_r'</span><span class="token punctuation">)</span>  fig<span class="token punctuation">.</span>colorbar<span class="token punctuation">(</span>pc<span class="token punctuation">,</span> ax<span class="token operator">=</span>axs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  axs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'pcolormesh()'</span><span class="token punctuation">)</span>  co <span class="token operator">=</span> axs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>contourf<span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> Z<span class="token punctuation">,</span> levels<span class="token operator">=</span>np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.25</span><span class="token punctuation">,</span> <span class="token number">1.25</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  fig<span class="token punctuation">.</span>colorbar<span class="token punctuation">(</span>co<span class="token punctuation">,</span> ax<span class="token operator">=</span>axs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  axs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'contourf()'</span><span class="token punctuation">)</span>  pc <span class="token operator">=</span> axs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>Z<span class="token operator">**</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'plasma'</span><span class="token punctuation">,</span>                            norm<span class="token operator">=</span>mpl<span class="token punctuation">.</span>colors<span class="token punctuation">.</span>LogNorm<span class="token punctuation">(</span>vmin<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">,</span> vmax<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  fig<span class="token punctuation">.</span>colorbar<span class="token punctuation">(</span>pc<span class="token punctuation">,</span> ax<span class="token operator">=</span>axs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> extend<span class="token operator">=</span><span class="token string">'both'</span><span class="token punctuation">)</span>  axs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'imshow() with LogNorm()'</span><span class="token punctuation">)</span>  pc <span class="token operator">=</span> axs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>data1<span class="token punctuation">,</span> data2<span class="token punctuation">,</span> c<span class="token operator">=</span>data3<span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'RdBu_r'</span><span class="token punctuation">)</span>  fig<span class="token punctuation">.</span>colorbar<span class="token punctuation">(</span>pc<span class="token punctuation">,</span> ax<span class="token operator">=</span>axs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> extend<span class="token operator">=</span><span class="token string">'both'</span><span class="token punctuation">)</span>  axs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'scatter()'</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>e10<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="11-多-axes-使用-dict-操作"><a href="#11-多-axes-使用-dict-操作" class="headerlink" title="11. 多 axes 使用 dict 操作"></a>11. 多 axes 使用 dict 操作</h1><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>python</span></div><code class="language-python"><span class="token keyword">def</span> <span class="token function">e11</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  fig<span class="token punctuation">,</span> axd <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplot_mosaic<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'upleft'</span><span class="token punctuation">,</span> <span class="token string">'right'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                               <span class="token punctuation">[</span><span class="token string">'lowleft'</span><span class="token punctuation">,</span> <span class="token string">'right'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> layout<span class="token operator">=</span><span class="token string">'constrained'</span><span class="token punctuation">)</span>  axd<span class="token punctuation">[</span><span class="token string">'upleft'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'upleft'</span><span class="token punctuation">)</span>  axd<span class="token punctuation">[</span><span class="token string">'lowleft'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'lowleft'</span><span class="token punctuation">)</span>  axd<span class="token punctuation">[</span><span class="token string">'right'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'right'</span><span class="token punctuation">)</span>e11<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>豆知识</tag>
      
      <tag>笔记</tag>
      
      <tag>python</tag>
      
      <tag>库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Numpy入门笔记</title>
    <link href="/2023/11/28/pythonNumpy.html"/>
    <url>/2023/11/28/pythonNumpy.html</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>网站 <a href="https://numpy.org/">https://numpy.org/</a></p><p>NumPy（Numerical Python）是Python中数字处理的事实标准，也是学习其他数据知识的必备工具。</p><p>本文是学习Numpy过程中的笔记，所有内容都来自官方文档：<a href="https://numpy.org/doc/stable/user/absolute_beginners.html">https://numpy.org/doc/stable/user/absolute_beginners.html</a></p><span id="more"></span><h1 id="1-普通数组和np数组的区别"><a href="#1-普通数组和np数组的区别" class="headerlink" title="1. 普通数组和np数组的区别"></a>1. 普通数组和np数组的区别</h1><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>python</span></div><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment"># 普通数组</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment"># np数组</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="2-创建np数组的方法"><a href="#2-创建np数组的方法" class="headerlink" title="2. 创建np数组的方法"></a>2. 创建np数组的方法</h1><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>python</span></div><code class="language-python">np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment"># 全0填充</span>np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment"># 全1填充</span>np<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment"># 空数组</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment"># [0, 1, 2, 3]</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment"># [2, 4, 6, 8]</span>np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> num<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment"># [0, 2.5, 5, 7.5, 10]</span><span class="token comment"># 可以自己决定数据类型</span>np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>int64<span class="token punctuation">)</span> <span class="token comment"># [1, 1]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="3-排序和拼接"><a href="#3-排序和拼接" class="headerlink" title="3. 排序和拼接"></a>3. 排序和拼接</h1><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>python</span></div><code class="language-python">arr <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment"># 排序</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 拼接</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>y <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment"># 拼接</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="4-形状和大小"><a href="#4-形状和大小" class="headerlink" title="4. 形状和大小"></a>4. 形状和大小</h1><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>python</span></div><code class="language-python">array_example <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token punctuation">,</span><span class="token number">1</span> <span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>array_example<span class="token punctuation">.</span>ndim <span class="token comment"># 维度 3</span>array_example<span class="token punctuation">.</span>size <span class="token comment"># 大小 24</span>array_example<span class="token punctuation">.</span>shape <span class="token comment"># 形状 (3, 2, 4)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="5-改变数组的形状"><a href="#5-改变数组的形状" class="headerlink" title="5. 改变数组的形状"></a>5. 改变数组的形状</h1><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>python</span></div><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>b <span class="token operator">=</span> a<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment"># [[0 1]</span><span class="token comment">#  [2 3]</span><span class="token comment">#  [4 5]]</span>np<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>a<span class="token punctuation">,</span> newshape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> order<span class="token operator">=</span><span class="token string">'C'</span><span class="token punctuation">)</span> <span class="token comment"># 更多参数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="6-添加维度"><a href="#6-添加维度" class="headerlink" title="6. 添加维度"></a>6. 添加维度</h1><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>python</span></div><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span>shape <span class="token comment"># 一维 (6, )</span>a2 <span class="token operator">=</span> a<span class="token punctuation">[</span>np<span class="token punctuation">.</span>newaxis<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span>a2<span class="token punctuation">.</span>shape <span class="token comment"># 二维 (1, 6)</span>col_vector <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>newaxis<span class="token punctuation">]</span> <span class="token comment"># 插入列向量</span>col_vector<span class="token punctuation">.</span>shape <span class="token comment"># 二维 (6, 1)</span><span class="token comment"># 在指定维度插入</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>expand_dims<span class="token punctuation">(</span>a<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>b<span class="token punctuation">.</span>shape <span class="token comment"># (6, 1)</span>c <span class="token operator">=</span> np<span class="token punctuation">.</span>expand_dims<span class="token punctuation">(</span>a<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span>shape <span class="token comment"># (1, 6)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="7-索引和切片"><a href="#7-索引和切片" class="headerlink" title="7. 索引和切片"></a>7. 索引和切片</h1><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>python</span></div><code class="language-python">data <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment"># 正常索引方式 2</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token comment"># 正常切片 array([1, 2])</span>data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token comment"># 正向到底 array([2, 3])</span>data<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token comment"># 反向到底 array([2, 3])</span><span class="token comment"># 条件过滤</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>a<span class="token punctuation">[</span>a <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">]</span> <span class="token comment"># 符合条件的内容 [1 2 3 4 5 6 7]</span>five_up <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">>=</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment"># 条件表达式作为参数</span>a<span class="token punctuation">[</span>five_up<span class="token punctuation">]</span> <span class="token comment"># [5 6 7 8 9 10 11 12]</span>c <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token punctuation">(</span>a <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment"># 可以使用与&amp;或| [3 4 5 6 7 8 9 10]</span>five_up <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment"># 条件本身会被计算成一个bool数组, 和原数组结构相同</span>five_up<span class="token comment"># [[False False False False]</span><span class="token comment">#  [ True  True  True  True]</span><span class="token comment">#  [ True  True  True True]]</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>nonzero<span class="token punctuation">(</span>a <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token comment"># 根据查询条件, 返回符合条件的元素的索引</span><span class="token comment"># 返回的数组数是a的维数, 返回值是索引值, 返回长度是符合条件的个数</span><span class="token comment"># print(b) # (array([0, 0, 0, 0, 1], dtype=int64), array([0, 1, 2, 3, 0], dtype=int64))</span><span class="token comment"># 将上述内容压缩成坐标列表</span>list_of_coordinates<span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># [[0, 0], [0, 1], [0, 2], [0, 3], [1, 0]]</span>a<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token comment"># 也可以用索引直接获得元素 [1 2 3 4 5]</span><span class="token comment"># 结果为空</span>not_there <span class="token operator">=</span> np<span class="token punctuation">.</span>nonzero<span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">42</span><span class="token punctuation">)</span> <span class="token comment"># (array([], dtype=int64), array([], dtype=int64))</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="8-现有数据转数组"><a href="#8-现有数据转数组" class="headerlink" title="8. 现有数据转数组"></a>8. 现有数据转数组</h1><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>python</span></div><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span>arr1 <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token comment"># 通过切片创建新数组 array([4, 5, 6, 7, 8])</span>a1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>a2 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>vstack<span class="token punctuation">(</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> a2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 垂直堆叠 [[1, 1], [2, 2], [3, 3], [4, 4]]</span>np<span class="token punctuation">.</span>hstack<span class="token punctuation">(</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> a2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 水平堆叠 [[1, 1], [3, 3], [2, 2], [4, 4]]</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token comment"># 素材</span><span class="token comment"># array([[ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12],</span><span class="token comment">#       [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]])</span>np<span class="token punctuation">.</span>hsplit<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment"># 拆成三个</span><span class="token comment"># [array([[ 1,  2,  3,  4],</span><span class="token comment">#        [13, 14, 15, 16]]), array([[ 5,  6,  7,  8],</span><span class="token comment">#        [17, 18, 19, 20]]), array([[ 9, 10, 11, 12],</span><span class="token comment">#        [21, 22, 23, 24]])]</span>np<span class="token punctuation">.</span>hsplit<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 按指定列号拆分</span><span class="token comment"># [array([[ 1,  2,  3],</span><span class="token comment">#        [13, 14, 15]]), array([[ 4],</span><span class="token comment">#        [16]]), array([[ 5,  6,  7,  8,  9, 10, 11, 12],</span><span class="token comment">#        [17, 18, 19, 20, 21, 22, 23, 24]])]</span><span class="token comment"># 视图是引用, 修改视图也会修改原数据</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b1 <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token comment"># array([1, 2, 3, 4])</span>b1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">99</span>a<span class="token comment"># array([[99,  2,  3,  4],</span><span class="token comment">#        [ 5,  6,  7,  8],</span><span class="token comment">#        [ 9, 10, 11, 12]])</span><span class="token comment"># copy是复制, 修改copy对原数据没影响</span>b2 <span class="token operator">=</span> a<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="9-基础数组操作"><a href="#9-基础数组操作" class="headerlink" title="9. 基础数组操作"></a>9. 基础数组操作</h1><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>python</span></div><code class="language-python"><span class="token comment"># 加减乘除</span>data <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># [1 2]</span>ones <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token comment"># [1 1]</span>data <span class="token operator">+</span> ones <span class="token comment"># [2 3]</span><span class="token comment"># 求和</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 10</span><span class="token comment"># 在所选维度求和</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment"># [3, 3]</span>b<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># [2, 4]</span><span class="token comment"># 和常量的运算</span>data <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>data <span class="token operator">*</span> <span class="token number">1.6</span> <span class="token comment"># [1.6 3.2]</span><span class="token comment"># 素材</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.45053314</span><span class="token punctuation">,</span> <span class="token number">0.17296777</span><span class="token punctuation">,</span> <span class="token number">0.34376245</span><span class="token punctuation">,</span> <span class="token number">0.5510652</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span><span class="token number">0.54627315</span><span class="token punctuation">,</span> <span class="token number">0.05093587</span><span class="token punctuation">,</span> <span class="token number">0.40067661</span><span class="token punctuation">,</span> <span class="token number">0.55645993</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span><span class="token number">0.12697628</span><span class="token punctuation">,</span> <span class="token number">0.82485143</span><span class="token punctuation">,</span> <span class="token number">0.26590556</span><span class="token punctuation">,</span> <span class="token number">0.56917101</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 求和 4.8595784</span>a<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 极小值 0.05093587</span>a<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment"># 维度极小值 [0.12697628, 0.05093587, 0.26590556, 0.5510652 ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="10-矩阵"><a href="#10-矩阵" class="headerlink" title="10. 矩阵"></a>10. 矩阵</h1><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>python</span></div><code class="language-python">data <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># array([[1, 2],</span><span class="token comment">#        [3, 4],</span><span class="token comment">#        [5, 6]])</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment"># 正常索引 2</span>data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token comment"># 正常切片 array([[3, 4], [5, 6]])</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment"># 0:2是切片, 0是索引, 切片和索引混用 array([1, 3])</span>data<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 6</span>data<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 1</span>data<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 21</span><span class="token comment"># 也可以指定维度</span>data <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>data<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment"># array([5, 6])</span>data<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># array([2, 5, 6])</span><span class="token comment"># 矩阵之间的运算（需要矩阵尺寸相同）</span>data <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>ones <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>data <span class="token operator">+</span> ones <span class="token comment"># array([[2, 3], [4, 5]])</span><span class="token comment"># 如果某个矩阵只有一行或者一列, 也可使用广播规则运算</span>data <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>ones_row <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>data <span class="token operator">+</span> ones_row<span class="token comment"># array([[2, 3],</span><span class="token comment">#        [4, 5],</span><span class="token comment">#        [6, 7]])</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="11-生成随机数"><a href="#11-生成随机数" class="headerlink" title="11. 生成随机数"></a>11. 生成随机数</h1><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>python</span></div><code class="language-python">rng <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>default_rng<span class="token punctuation">(</span><span class="token punctuation">)</span>rng<span class="token punctuation">.</span>integers<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 两行四列, 随机整数, 小于5</span>rng<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 三行两列 0-1之间 float</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="12-去重和计数"><a href="#12-去重和计数" class="headerlink" title="12. 去重和计数"></a>12. 去重和计数</h1><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>python</span></div><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span>unique_values <span class="token operator">=</span> np<span class="token punctuation">.</span>unique<span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment"># 去重 [11 12 13 14 15 16 17 18 19 20]</span>unique_values<span class="token punctuation">,</span> indices_list <span class="token operator">=</span> np<span class="token punctuation">.</span>unique<span class="token punctuation">(</span>a<span class="token punctuation">,</span> return_index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token comment"># 序号 [ 0  2  3  4  5  6  7 12 13 14]</span>unique_values<span class="token punctuation">,</span> occurrence_count <span class="token operator">=</span> np<span class="token punctuation">.</span>unique<span class="token punctuation">(</span>a<span class="token punctuation">,</span> return_counts<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token comment"># 数量 [3 2 2 2 1 1 1 1 1 1]</span><span class="token comment"># 对多维数组也可用</span>a_2d <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>unique_values <span class="token operator">=</span> np<span class="token punctuation">.</span>unique<span class="token punctuation">(</span>a_2d<span class="token punctuation">)</span> <span class="token comment"># 去重 [ 1  2  3  4  5  6  7  8  9 10 11 12]</span>unique_rows <span class="token operator">=</span> np<span class="token punctuation">.</span>unique<span class="token punctuation">(</span>a_2d<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment"># 获得去重的行</span><span class="token comment"># [[ 1  2  3  4]</span><span class="token comment">#  [ 5  6  7  8]</span><span class="token comment">#  [ 9 10 11 12]]</span>unique_rows<span class="token punctuation">,</span> indices<span class="token punctuation">,</span> occurrence_count <span class="token operator">=</span> np<span class="token punctuation">.</span>unique<span class="token punctuation">(</span>a_2d<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> return_counts<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> return_index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>indices <span class="token comment"># 所得行的序号 [0 1 2]</span>occurrence_count <span class="token comment"># 所得行的数量 [2 1 1]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="13-矩阵转置和变形"><a href="#13-矩阵转置和变形" class="headerlink" title="13. 矩阵转置和变形"></a>13. 矩阵转置和变形</h1><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>python</span></div><code class="language-python">data <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 变形</span>data<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token comment"># array([[1, 2, 3],</span><span class="token comment">#        [4, 5, 6]])</span>data<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment"># array([[1, 2],</span><span class="token comment">#        [3, 4],</span><span class="token comment">#        [5, 6]])</span><span class="token comment"># 转置</span>data <span class="token operator">=</span> data<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment"># 先准备一个 23 矩阵</span><span class="token comment"># array([[1, 2, 3],</span><span class="token comment">#        [4, 5, 6]])</span>data<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 转置</span><span class="token comment"># [[1 4]</span><span class="token comment">#  [2 5]</span><span class="token comment">#  [3 6]]</span><span class="token comment"># 也可以直接用T</span>data<span class="token punctuation">.</span>T<span class="token comment"># [[1 4]</span><span class="token comment">#  [2 5]</span><span class="token comment">#  [3 6]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="14-数组逆序"><a href="#14-数组逆序" class="headerlink" title="14. 数组逆序"></a>14. 数组逆序</h1><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>python</span></div><code class="language-python">arr <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span>reversed_arr <span class="token operator">=</span> np<span class="token punctuation">.</span>flip<span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment"># [8 7 6 5 4 3 2 1]</span><span class="token comment"># 二维数组逆序</span>arr_2d <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>reversed_arr <span class="token operator">=</span> np<span class="token punctuation">.</span>flip<span class="token punctuation">(</span>arr_2d<span class="token punctuation">)</span><span class="token comment"># [[12 11 10  9]</span><span class="token comment">#  [ 8  7  6  5]</span><span class="token comment">#  [ 4  3  2  1]]</span><span class="token comment"># 针对的维度逆序</span>reversed_arr_rows <span class="token operator">=</span> np<span class="token punctuation">.</span>flip<span class="token punctuation">(</span>arr_2d<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment"># [[ 9 10 11 12]</span><span class="token comment">#  [ 5  6  7  8]</span><span class="token comment">#  [ 1  2  3  4]]</span><span class="token comment"># 对切片逆序并赋值</span>arr_2d<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>flip<span class="token punctuation">(</span>arr_2d<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># [[ 1 10  3  4]</span><span class="token comment">#  [ 8  7  6  5]</span><span class="token comment">#  [ 9  2 11 12]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="15-多维数组展开"><a href="#15-多维数组展开" class="headerlink" title="15. 多维数组展开"></a>15. 多维数组展开</h1><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>python</span></div><code class="language-python">x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>x<span class="token punctuation">.</span>flatten<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 拷贝展开 array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12])</span>a2 <span class="token operator">=</span> x<span class="token punctuation">.</span>ravel<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 引用展开 array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12])</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="16-内置文档"><a href="#16-内置文档" class="headerlink" title="16. 内置文档"></a>16. 内置文档</h1><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>python</span></div><code class="language-python"><span class="token comment"># help(max) 输出说明</span><span class="token comment"># max? 同名所有函数说明</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># a? 变量说明</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="17-实现数学公式"><a href="#17-实现数学公式" class="headerlink" title="17. 实现数学公式"></a>17. 实现数学公式</h1><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>python</span></div><code class="language-python">predictions <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>labels <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 例如均方误差公式</span>error <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">*</span> np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>square<span class="token punctuation">(</span>predictions <span class="token operator">-</span> labels<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="18-np对象导入导出"><a href="#18-np对象导入导出" class="headerlink" title="18. np对象导入导出"></a>18. np对象导入导出</h1><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>python</span></div><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># np.save('filename', a) 存成文件</span><span class="token comment"># b = np.load('filename.npy') 从文件读取</span><span class="token comment"># 使用csv格式</span><span class="token comment"># np.savetxt('new_file.csv', a)</span><span class="token comment"># np.loadtxt('new_file.csv')</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="19-使用-Pandas-库进行csv导入导出操作"><a href="#19-使用-Pandas-库进行csv导入导出操作" class="headerlink" title="19. 使用 Pandas 库进行csv导入导出操作"></a>19. 使用 Pandas 库进行csv导入导出操作</h1><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>python</span></div><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment"># # If all of your columns are the same type:</span><span class="token comment"># x = pd.read_csv('music.csv', header=0).values</span><span class="token comment"># print(x)</span><span class="token comment"># [['Billie Holiday' 'Jazz' 1300000 27000000]</span><span class="token comment">#  ['Jimmie Hendrix' 'Rock' 2700000 70000000]</span><span class="token comment">#  ['Miles Davis' 'Jazz' 1500000 48000000]</span><span class="token comment">#  ['SIA' 'Pop' 2000000 74000000]]</span><span class="token comment"># # You can also simply select the columns you need:</span><span class="token comment"># x = pd.read_csv('music.csv', usecols=['Artist', 'Plays']).values</span><span class="token comment"># print(x)</span><span class="token comment"># [['Billie Holiday' 27000000]</span><span class="token comment">#  ['Jimmie Hendrix' 70000000]</span><span class="token comment">#  ['Miles Davis' 48000000]</span><span class="token comment">#  ['SIA' 74000000]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="20-使用-Matplotlib-绘制数据图像"><a href="#20-使用-Matplotlib-绘制数据图像" class="headerlink" title="20. 使用 Matplotlib 绘制数据图像"></a>20. 使用 Matplotlib 绘制数据图像</h1><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>python</span></div><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token comment"># 显示数组</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>a<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 两种数据</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>y <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token string">'purple'</span><span class="token punctuation">)</span> <span class="token comment"># line</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">)</span>      <span class="token comment"># dots</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 高级使用</span>fig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span>ax <span class="token operator">=</span> fig<span class="token punctuation">.</span>add_subplot<span class="token punctuation">(</span>projection<span class="token operator">=</span><span class="token string">'3d'</span><span class="token punctuation">)</span>X <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0.15</span><span class="token punctuation">)</span>Y <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0.15</span><span class="token punctuation">)</span>X<span class="token punctuation">,</span> Y <span class="token operator">=</span> np<span class="token punctuation">.</span>meshgrid<span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">)</span>R <span class="token operator">=</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>X<span class="token operator">**</span><span class="token number">2</span> <span class="token operator">+</span> Y<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span>Z <span class="token operator">=</span> np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>R<span class="token punctuation">)</span>ax<span class="token punctuation">.</span>plot_surface<span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> Z<span class="token punctuation">,</span> rstride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> cstride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'viridis'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>豆知识</tag>
      
      <tag>笔记</tag>
      
      <tag>python</tag>
      
      <tag>库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AI入门笔记（2）——知识表示与专家系统</title>
    <link href="/2023/11/24/AiForBeginners-2.html"/>
    <url>/2023/11/24/AiForBeginners-2.html</url>
    
    <content type="html"><![CDATA[<h1 id="课程"><a href="#课程" class="headerlink" title="课程"></a>课程</h1><p><a href="https://github.com/microsoft/AI-For-Beginners/blob/main/lessons/2-Symbolic/README.md">https://github.com/microsoft/AI-For-Beginners/blob/main/lessons/2-Symbolic/README.md</a></p><p>这是微软提供的AI-For-Beginners课程第二课，介绍了过去常见的自顶向下的AI设计方法。</p><span id="more"></span><h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><p>通过DIKW金字塔，探讨了 数据、信息、知识、智慧 的含义，传统的人工智能实现方式就是一类尝试将数据组织成知识的方法。</p><p>探讨了使用计算机表达知识的几种方式。</p><h2 id="专家系统"><a href="#专家系统" class="headerlink" title="专家系统"></a>专家系统</h2><p>介绍了早期<code>symbolic AI</code>的一种成功实践：专家系统。</p><p>将专家系统的实现区分为两种类型：向后推理与向前推理。</p><p>后向推理实现专家系统的代码实践：<a href="https://github.com/vitsumoc/exercise-AI-Beginner/blob/main/2-Symbolic/animal_Inference.py">https://github.com/vitsumoc/exercise-AI-Beginner/blob/main/2-Symbolic/animal_Inference.py</a></p><h2 id="本体论和语义网"><a href="#本体论和语义网" class="headerlink" title="本体论和语义网"></a>本体论和语义网</h2><p><code>ontology</code> 本体指的是某个概念实体，<code>Semantic Web</code> 语义网指的是对本体的各种规范性描述的集合，简单的有对本体属性的描述，复杂的有对各种逻辑关系的描述。</p><p>本体和语义网也是对人类思考方式的归纳和模仿，是一种组织复杂数据形成知识的方式，<code>WikiData</code> 就是这样的一个知识库。</p><p>使用语义网实现家谱查询系统的代码实践：<a href="https://github.com/vitsumoc/exercise-AI-Beginner/blob/main/2-Symbolic/family_ontology.py">https://github.com/vitsumoc/exercise-AI-Beginner/blob/main/2-Symbolic/family_ontology.py</a></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>学习了<code>Symbolic AI</code>的概念，历史，还通过几个简单例子进行了最简单的了解。</p><p>可以感受到曾经计算机行业的先驱者们为了赋予计算机智能，付出了多少辛劳和汗水，也取得了巨大的成果。</p><p>However, the important characteristics of knowledge-based systems is that you can always <em>explain</em> exactly how any of the decisions were made.</p>]]></content>
    
    
    <categories>
      
      <category>AI学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AI</tag>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AI入门笔记（1）——简介与历史</title>
    <link href="/2023/11/24/AiForBeginners-1.html"/>
    <url>/2023/11/24/AiForBeginners-1.html</url>
    
    <content type="html"><![CDATA[<h1 id="课程"><a href="#课程" class="headerlink" title="课程"></a>课程</h1><p><a href="https://github.com/microsoft/AI-For-Beginners/blob/main/lessons/1-Intro/README.md">https://github.com/microsoft/AI-For-Beginners/blob/main/lessons/1-Intro/README.md</a></p><p>这是微软提供的AI-For-Beginners课程第一课，对AI的基础概念、定义、发展历史等内容进行了简单的介绍。</p><span id="more"></span><h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><p>什么是<code>Weak AI</code>，什么是<code>Strong AI</code></p><p>什么是图灵测试，如何定义<code>Intelligence</code></p><p>AI的不同实现路径，过去主要是<code>Symbolic Reasoning</code>，而现在主要使用<code>Neural Networks</code></p><p>AI发展的简要历史</p><p>近年来AI技术取得的重大进展：图片识别、自然语言识别、翻译等等</p>]]></content>
    
    
    <categories>
      
      <category>AI学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AI</tag>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用SSH包装Socks5代理</title>
    <link href="/2023/11/22/SSHInSubSocks.html"/>
    <url>/2023/11/22/SSHInSubSocks.html</url>
    
    <content type="html"><![CDATA[<h1 id="subSocks简介"><a href="#subSocks简介" class="headerlink" title="subSocks简介"></a>subSocks简介</h1><p><a href="https://github.com/luyuhuang/subsocks">subSocks</a>是<a href="https://luyuhuang.tech/">Luyu Huang</a>制作的纯golang网络代理软件。</p><p>这里是作者本人对此项目的介绍<a href="https://luyuhuang.tech/2020/12/02/subsocks.html">文档</a>。</p><span id="more"></span><h1 id="为什么要做SSH包装"><a href="#为什么要做SSH包装" class="headerlink" title="为什么要做SSH包装"></a>为什么要做SSH包装</h1><p>因为之前使用v2ray总是被封端口，但是VPS上的22端口始终建在，考虑到SSH协议比较复杂，包括了Shell，SFTP等多种应用。我认为使用SSH协议包装流量可以起到一定的伪装作用，减少端口被封的可能性。</p><p>subSocks项目的代码结构非常漂亮，添加SSH包装非常便捷。</p><h1 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h1><p>首先需要了解subSocks的代码结构，Luyu Huang的<a href="https://luyuhuang.tech/2020/12/02/subsocks.html">文档</a>中描述的非常详细，我只需要实现SSHWarpper和SSHStripper。</p><p>golang已经提供了SSH的官方实现，参考<a href="https://pkg.go.dev/golang.org/x/crypto/ssh">文档</a>。并且提供了使用SSH进行远程Shell的示例。</p><p>之后需要对SSH的<a href="/2023/11/20/SSH.html">通讯过程</a>，<code>Session</code> <code>Channel</code> <code>Request</code>等等各种概念有基础的了解。</p><p>使用ssh包中的代码，在服务端使用TCP链接，创建SSH服务器，等待客户端链接后获取Channel，将Channel包装为Stripper。</p><p>客户端与服务端相似，需要使用TCP链接，向服务端完成握手过程，之后可获得Session，将Session包装成Wrapper。</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>服务端必须配置密钥，可使用自己生成的密钥：</p><figure><div class="code-wrapper"><pre class="line-numbers language-toml" data-language="toml"><div class="caption"><span>toml</span></div><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">server</span><span class="token punctuation">]</span> <span class="token comment"># server configuration</span><span class="token key property">protocol</span> <span class="token punctuation">=</span> <span class="token string">"ssh"</span><span class="token key property">listen</span> <span class="token punctuation">=</span> <span class="token string">"0.0.0.0:22"</span><span class="token key property">ssh.cert</span> <span class="token punctuation">=</span> <span class="token string">"./id_rsa.pub"</span><span class="token key property">ssh.key</span> <span class="token punctuation">=</span> <span class="token string">"./id_rsa"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>客户端只需将协议设置为ssh，其他与subsocks相同:</p><figure><div class="code-wrapper"><pre class="line-numbers language-toml" data-language="toml"><div class="caption"><span>toml</span></div><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">client</span><span class="token punctuation">]</span> <span class="token comment"># client configuration</span><span class="token key property">listen</span> <span class="token punctuation">=</span> <span class="token string">"127.0.0.1:1080"</span><span class="token key property">server.protocol</span> <span class="token punctuation">=</span> <span class="token string">"ssh"</span><span class="token key property">server.address</span> <span class="token punctuation">=</span> <span class="token string">"serverIP:22"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>通过抓包验证，握手过程正常，通讯过程与SSH相同，多条链接使用正常，所有数据均经过加密：</p><p><img src="/2023/11/22/SSHInSubSocks/wireshark.png"></p><p>通过观看视频网站验证，视频加载流畅，体验很好。</p>]]></content>
    
    
    <categories>
      
      <category>网络编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络编程</tag>
      
      <tag>SSH</tag>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>golang与串口设备在项目中的运用</title>
    <link href="/2023/11/22/golangSerial.html"/>
    <url>/2023/11/22/golangSerial.html</url>
    
    <content type="html"><![CDATA[<h1 id="需求简述"><a href="#需求简述" class="headerlink" title="需求简述"></a>需求简述</h1><p>硬件设备使用485Modbus通讯，需使用golang编写采集程序，将数据采集至平台。</p><span id="more"></span><h1 id="方案简述"><a href="#方案简述" class="headerlink" title="方案简述"></a>方案简述</h1><p>使用串口服务器将485Modbus通讯转为TCPModbus，并将串口服务器设置为TCPserver。</p><p>使用golang编写采集器，定期向串口服务器建立TCP链接，采集数据。</p><h1 id="技术点与实现"><a href="#技术点与实现" class="headerlink" title="技术点与实现"></a>技术点与实现</h1><h2 id="点表"><a href="#点表" class="headerlink" title="点表"></a>点表</h2><p>通过<code>struct</code>实现点位表</p><p>这里使用Raw表示原始点表数据，和通讯协议一一对应</p><p>后续可将Raw结构封装至更高层的业务结构，用来实现业务数据的表示、嵌套能其他功能</p><figure><div class="code-wrapper"><pre class="line-numbers language-go" data-language="go"><div class="caption"><span>go</span></div><code class="language-go"><span class="token keyword">type</span> StructMcuRaw <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>Ver               <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token builtin">uint8</span> <span class="token string">`json:"ver"`</span>                                                                               <span class="token comment">// 软件版本[4]char</span>Id                <span class="token builtin">uint16</span>   <span class="token string">`json:"id"`</span>                                                                                <span class="token comment">// 通信箱id</span>TargetAngle       <span class="token builtin">uint16</span>   <span class="token string">`json:"targetAngle" IEC104:"yc" IEC104Name:"子阵目标角度" IEC104Unit:"°" IEC104Factor:"0.1"`</span> <span class="token comment">// 对整个子阵设置目标角度</span>InitSnowDepth     <span class="token builtin">uint16</span>   <span class="token string">`json:"initSnowDepth" IEC104:"yx" IEC104Name:"标定初始雪深标志"`</span>                              <span class="token comment">// 标定初始雪深标志</span>PrecipitationType <span class="token builtin">uint16</span>   <span class="token string">`json:"precipitationType"`</span>                                                                 <span class="token comment">// 降水类型</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="读取二进制数据"><a href="#读取二进制数据" class="headerlink" title="读取二进制数据"></a>读取二进制数据</h2><p>通过<code>binary</code>包，可以实现从buffer中读取数据向<code>struct</code>赋值</p><figure><div class="code-wrapper"><pre class="line-numbers language-go" data-language="go"><div class="caption"><span>go</span></div><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>StructMcuRaw<span class="token punctuation">)</span> <span class="token function">MCUFromByte</span><span class="token punctuation">(</span>res <span class="token operator">*</span>bytes<span class="token punctuation">.</span>Buffer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 软件版本[4]char</span><span class="token keyword">for</span> x <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> x<span class="token operator">++</span> <span class="token punctuation">&#123;</span>binary<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> binary<span class="token punctuation">.</span>BigEndian<span class="token punctuation">,</span> p<span class="token punctuation">.</span>Ver<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 通信箱id</span>binary<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> binary<span class="token punctuation">.</span>BigEndian<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token comment">// 对整个子阵设置目标角度</span>binary<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> binary<span class="token punctuation">.</span>BigEndian<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p<span class="token punctuation">.</span>TargetAngle<span class="token punctuation">)</span><span class="token comment">// 标定初始雪深标志</span>binary<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> binary<span class="token punctuation">.</span>BigEndian<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p<span class="token punctuation">.</span>InitSnowDepth<span class="token punctuation">)</span><span class="token comment">// 降水类型</span>binary<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> binary<span class="token punctuation">.</span>BigEndian<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p<span class="token punctuation">.</span>PrecipitationType<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="封装为query"><a href="#封装为query" class="headerlink" title="封装为query"></a>封装为query</h2><p>在本项目中，query指对单个设备的采集方法</p><p>将数据读取封装成query方法，包括TCP采集过程、日志记录、包格式处理等</p><figure><div class="code-wrapper"><pre class="line-numbers language-go" data-language="go"><div class="caption"><span>go</span></div><code class="language-go"><span class="token keyword">func</span> <span class="token function">MCUQuery</span><span class="token punctuation">(</span>conn <span class="token operator">*</span>net<span class="token punctuation">.</span>Conn<span class="token punctuation">,</span> reader <span class="token operator">*</span>bufio<span class="token punctuation">.</span>Reader<span class="token punctuation">,</span> buffer <span class="token operator">*</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> cb <span class="token operator">*</span>rs<span class="token punctuation">.</span>StructCommBox<span class="token punctuation">,</span> mcu <span class="token operator">*</span>rs<span class="token punctuation">.</span>StructMcu<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span><span class="token comment">// 查询地址</span>addInt<span class="token punctuation">,</span> err <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span>mcu<span class="token punctuation">.</span>Addr<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> err<span class="token punctuation">&#125;</span><span class="token comment">// 包编号</span>tcpSeq <span class="token operator">:=</span> <span class="token function">TcpSeq</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> query <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">&#123;</span><span class="token function">uint8</span><span class="token punctuation">(</span>tcpSeq <span class="token operator">/</span> <span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">uint8</span><span class="token punctuation">(</span>tcpSeq <span class="token operator">%</span> <span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 编号</span><span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x06</span><span class="token punctuation">,</span> <span class="token comment">// 长度</span><span class="token function">byte</span><span class="token punctuation">(</span>addInt<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0x03</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0xa0</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x29</span><span class="token punctuation">&#125;</span> <span class="token comment">// 指令</span><span class="token punctuation">(</span><span class="token operator">*</span>conn<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetWriteDeadline</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span>QUERY_DEFAULT_TIMEOUT<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>conn<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> cb<span class="token punctuation">.</span>IpAddr<span class="token punctuation">,</span> cb<span class="token punctuation">.</span>Port<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">return</span> err<span class="token punctuation">&#125;</span><span class="token comment">// 日志</span>log<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> cb<span class="token punctuation">.</span>IpAddr<span class="token punctuation">,</span> cb<span class="token punctuation">.</span>Port<span class="token punctuation">,</span> query<span class="token punctuation">)</span><span class="token comment">// 接收</span><span class="token punctuation">(</span><span class="token operator">*</span>conn<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetReadDeadline</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span>QUERY_DEFAULT_TIMEOUT<span class="token punctuation">)</span><span class="token punctuation">)</span>n<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span>reader<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token operator">*</span>buffer<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> cb<span class="token punctuation">.</span>IpAddr<span class="token punctuation">,</span> cb<span class="token punctuation">.</span>Port<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">return</span> err<span class="token punctuation">&#125;</span><span class="token comment">// 日志</span>log<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> cb<span class="token punctuation">.</span>IpAddr<span class="token punctuation">,</span> cb<span class="token punctuation">.</span>Port<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>buffer<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">// 解析</span>res <span class="token operator">:=</span> bytes<span class="token punctuation">.</span><span class="token function">NewBuffer</span><span class="token punctuation">(</span><span class="token operator">*</span>buffer<span class="token punctuation">)</span><span class="token comment">// TCP头</span><span class="token keyword">var</span> tcpHeader rs<span class="token punctuation">.</span>StructTCPHeadertcpHeader<span class="token punctuation">.</span><span class="token function">TCPHeaderFromByte</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token keyword">if</span> tcpHeader<span class="token punctuation">.</span>Seq <span class="token operator">!=</span> tcpSeq <span class="token punctuation">&#123;</span><span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"TCP异常"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> tcpHeader<span class="token punctuation">.</span>Len <span class="token operator">!=</span> <span class="token number">85</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"TCP长度异常"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// modbus头</span><span class="token keyword">var</span> mbHeader rs<span class="token punctuation">.</span>StructMudbusHeadermbHeader<span class="token punctuation">.</span><span class="token function">MudbusHeaderFromByte</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token comment">// mcu内容</span>mcu<span class="token punctuation">.</span>Raw<span class="token punctuation">.</span><span class="token function">MCUFromByte</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>mcu<span class="token punctuation">.</span>VUpdate <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment">// 标记更新</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="封装为采集过程"><a href="#封装为采集过程" class="headerlink" title="封装为采集过程"></a>封装为采集过程</h2><p>最后需要将所有的采集query放置在统一的采集过程中</p><p>在一次采集过程中，创建一条TCP链接，完成所有采集动作，最后断开链接</p><figure><div class="code-wrapper"><pre class="line-numbers language-go" data-language="go"><div class="caption"><span>go</span></div><code class="language-go"><span class="token keyword">func</span> <span class="token function">Collect</span><span class="token punctuation">(</span>cb <span class="token operator">*</span>rs<span class="token punctuation">.</span>StructCommBox<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 记录网络占用</span>NetCh <span class="token operator">&lt;-</span> <span class="token boolean">true</span><span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token operator">&lt;-</span>NetCh<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 初始化采集标识</span><span class="token function">eraseFlag</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span><span class="token comment">// 采集结束后更新时标</span><span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">updateTs</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 建链</span>conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">DialTimeout</span><span class="token punctuation">(</span><span class="token string">"tcp"</span><span class="token punctuation">,</span> cb<span class="token punctuation">.</span>IpAddr<span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>cb<span class="token punctuation">.</span>Port<span class="token punctuation">,</span> rs<span class="token punctuation">.</span>QUERY_DEFAULT_TIMEOUT<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> cb<span class="token punctuation">.</span>IpAddr<span class="token punctuation">,</span> cb<span class="token punctuation">.</span>Port<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">&#125;</span>cb<span class="token punctuation">.</span>VUpdate <span class="token operator">=</span> <span class="token boolean">true</span><span class="token keyword">defer</span> conn<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 读写缓存</span>readBuf <span class="token operator">:=</span> bufio<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span>buffer <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token comment">// 按mcu查询</span><span class="token keyword">for</span> x <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>cb<span class="token punctuation">.</span>Mcus<span class="token punctuation">)</span><span class="token punctuation">;</span> x<span class="token operator">++</span> <span class="token punctuation">&#123;</span><span class="token comment">// 切换MCU预留时间, 提高成功率</span>time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span>QUERY_MCU_INTERVAL<span class="token punctuation">)</span><span class="token comment">// 查mcu信息</span>mcu <span class="token operator">:=</span> cb<span class="token punctuation">.</span>Mcus<span class="token punctuation">[</span>x<span class="token punctuation">]</span>err <span class="token operator">=</span> cmd<span class="token punctuation">.</span><span class="token function">MCUQuery</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>conn<span class="token punctuation">,</span> readBuf<span class="token punctuation">,</span> <span class="token operator">&amp;</span>buffer<span class="token punctuation">,</span> cb<span class="token punctuation">,</span> mcu<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">&#125;</span><span class="token comment">// 分次查跟踪器信息</span><span class="token keyword">for</span> y <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> y <span class="token operator">&lt;</span> mcu<span class="token punctuation">.</span>TracerNum<span class="token punctuation">;</span> <span class="token punctuation">&#123;</span><span class="token comment">// 切换Tracer预留时间, 提高成功率</span>time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span>QUERY_TRACER_INTERVAL<span class="token punctuation">)</span><span class="token comment">// 查询长度</span>tracerLen <span class="token operator">:=</span> rs<span class="token punctuation">.</span>QUERY_TRACER_COUNT<span class="token keyword">if</span> mcu<span class="token punctuation">.</span>TracerNum<span class="token operator">-</span>y <span class="token operator">&lt;</span> rs<span class="token punctuation">.</span>QUERY_TRACER_COUNT <span class="token punctuation">&#123;</span>tracerLen <span class="token operator">=</span> mcu<span class="token punctuation">.</span>TracerNum <span class="token operator">-</span> y<span class="token punctuation">&#125;</span>err <span class="token operator">=</span> cmd<span class="token punctuation">.</span><span class="token function">TracerQuery</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>conn<span class="token punctuation">,</span> readBuf<span class="token punctuation">,</span> <span class="token operator">&amp;</span>buffer<span class="token punctuation">,</span> cb<span class="token punctuation">,</span> mcu<span class="token punctuation">,</span> y<span class="token punctuation">,</span> tracerLen<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">&#125;</span>y <span class="token operator">+=</span> tracerLen<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>使用golang+串口服务器进行串口通讯，非常的简单、直观，易于开发维护。</p><p>在本次项目实践中，由于golang提供了方便的并发编程与控制机制，高负载环境下的性能也得到了充分保障。</p>]]></content>
    
    
    <categories>
      
      <category>项目实践</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络编程</tag>
      
      <tag>项目实践</tag>
      
      <tag>golang</tag>
      
      <tag>串口通讯</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSH握手过程</title>
    <link href="/2023/11/20/SSH.html"/>
    <url>/2023/11/20/SSH.html</url>
    
    <content type="html"><![CDATA[<h1 id="RFC"><a href="#RFC" class="headerlink" title="RFC"></a>RFC</h1><p><a href="https://datatracker.ietf.org/doc/html/rfc4253">https://datatracker.ietf.org/doc/html/rfc4253</a></p><h1 id="SSH简介"><a href="#SSH简介" class="headerlink" title="SSH简介"></a>SSH简介</h1><p>安全外壳协议（Secure Shell Protocol，简称SSH）是一种加密的网络传输协议，可在不安全的网络中为网络服务提供安全的传输环境。SSH通过在网络中建立安全隧道来实现SSH客户端与服务器之间的连接。SSH最常见的用途是远程登录系统，人们通常利用SSH来传输命令行界面和远程执行命令。</p><span id="more"></span><h1 id="SSH数据包基本格式"><a href="#SSH数据包基本格式" class="headerlink" title="SSH数据包基本格式"></a>SSH数据包基本格式</h1><p>SSH的数据包加密后分块传输，每次传输的实际包长度都应为密码块大小的整数倍或8</p><p>每个加密后的数据包都由如下结构构成</p><figure class="highlight c"><figcaption><span>c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">uint32    packet_length;<br>byte      padding_length;<br>byte[n1]  payload; <span class="hljs-comment">// n1 = packet_length - padding_length - 1</span><br>byte[n2]  random_padding; <span class="hljs-comment">// n2 = padding_length</span><br>byte[m]   mac(Message_Authentication_Code - MAC); <span class="hljs-comment">// m = mac_length</span><br></code></pre></td></tr></table></figure><ul><li><p>packet_length：数据载荷的长度，不包括<code>mac</code>部分和<code>packet_length</code>本身。在进行加密协商完成后，传输的<code>packet_length</code>也会被加密</p></li><li><p>padding_length：<code>random_padding</code>块的大小</p></li><li><p>payload：数据载荷，根绝协商决定被加密或被压缩的方法</p></li><li><p>random padding： 0-255位随机填充</p></li><li><p>mac：信息认证码，用作信息完整性校验</p></li></ul><h1 id="SSH过程"><a href="#SSH过程" class="headerlink" title="SSH过程"></a>SSH过程</h1><p>以下采用一个SSH抓包结果为例，描述SSH链接建立过程：</p><p>|&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;|</p><p>|&nbsp;&nbsp;&nbsp;客户端&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;服务端&nbsp;&nbsp;&nbsp;&nbsp;|</p><p>|&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;|</p><p>|&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;链接建立&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;|</p><p>|1. 三次握手1|—————————————————————————————–&gt;</p><p>&lt;—————————————————————————————-|2. 三次握手2|</p><p>|3. 三次握手3|—————————————————————————————–&gt;</p><p>|&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;协议协商&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;|</p><p>&lt;—————————————————————————————-|4. 服务端协议|</p><p>|5. 客户端协议|—————————————————————————————–&gt;</p><p>|&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;算法协商&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;|</p><p>&lt;————————————————————————————-|6. 服务端算法表|</p><p>|7. 客户端算法表|————————————————————————————&gt;</p><p>|&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;密钥交换&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;|</p><p>|8. Diffie-Hellman Init|——————————————————————————&gt;</p><p>&lt;————————————————|9. Diffie-Hellman Reply，New Keys，加密包|</p><p>|10. New Keys|—————————————————————————————-&gt;</p><p>|&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;加密通讯&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;|</p><h2 id="链接建立"><a href="#链接建立" class="headerlink" title="链接建立"></a>链接建立</h2><p>（1）（2）（3）三次握手报文</p><p><a href="https://zh.wikipedia.org/zh-hans/%E4%BC%A0%E8%BE%93%E6%8E%A7%E5%88%B6%E5%8D%8F%E8%AE%AE">TCP三次握手</a></p><h2 id="协议协商"><a href="#协议协商" class="headerlink" title="协议协商"></a>协议协商</h2><p>（4）服务端协议报文</p><p>Hex内容</p><blockquote><p>0x 53 53 48 2d 32 2e 30 2d 4f 70 65 6e 53 53 48 5f 38 2e 30 0d 0a</p></blockquote><p>报文内容</p><blockquote><p>SSH-2.0-OpenSSH_8.0&lt;CR&gt;&lt;LF&gt;</p></blockquote><p>包括SSH、协议版本（2.0）、软件版本（OpenSSH_8.0）</p><p>（5）客户端协议报文</p><p>Hex内容</p><blockquote><p>0x 53 53 48 2d 32 2e 30 2d 6e 73 73 73 68 32 5f 37 2e 30 2e 30 30 33 33 20 4e 65 74 53 61 72 61 6e 67 20 43 6f 6d 70 75 74 65 72 2c 20 49 6e 63 2e 0d 0a</p></blockquote><p>报文内容</p><blockquote><p>SSH-2.0-nsssh2_7.0.0033 NetSarang Computer, Inc.&lt;CR&gt;&lt;LF&gt;</p></blockquote><h2 id="算法协商"><a href="#算法协商" class="headerlink" title="算法协商"></a>算法协商</h2><p>在算法协商的过程中，双方会各自发送自己支持的算法列表，最终对以下几个算法达成共识：</p><ul><li>kex_algorithms：密钥交换算法</li><li>server_host_key_algorithms：公钥算法</li><li>encryption_algorithms：加密算法</li><li>mac_algorithms：数据完整性算法</li><li>compression_algorithms：压缩算法</li><li>languages：语言标签（可选）</li><li>first_kex_packet_follows：表示是否有猜测数据包</li></ul><p>在达成共识的过程中，基本以客户端中的算法排序优先匹配</p><p>（6）服务端算法表报文</p><ul><li>packet_length：0x00 00 04 14（1044）</li><li>padding_length：0x05（5）</li><li>SSH_MSG_SERVICE_ACCEPT：0x14（<code>SSH_MSG_KEXINIT</code>）</li><li>Cookie：0xd7 86 29 66…(16Byte)</li><li>kex_algorithms length：下方算法表长度</li><li>kex_algorithms list：算法表（字符串表示，逗号分隔）</li><li>server_host_key_algorithms length：下方算法表长度</li><li>server_host_key_algorithms list：算法表（字符串表示，逗号分隔）</li><li>encryption_algorithms_client_to_server length：下方算法表长度</li><li>encryption_algorithms_client_to_server list：算法表（字符串表示，逗号分隔）</li><li>encryption_algorithms_server_to_client length：下方算法表长度</li><li>encryption_algorithms_server_to_client list：算法表（字符串表示，逗号分隔）</li><li>mac_algorithms_client_to_server length：下方算法表长度</li><li>mac_algorithms_client_to_server list：算法表（字符串表示，逗号分隔）</li><li>mac_algorithms_server_to_client length：下方算法表长度</li><li>mac_algorithms_server_to_client list：算法表（字符串表示，逗号分隔）</li><li>compression_algorithms_client_to_server length：下方算法表长度</li><li>compression_algorithms_client_to_server list：算法表（字符串表示，逗号分隔）</li><li>compression_algorithms_server_to_client length：下方算法表长度</li><li>compression_algorithms_server_to_client list：算法表（字符串表示，逗号分隔）</li><li>languages_client_to_server length：下方算法表长度</li><li>languages_client_to_server list：算法表（字符串表示，逗号分隔）</li><li>languages_server_to_client length：下方算法表长度</li><li>languages_server_to_client list：算法表（字符串表示，逗号分隔）</li><li>first_kex_packet_follows：0x00</li><li>Reserved：0x00 00 00 00</li><li>Padding：0x00 00 00 00 00（<code>padding_length</code>长度）</li></ul><p>（7）客户端算法表报文</p><p>与服务端算法表格式相同</p><h2 id="密钥交换"><a href="#密钥交换" class="headerlink" title="密钥交换"></a>密钥交换</h2><p>通过双方协商，决定采用Elliptic Curve Diffie-Hellman方式进行密钥交换</p><p>（8）客户端Diffie-Hellman Init</p><ul><li>packet_length：0x00 00 00 2c</li><li>padding_length：0x06</li><li>MSG：0x1e（Elliptic Curve Diffie-Hellman Key Exchange Init）</li><li>客户端公钥长度：0x00 00 00 20（32）</li><li>客户端公钥：0xd1 d9 b8 6c 84 67 55 0f ca 84 6e 8b 0e 67 25 27 6b 50 ae ed a4 6d dc 0b 73 4c 15 ad e9 f5 51 66</li><li>Padding：0x91 f0 e8 0c f4 9b</li></ul><p>（9）服务端Diffie-Hellman Reply，New Keys，加密包</p><p>服务端的回复包含三部分内容，Key Exchange Reply、New Keys、 加密包</p><p>其中，Key Exchange Reply包括了密钥交换的结果</p><ul><li>packet_length：0x00 00 03 5c</li><li>padding_length：0x08</li><li>MSG：0x1f（Elliptic Curve Diffie-Hellman Key Exchange Reply）</li><li>Host Key Length：0x00 00 01 97</li><li>Host Key Type Length：0x00 00 00 07</li><li>Host Key Type：0x73 73 68 2d 72 73 21（ssh-rsa）</li><li>Multi Precision Integer Length：0x00 00 00 03</li><li>RSA public exponent (e)：0x01 00 01</li><li>Multi Precision Integer Length：0x00 00 01 81</li><li>RSA Modulus (N)：0x00 be 1b 4b 73 9d f8 37 0e 33…</li><li>ECDH server’s ephemeral public key length：0x00 00 00 20</li><li>ECDH server’s ephemeral public key (Q_S)：0x3a 2e 62 f6 ee…</li><li>KEX H signature length：0x00 00 01 8f</li><li>KEX H signature ：0x00 00 00 07 73 73 68 2d 72 73 61 00 00 01 80 a0…</li><li>Padding：0x00 00 00 00 00 00 00 00</li></ul><p>New Keys表示密钥交换完成，此后的内容都需要使用新密钥处理</p><ul><li>packet_length：0x00 00 00 0c</li><li>padding_length：0x0a</li><li>MSG：0x15（<code>SSH_MSG_NEWKEYS</code>）</li><li>Padding：0x00 00 00 00 00 00 00 00 00 00</li></ul><p>后续的数据已经被加密，无法查看内容，推测是与客户端进行登录认证的协商</p><p>（10）客户端New Keys</p><p>客户端的New Keys包与服务端相同，后续客户端发送数据也都被加密处理</p>]]></content>
    
    
    <categories>
      
      <category>网络编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络编程</tag>
      
      <tag>SSH</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在Windows中使用Linux——WSL</title>
    <link href="/2023/11/17/WSL.html"/>
    <url>/2023/11/17/WSL.html</url>
    
    <content type="html"><![CDATA[<p><a href="https://learn.microsoft.com/zh-cn/windows/wsl/">https://learn.microsoft.com/zh-cn/windows/wsl/</a></p><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>豆知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>豆知识</tag>
      
      <tag>环境配置</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
